{"version":3,"sources":["AuthHelper.js","actions/RedirectFromAction.js","config.js","repository.js","actions/SkillActions.js","actions/UserActions.js","Utils.js","components/lib/TickComponent.js","components/layouts/Header.js","components/layouts/SideDrawer.js","components/Simulator/Faq.js","components/lib/RecordingComponent.js","components/Simulator/WelcomeCandidate.js","Containers/Simulator/SimulatorShell.js","components/lib/LocalLoginComponent.js","components/lib/LoadingComponent.js","components/Categories/AddCategory.js","components/Candidates/SelectCandidateExperience.js","components/Candidates/AddCandidate.js","actions/InviteConsoleActions.js","actions/CategoryActions.js","actions/AdminTestActions.js","actions/OpTests/OpTestActions.js","Containers/InviteConsole/InviteList.js","components/lib/ColorCodes.js","components/lib/ProgressBars.js","common/HelperFunctions.js","components/TeacherDashboard.js","components/StudentDashboard.js","components/OrgAdminDashboard.js","components/Dashboard.js","actions/DashboardActions.js","actions/OrgActions.js","components/lib/SnackbarComponent.js","Containers/User/EditUser.js","Containers/User/UsersList.js","Containers/User/AddUser.js","components/lib/LoginComponent.js","Containers/User/User401.js","Containers/User/UserContainer.js","Containers/User/UserForbidden.js","Containers/User/ResourceNotFound.js","components/Categories/CategoryList.js","Containers/CategoryContainer.js","Containers/Org/OrgList.js","Containers/Org/AddOrg.js","Containers/Org/OrgContainer.js","components/Skills/AddSkill.js","components/Skills/SkillList.js","Containers/SkillContainer.js","actions/TestConsoleActions.js","components/Mcq/AnswerOptions.js","Containers/TestConsole/McqItem.js","Containers/TestConsole/SelectedMcqs.js","Containers/TestConsole/McqSelector.js","Containers/TestConsole/TestConsoleQuestions.js","OnlinePortal/Tests/OpPublishTest.js","Containers/TestConsole/TestConsoleCandidates.js","Containers/TestConsole/TestConsoleSettings.js","Containers/TestConsole/TestConsoleTabs.js","Containers/TestConsole/TestConsoleContainer.js","components/Mcq/AddAnswerOption.js","components/Mcq/SelectExperience.js","components/Mcq/AddAcademicMcq.js","components/Mcq/AddMcq.js","actions/McqActions.js","Containers/McqContainer.js","components/Mcq/BulkUpload.js","Containers/CandidateContainer.js","components/AdminTest/AddTest.js","actions/CandidateActions.js","components/AdminTest/TestList.js","Containers/AdminTestContainer.js","components/Mcq/McqList.js","components/Candidates/CandidateList.js","Containers/InviteConsole/InviteConsoleContainer.js","Containers/InviteConsole/SendTestInvite.js","Containers/InviteConsole/InviteContainer.js","components/Simulator/Question.js","Containers/Simulator/QuestionSimulatorConsoleContainer.js","Containers/Simulator/SimulatorConsoleContainer.js","actions/QuestionSimulatorConsoleActions.js","HiTech/RmaCustomerDetails.js","HiTech/AddRmaProduct.js","HiTech/RmaProductList.js","HiTech/RmaVendorDetails.js","HiTech/RmaTermsAndConditions.js","HiTech/HiTechAddress.js","HiTech/AddRmaRequest.js","HiTech/RmaRequestList.js","HiTech/AddRmaRequestContainer.js","HiTech/RmaRequestActions.js","HiTech/ViewRmaRequest.js","HiTech/RmaRequestListContainer.js","components/lib/PrivateRoute.js","Containers/CandidateConsole/CandidateResponseReport.js","Containers/CandidateConsole/CandidateResponseDetails.js","Containers/CandidateConsole/CandidateRecording.js","Containers/CandidateConsole/CandidateConsoleTabs.js","Containers/CandidateConsole/CandidateConsoleContainer.js","actions/CandidateConsoleActions.js","OnlinePortal/Home/OpSignup.js","OnlinePortal/Home/OpLogin.js","OnlinePortal/Home/OpInstituteSignup.js","OnlinePortal/Home/OpLoginSignup.js","OnlinePortal/Home/OpEmailVerifiedSuccess.js","OnlinePortal/Tests/OpTestList.js","OnlinePortal/Tests/OpAddTest.js","OnlinePortal/Tests/OpMyTests.js","OnlinePortal/Home/OpHeader.js","OnlinePortal/Tests/OpTestContainer.js","OnlinePortal/Home/OpContent.js","components/Simulator/TestLandingPage.js","OnlinePortal/Home/OpMenu.js","OnlinePortal/Home/index.js","OnlinePortal/Tests/OpTestConsole.js","components/Grades/AddGrade.js","components/Grades/EditGrade.js","components/Grades/GradeList.js","Containers/GradeContainer.js","actions/GradeActions.js","Containers/TestsTaken/TestsTakenList.js","Containers/TestsTaken/RegisteredTestList.js","Containers/TestsTaken/RegisteredTestTab.js","Containers/TestsTaken/TestsTakenContainer.js","actions/RegisteredTestActions.js","OnlinePortal/Profile/OpProfile.js","OnlinePortal/Profile/ChangePassword.js","OnlinePortal/Profile/OpProfileContainer.js","components/Routes.js","components/Shell.js","reducers/categoryReducer.js","reducers/orgReducer.js","HiTech/rmaReducer.js","reducers/rootReducer.js","reducers/skillReducer.js","reducers/mcqReducer.js","reducers/candidateReducer.js","reducers/adminTestReducer.js","reducers/testConsoleReducer.js","reducers/inviteConsoleReducer.js","reducers/userReducer.js","reducers/questionSimulatorConsoleReducer.js","reducers/dashboardReducer.js","reducers/candidateConsoleReducer.js","reducers/gradeReducer.js","reducers/registeredTestReducer.js","store.js","App.js","OnlinePortal/lib/OnlinePortalPrivateRoute.js","OnlinePortal/lib/OnlinePortalRoutes.js","OnlinePortal/lib/OnlinePortalShell.js","OnlinePortalApp.js","serviceWorker.js","index.js"],"names":["history","AuthHelper","Login","res","token","headers","data","JSON","stringify","console","log","localStorage","setItem","GetUserInfo","userInfo","getItem","user","parse","name","getToken","isLoggedIn","UserRoles","LogOut","removeItem","SetHistory","propsHistory","GetHistory","RedirectFromAction","page","props","window","location","reload","hist","push","pathname","concat","state","domain","configValues","validHeaders","prop","config","initialize","Promise","resolve","reject","site_url","url","_this","isdevEnv","axios","get","then","catch","err","locationHref","href","indexOf","getSiteTitle","site_title","getSiteUrl","getApiHomeUrl","apiHomeUrl","getAdminApiUrl","admin_api","getCandidateApiUrl","candidate_api","getValue","key","OrderedAlphabets","Grades","TestVisibility","InvitedCandidates","Public","Roles","Candidate","Teacher","Student","instance","interceptors","response","use","error","status","repository","getData","options","x-access-token","message","saveData","model","post","updateData","put","deleteData","delete","FetchSkills","dispatch","type","payload","FetchUsers","statusText","SetUserInfo","LogoutCurrentUser","getDateTime","dateTime","withTime","finalStr","dt","Date","mm","getTwoDigitTime","getMonth","dd","getDate","getFullYear","h","getHours","m","getMinutes","seconds","formatToDecimals","score","places","isNaN","toFixed","sortDescending","array","sort","a","b","x","y","wait","delayInMS","setTimeout","TickComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","secondsInterval","minutesInterval","componentDidMount","setInterval","currentTick","setState","objectSpread","parseInt","minutes","submitAndCompleteTest","clearInterval","componentWillUnmount","render","react_default","createElement","className","onTimeElapse","React","Component","Header","classes","openState","isTokenExpired","_React$useState","useState","_React$useState2","slicedToArray","_React$useState3","_React$useState4","anchorEl","setAnchorEl","open","Boolean","AppBar_default","position","classNames","appBar","defineProperty","appBarShift","Toolbar_default","disableGutters","isDrawerRequired","IconButton_default","color","edge","aria-label","onClick","onDrawerOpen","menuButton","hide","Menu_default","Typography_default","style","styles","paddingLeft","variant","noWrap","isLogoutButtonRequired","welcomeMessage","event","currentTarget","aria-haspopup","AccountCircle_default","index_es","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","role","onLogout","right","marginLeft","MenuItems","routeName","routeCaption","icon","Dashboard","app","Book","Assessment","SupervisorAccount","ViewQuilt","Polymer","Work","PermIdentity","getIcon","menuItem","SideDrawer","_classNames","_classNames2","theme","Drawer_default","drawer","drawerOpen","drawerClose","paper","toolbar","onDrawerClose","direction","ChevronRight_default","ChevronLeft_default","Divider_default","List_default","map","index","react_router_dom","to","ListItem_default","button","ListItemIcon_default","title","ListItemText_default","textDecoration","primary","Faq","instruction","Send_default","RecordingComponent","onStartRecording","responseId","onStartCapturingScreenshots","interval","takeScreenShot","lengthInMS","navigator","mediaDevices","getUserMedia","video","audio","stream","setDeviceAccess","recorder","MediaRecorder","mimeType","ondataavailable","start","stopped","onstop","onerror","recorded","stop","all","ex","_ref","asyncToGenerator","regenerator_default","mark","_callee","recordedChunks","recordedBlob","wrap","_context","prev","next","length","Blob","size","Content-Type","postToServer","alert","_x","apply","arguments","onStop","_callee2","track","imageCapture","bitmap","canvas","image","buff","file","_context2","getDisplayMedia","mediaSource","getVideoTracks","ImageCapture","grabFrame","sent","document","getElementById","width","height","getContext","drawImage","toDataURL","fetch","arrayBuffer","File","_ref3","_callee3","blob","requestConfig","formData","now","fileName","_context3","FormData","getSeconds","append","t0","_x2","_x3","Fragment","WelcomeCandidate","container","gutterBottom","align","paddingTop","textCenter","fontSize","SimulatorShell","localHandler","invitationId","result","errorMessage","inviteid","match","params","spacing","item","xs","sm","md","Simulator_WelcomeCandidate","Simulator_Faq","Button_default","connect","userReducer","LocalLoginComponent","preventDefault","emailId","password","logInButtonText","onEmailIdChange","value","onPasswordChange","_this$state","noValidate","autoComplete","onSubmit","e","label","onChange","target","margin","center","top","left","transform","LoadingComponent","CircularProgress_default","AddCategoryComponent","display","editMode","Card_default","padding","lib_LoadingComponent","avatar","Avatar_default","Add_default","Edit_default","action","onAdd","CardContent_default","FormControl_default","formControl","TextField_default","category_meta","onFieldChange","multiline","rows","description","CardActions_default","actionButton","backgroundColor","years","months","SelectCandidateExperience","handleChange","handleClickOpen","handleClose","handleSubmit","onSubmitExperience","isTestAdmin","Dialog_default","disableBackdropClick","disableEscapeKeyDown","DialogTitle_default","DialogContent_default","InputLabel_default","htmlFor","Select_default","input","Input_default","MenuItem_default","DialogActions_default","AddCandidate","dense","fullName","email","contactno","Candidates_SelectCandidateExperience","EvaluateResults","SendInvite","UpdateCategory","categoryModel","FetchCategories","CurrentTestFieldChange","val","field","test_meta","testName","skill","duration","grade","subject","AddTest","testModel","FetchPublicTests","RegisterForTest","CustomTableCell","withStyles","head","palette","common","black","body","TableCell","InviteList","invitations","Table_default","TableHead_default","TableRow_default","TableBody_default","invitation","component","scope","testId","candidateName","invitationStatus","invitedOn","completedOn","candidateId","backLink","evaluateResults","success","secondary","warning","info","BorderLinearProgressPrimary","root","borderRadius","colorPrimary","bar","LinearProgress","BorderLinearProgressWarning","BorderLinearProgressInfo","BorderLinearProgressSuccess","TestStatus","SendInviteRoles","CanSendInvite","testStatus","GetCurrentUserRole","toUpperCase","EscapeSpecialCharacters","stringContent","replace","TeacherDashboard","fetchTestCount","fetchMcqCount","fetchInvitationCount","fetchRecentResponses","_this$props","recentResponses","testCount","mcqCount","invitationCount","completedTests","pendingTests","forEach","slice","TeacherDashboard_StatisticsPanel","dashboardPanel","TeacherDashboard_RecentResponses","TeacherDashboard_PendingInvitations","StatisticsPanel","icons_index_es","totalCompletedCount","RecentResponses","PendingInvitations","minHeight","TestsList","tests","testItem","selectedMcqs","user_meta","RegistrationButton","registerForTest","startRegisteredTest","registerForTestHandler","startTestHandler","registrationStatus","st","scheduledStart","registrationId","modifiedOn","availableSlots","slot","dailyTimeSlots","nowAvailableTimeSlots","today","nextDay","currentHour","getNextAvailableTimeSlots","StudentDashboard","upcomingTests","StudentDashboard_TestsList","OrgAdminDashboard","OrgAdminDashboard_StatisticsPanel","OrgAdminDashboard_RecentResponses","OrgAdminDashboard_PendingInvitations","components_TeacherDashboard","FetchInvitationCount","FetchMcqCount","FetchTestCount","FetchRecentResponses","components_OrgAdminDashboard","paletteBorderLeftSuccessMain","verticalCenter","bgSuccessMain","paletteBorderLeftPrimaryMain","paletteBorderLeftSecondaryMain","marginTop","paletteDashboardBox","paletteBorderBottomSuccessLight","dashboardHeight","dashboardReducer","adminTestReducer","FetchOrgs","SnackbarComponent","openSnack","Snackbar_default","autoHideDuration","ContentProps","aria-describedby","snackMessage","Close_default","SnackbarContent_default","EditUser","marginBottom","UsersList","handleEditClick","editIndex","userEditIndex","onUpdateUser","users","orgs","UsersList_CustomTableCell","react","User_EditUser","orgId","org_meta","onDeleteUser","AddUser","fullWidth","labelWidth","LoginComponent","googleResponse","access_token","accessToken","google_login","clientId","buttonText","onSuccess","onFailure","cookiePolicy","User401","lib_LocalLoginComponent","UserContainer","onAddUser","DeleteUser","UpdateUser","current_user","orgList","split","User_User401","Grid_default","User_AddUser","CurrentUserFieldChange","User_UsersList","lib_SnackbarComponent","snack_open","CloseSnackbar","orgReducer","userModel","errorStatus","OpenSnackbar","UserForbidden","ResourceNotFound","CategoryList","ViewHeadline_default","onSearchEnable","searchEnabled","Search_default","categories","Collapse_default","in","placeholder","searchTerm","onSearchCategory","category","divider","onCategorySelect","ListItemSecondaryAction_default","onDeleteCategory","Remove_default","CategoryContainer","componentWillUpdate","success_message","componentWillReceiveProps","newprops","oldprops","search_enabled","filteredCategories","categoryList","Categories_AddCategory","AddCategory","current_category","CurrentCategoryFieldChange","Categories_CategoryList","SelectCategory","BeginSearch","DeleteCategory","search_term","SearchCategory","categoryReducer","filter","toLowerCase","OrgList","org","onOrgSelect","city","AddOrgComponent","OrgContainer","onAddOrg","UpdateOrg","AddOrg","current_org","Org_AddOrg","CurrentOrgFieldChange","Org_OrgList","SelectOrg","orgModel","AddSkillComponent","SkillList","skills","onSearchSkill","skillItem","skill_meta","Chip_default","chip","SkillContainer","filteredSkills","skillList","Skills_AddSkill","AddSkill","current_skill","CurrentSkillFieldChange","Skills_SkillList","SearchSkill","skillReducer","skillModel","FetchTest","PublishTest","AnswerOptions","choices","onChoiceSelect","dangerouslySetInnerHTML","__html","content","isCorrect","Transition","assign","McqItem","handleDelete","onDeleteMcq","mcq","markForDeletion","mcqItem","isSelectable","isEditable","isDeletable","isChecked","mcq_meta","questionOrderIndex","question","chapterNo","onAddMcqToTest","selected","onRemoveMcqFromTest","checked","onEditClick","TransitionComponent","fullScreen","bottom","Mcq_AnswerOptions","SelectedMcqs","sortMcqs","mcqs","orderedSelectedMcqs","TestConsole_McqItem","onSelect","openMcq","McqSelector","mcqList","onSelectMcqItem","onSelectMcq","_this$props2","findIndex","TestConsoleQuestions","currentTest","TestConsole_McqSelector","TestConsole_SelectedMcqs","OpPublishTest","onSelectUser","userItem","selectedUsers","newSelectedUsers","suItem","onUnselecttUser","invitees","invitee","onSendInvitations","filteredUsers","searchText","class","data-toggle","data-target","aria-expanded","aria-controls","InputProps","startAdornment","InputAdornment_default","TestConsoleCandidates","candidates","userRole","Tests_OpPublishTest","InviteConsole_InviteList","white","&:nth-of-type(odd)","background","default","TableRow","TestConsoleSettings","emailSubject","settings","testVisibility","testSkill","testGrade","testSubject","testCategory","testDuration","experienceYears","createdOn","createdBy","videoMonitoringRequired","for","onSubmitTestSettings","TestConsoleTabs","selectedTabIndex","tabs","TestConsoleTabs_LinkTab","TestConsoleTabs_TabContainer","TestConsole_TestConsoleQuestions","TestConsole_TestConsoleCandidates","TestConsole_TestConsoleSettings","onSettingsFieldChange","TabContainer","children","LinkTab","TestConsoleContainer","LoadTestMcqs","current_test","LoadTestStudents","LoadTestCandidates","onAddTest","AddMcqToTest","snackOpen","RemoveMcqFromTest","onPublish","handleSettingsFieldChange","SettingsFieldChange","submitTestSettings","UpdateTestSettings","sendInvites","subheader","TestConsole_TestConsoleTabs","getButton","testConsoleReducer","filterIndex","undefined","mcqId","splice","AddAnswerOption","_props$children","currentAnswer","onAnswerFieldChange","onAnswerAdd","choiceEditorState","onChoiceEditorChange","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","react_draft_wysiwyg","editorState","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","FormControlLabel_default","control","Switch_default","ExpansionPanelActions_default","experienceLevel","SelectExperience","min","max","AddAcademicMcq","disabled","questionEditorState","onQuestionEditorStateChange","Mcq_AddAnswerOption","AddMcq","Mcq_AddAcademicMcq","goBack","OutlinedInput_default","Mcq_SelectExperience","SearchMcq","searchCriteria","matchesQuestion","matchesDescription","skillArray","includes","matchesSkill","matchesCategory","FetchMcqs","isDeleted","McqContainer","draftToHtml","convertToRaw","getCurrentContent","CurrentMcqFieldChange","current_mcq","CurrentAnswerFieldChange","onAddMcq","UpdateMcq","Mcq_AddMcq","AddAnswerChoice","EditorState","createEmpty","mcqReducer","mcqModel","answerModel","answerKeyIndex","SelectMcq","minimumExperience","maximumExperience","BulkUpload","handleFileLoaded","matrixArray","finalJson","columnIndex","validateHeaders","validCount","itemArray","rowIndex","colValue","colIndex","filteredHeaders","startsWith","minBulkCount","maxBulkCount","onUpload","isValid","idx","vh","matrix","matrixLength","handleError","react_csv_reader_default","cssClass","onFileLoaded","onError","inputId","inputStyle","CandidateContainer","onAddCandidate","Candidates_AddCandidate","current_candidate","CurrentCandidateFieldChange","candidateReducer","candidateModel","UpdateCandidate","experienceMonths","TestList","TestList_CustomTableCell","test","AdminTestContainer","FetchTests","AdminTest_AddTest","AdminTest_TestList","UpdateTest","McqList","DeleteMcq","bulkDeleteMcq","BulkDeleteMcq","filteredMcqs","handleFilterChange","criteria","attributes","getNamedItem","selectedSkills","innerHTML","skillCriteriaEnabled","clearFilters","mcqToDisplay","criteriaObj","renderFilters","inputProps","data-criteria","multiple","renderValue","join","EndSearch","Fab_default","categoryItem","ix","mcqIdsToDelete","CandidateList","FetchCandidates","InviteConsoleContainer","inviteAdded","FetchInvitations","inviteConsoleReducer","SendTestInvite","inviteInfo","helperText","emailTo","margintop","editorControl","InviteContainer","onSendInvite","InviteConsole_SendTestInvite","InviteInfoFieldChange","Question","selectedAnswers","choiceItem","choiceIndex","onResponseChange","candidateResponse","responseKeys","QuestionSimulatorConsoleContainer","currentQuestion","qEntity","questionNumberText","currentQuestionIndex","totalQuestions","testDurtion","response_meta","lib_TickComponent","submitAnswers","text","Simulator_Question","choiceKey","goToPrevious","goToNext","SimulatorConsoleContainer","_this$props$match$par","LoadRegisteredExamSimulator","LoadExamSimulator","candidateTestObject","SubmitRegisteredTestAnswers","SubmitAnswers","SetDeviceAccess","access","deviceAccess","RecordingComponent_RecordingComponent","Simulator_QuestionSimulatorConsoleContainer","ResponseChange","GoToPrevious","GoToNext","close","questionSimulatorConsoleReducer","GetInvitation","invitationModel","responseKey","removeKeyIndex","find","RmaCustomerDetails","customerName","address","width50","telephone","fax","contactPerson","paddingRight","AddRmaProduct","maxWidth","modelNo","quantity","invoiceNo","deliveryChallanNo","serialNo","productUseAddress","failureDescription","RmaProductList","HiTech_AddRmaProduct","product","onAddRmaProduct","current_product","onProductFieldChange","productList","RmaProductList_CustomTableCell","RmaVendorDetails","halfWidth","purchaseDate","vendorName","RmaTermsAndConditions","HiTechAddress","AddRmaRequestComponent","customerDetails","vendorDetails","Book_default","HiTech_RmaCustomerDetails","HiTech_RmaProductList","productItem","HiTech_RmaVendorDetails","onVendorDetailsFieldChange","HiTech_RmaTermsAndConditions","HiTech_HiTechAddress","RmaRequestList","rmaRequests","requestList","reverse","RmaRequestList_CustomTableCell","rmaRequest","onViewRma","AddRmaRequestContainer","InitializeRmaFields","current_rma_request","HiTech_AddRmaRequest","AddRmaRequest","CurrentRmaRequestFieldChange","VendorDetailsFieldChange","AddProductToRma","ProductFieldChange","saving","rmaReducer","rmaRequestModel","hitechApiUrl","field_version","ViewRmaRequest","renderCustomerDetails","group","renderVendorDetails","onBackToAllRequests","RmaRequestListContainer","FetchRmaRequests","selectedRmaRequestModel","HiTech_RmaRequestList","SelectRmaRequest","HiTech_ViewRmaRequest","GoBackToAllRequests","isAuthorized","PrivateRoute","rest","authed","objectWithoutProperties","react_router","CandidateResponseReport","fetchCandidateResponseReport","candidateResponses","invitation_meta","evaluation_meta","mcqCorrectAnswers","summary","correctAnswersCount","totalScore","candidateScore","responsesToRender","matchingMcqItem","correctAnswer","scorePercentage","renderSummary","CandidateResponseReport_CustomTableCell","responseItem","fontWeight","CandidateResponseDetail","fetchCandidateDetails","candidateDetails","isRegistered","renderRegisteredCandidateDetails","renderCandidateDetails","registrations","basicDetails","candidate_meta","pendingRegistrations","completedRegistrations","registration","cellNumber","modified_on","created_on","pendingInvitations","completedInvitations","CandidateRecording","fetchRecordings","responseRecordings","baseApiUrl","recordingItem","controls","src","CandidateConsoleTabs","CandidateConsoleTabs_LinkTab","CandidateConsoleTabs_TabContainer","CandidateConsole_CandidateResponseReport","FetchCandidateResponseReport","CandidateResponseDetails","FetchCandidateDetails","CandidateConsole_CandidateRecording","FetchRecordings","CandidateConsoleContainer","onUpdateCandidateDetails","CandidateConsole_CandidateConsoleTabs","candidateConsoleReducer","OpSignup","_useState","_useState2","setName","_useState3","_useState4","setEmail","_useState5","_useState6","setPassword","_useState7","_useState8","userType","setUserType","_useState9","_useState10","signupButtonText","setSignupButtonText","_useState11","_useState12","signupStatus","setSignupStatus","_useState13","_useState14","setErrorMessage","useEffect","errors","validateInputs","OpLogin","OpInstituteSignup","OpLoginSignup","setValue","Tabs_default","newVal","OpLoginSignup_LinkTab","OpLoginSignup_TabContainer","Home_OpLogin","Home_OpSignup","Home_OpInstituteSignup","Tab_default","OpEmailVerifiedSuccess","userIv","userContent","progressText","isError","OpTestList","upcomingExams","upcomingExam","onRegisterClick","startsAt","OpAddTest","grades","gradeItem","OpMyTests","OpMyTests_CustomTableCell","OpHeader","activeTestList","testListModes","PublicTests","showPublicTests","MyTests","showMyTests","MyInstituteTests","OpTestContainer","FetchMyTests","Tests_OpAddTest","Tests_OpTestList","Tests_OpMyTests","OpContent","Tests_OpTestContainer","TestLandingPage","openSimulator","btn","border","OpMenu","menuItems","teacherMenu","candidateMenu","studentMenu","path","caption","OpShell","Home_OpContent","OpTestConsole","TestConsole_TestConsoleContainer","publishWithInvites","AddGradeComponent","EditGrade","current_subject","grade_meta","onAddSubject","subjects","subjectItem","GradeList","onCurrentSubjectChange","current_grade","classList","onSelectGrade","Grades_EditGrade","selectedGrade","GradeContainer","FetchGrades","firstGrade","SelectCurrentGrade","submitNewGrade","AddGrade","Grades_AddGrade","CurrentGradeFieldChange","Grades_GradeList","CurrentSubjectChange","UpdateGrade","gradeReducer","classModel","alreadyExistSubject","sub","subjectModel","gradeModel","TestsTakenList","testsTakenList","testsTakenItem","evaluationMeta","RegisteredTestsList","RegisteredTestTab","aria-selected","aria-labelledby","components_StudentDashboard","RegisteredTestList","TestsTaken_TestsTakenList","TestsTakenContainer","FetchMyRegisteredTests","registeredTests","TestsTaken_RegisteredTestTab","registeredTestReducer","OpProfile","ChangePassword","resetFields","currentPassword","submitButtonText","onCurrentPasswordChange","OpProfileContainer","Profile_OpProfile","Profile_ChangePassword","Routes","lib_PrivateRoute","exact","DashboardComponent","BulkMcq","CategoriesContainer","SkillsContainer","UsersComponent","Shell","showStandbyPage","handleDrawerOpen","handleDrawerClose","Logout","StandbyMessage","_this2","CssBaseline_default","layouts_Header","Home_OpMenu","components_Routes","layouts_SideDrawer","_createMuiTheme","createMuiTheme","overflowY","bgSuccessDark","bgSuccessLight","bgPrimaryMain","bgPrimaryDark","bgPrimaryLight","bgWarningMain","bgWarningDark","bgWarningLight","bgInfoMain","bgInfoDark","bgInfoLight","bgSecondaryMain","bgSecondaryDark","bgSecondaryLight","borderLeft","paletteBorderLeftSuccessLight","paletteBorderLeftSuccessDark","paletteBorderLeftPrimaryLight","paletteBorderLeftPrimaryDark","paletteBorderLeftSecondaryLight","paletteBorderLeftSecondaryDark","paletteBorderBottomSuccessMain","borderBottom","paletteBorderBottomSuccessDark","paletteBorderBottomPrimaryMain","paletteBorderBottomPrimaryLight","paletteBorderBottomPrimaryDark","paletteBorderBottomSecondaryMain","paletteBorderBottomSecondaryLight","paletteBorderBottomSecondaryDark","paletteBorderBottomListItem","palettePrimaryLight","palettePrimaryMain","palettePrimaryDark","textAlign","palettePrimaryContrastText","paletteSecondaryLight","paletteSecondaryMain","paletteSecondaryDark","paletteSecondaryContrastText","paletteReportBox","profileBox","infoText","fontSubHeading","fontWhiteSecondary","fontBlackPrimary","fontBlackSecondary","squareIcon","zIndex","transition","transitions","create","easing","sharp","leavingScreen","enteringScreen","marginRight","flexShrink","whiteSpace","overflowX","unit","breakpoints","up","alignItems","justifyContent","mixins","flexGrow","paddingBottom","withTheme","initial_current_Category","initial_current_org","initial_state","appReducer","combineReducers","field_updated","current_MCQ","current_CANDIDATE","filteredCandidates","contactnoList","current_TEST","arr","state_changed","answerId","mcqAdded","operation","newObj","inivteAdded","current_USER","currentUserLocal","candidateInfo","testObject","current_class","newState","viewRmaRequestModel","rootReducer","configureStore","createStore","applyMiddleware","thunk","App","isAuthenticated","es","store","components_Shell","OnlinePortalPrivateRoute","OnlinePortalRoutes","lib_OnlinePortalPrivateRoute","Home","OnlinePortalShell","Home_OpHeader","lib_OnlinePortalRoutes","hostname","ReactDOM","src_App_0","serviceWorker","ready","unregister"],"mappings":"iXAAIA,EAAU,GAmDCC,EAlDI,CACfC,MAAO,SAACC,GACJ,IAAMC,EAAQD,EAAIE,QAAQ,gBACpBC,EAAOC,KAAKC,UAAUL,EAAIG,MAChCG,QAAQC,IAAI,WAAYJ,GACxBK,aAAaC,QAAQ,aAAcR,GACnCO,aAAaC,QAAQ,YAAaN,IAEtCO,YAAa,WACT,IAAIC,EAAWH,aAAaI,QAAQ,aACpC,GAAGD,EAAU,CACT,IAAIE,EAAOT,KAAKU,MAAMH,GAEtB,OADAL,QAAQC,IAAI,WAAYM,EAAKE,MACtBF,EAIX,OAFIP,QAAQC,IAAI,0BAET,MAEXS,SAAU,WACN,OAAOR,aAAaI,QAAQ,eAEhCK,WAAY,WAGR,QAFYT,aAAaI,QAAQ,eAQrCM,UAAW,WACP,MAAO,CAAE,QAAS,YAAa,YAAa,UAEhDC,OAAQ,WACJb,QAAQC,IAAI,gBACZC,aAAaY,WAAW,cACxBZ,aAAaY,WAAW,cAI5BC,WAAY,SAACC,GACThB,QAAQC,IAAI,cAAee,GAC3BzB,EAAUyB,GAEdC,WAAY,WAER,OADAjB,QAAQC,IAAI,eACLV,ICvBA2B,EApBY,SAACC,EAAMC,GAClB,UAATD,GACCE,OAAOC,SAASC,SAEpB,IAAIC,EAAOhC,EAAWyB,aACtBjB,QAAQC,IAAI,yBAA0BuB,GACb,oBAAfA,EAAKC,MAEXD,EAAKC,KAAK,CACNC,SAAQ,IAAAC,OAAOR,GACfS,MAAOR,KCZfS,EAAS,wBAGTC,EAAe,GACbC,EAAe,CACjB,CAAEC,KAAM,WAAYvB,KAAM,YAC1B,CAAEuB,KAAM,QAASvB,KAAM,SACvB,CAAEuB,KAAM,WAAYvB,KAAM,SAC1B,CAAEuB,KAAM,cAAevB,KAAM,eAC7B,CAAEuB,KAAM,QAASvB,KAAM,SACvB,CAAEuB,KAAM,oBAAqBvB,KAAM,OACnC,CAAEuB,KAAM,oBAAqBvB,KAAM,OACnC,CAAEuB,KAAM,gBAAiBvB,KAAM,UAC/B,CAAEuB,KAAM,UAAWvB,KAAM,KACzB,CAAEuB,KAAM,UAAWvB,KAAM,KACzB,CAAEuB,KAAM,UAAWvB,KAAM,KACzB,CAAEuB,KAAM,UAAWvB,KAAM,KACzB,CAAEuB,KAAM,UAAWvB,KAAM,MASRwB,mDAGjBC,WAAa,WACT,OAAO,IAAIC,QAAQ,SAACC,EAASC,GACzB,IAAIP,IAAgBA,EAAaQ,SAAjC,CAGA,IAEIC,GAFSC,EAAKC,WAAaZ,EAAS,IAErB,kBACnBa,IAAMC,IAAIJ,GACLK,KAAK,SAAClD,GACHM,QAAQC,IAAI,gBAAiBP,EAAIG,OACjCiC,EAAepC,EAAIG,QAEX2C,EAAKC,aACLX,EAAaQ,SAAWT,GAE5BO,EAAQN,MAGfe,MAAM,SAACC,GACJT,EAAOS,cAQvBL,SAAW,WACP,IAAIM,EAAe1B,OAAOC,SAAS0B,KACnC,OAAQD,EAAaE,QAAQ,mBAAqB,GAC1CF,EAAaE,QAAQ,mBAAqB,QAGtDC,aAAe,WACX,OAAOpB,EAAaqB,iBAGxBC,WAAa,WAET,IAAIL,EAAe1B,OAAOC,SAAS0B,KACnC,OAAGD,EAAaE,QAAQ,mBAAqB,EAAG,wBAC7CF,EAAaE,QAAQ,mBAAqB,EAAG,wBACzCnB,EAAaQ,eAGxBe,cAAgB,WACZ,IAAIC,EAAad,EAAKY,aAClBL,EAAe1B,OAAOC,SAAS0B,KAGnC,OAFGD,EAAaE,QAAQ,mBAAqB,IAAGK,EAAU,yBACvDP,EAAaE,QAAQ,mBAAqB,IAAGK,EAAU,yBACnDA,QAGXC,eAAiB,WAKb,OAAOf,EAAKa,gBAAkBvB,EAAa0B,gBAG/CC,mBAAqB,WAEjB,OAAOjB,EAAKa,gBAAkBvB,EAAa4B,oBAG/CC,SAAW,SAACC,GACR,OAAO9B,EAAa8B,SAGxBC,iBAAmB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,UAEjE9B,aAAeA,OAEf+B,OAAS,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAAW,WAAW,iBAE1HC,eAAiB,CACbC,kBAAmB,oBACnBC,OAAQ,eAGZC,MAAQ,CACJC,UAAW,YACXC,QAAS,UACTC,QAAS,YAxFIpC,EACVqC,SAAWrC,EAAOqC,UAAY,IAAIrC,EC1B7CS,IAAM6B,aAAaC,SAASC,IAAI,SAAAD,GACxB,OAAOA,GACR,SAAAE,GACC,IAAIA,EAAMF,SAAU,MAAME,EAa9B,MAZ8B,MAA1BA,EAAMF,SAASG,OACf3E,QAAQC,IAAI,gBAAiByE,EAAMF,UAGJ,MAA1BE,EAAMF,SAASG,QACpB3E,QAAQC,IAAI,gBAAiByE,EAAMF,UACnCtD,EAAmB,kBAEY,MAA1BwD,EAAMF,SAASG,SACpB3E,QAAQC,IAAI,gBAAiByE,EAAMF,UACnCtD,EAAmB,aAEjBwD,EAAMF,WAGhB,IAiEeI,EAAA,CACXC,QAlEY,SAACtC,GAEb,IACIuC,EAAU,CACVlF,QAAS,CACPmF,iBAHYvF,EAAWkB,aAM7B,OAAO,IAAIyB,QAAQ,SAACC,EAASC,GACzBK,IAAMC,IAAIJ,EAAKuC,GACdlC,KAAK,SAAClD,GAEH,GADAM,QAAQC,IAAI,MAAOP,GACD,MAAfA,EAAIiF,OAEH,OADA3E,QAAQC,IAAI,4CACLoC,EAAO3C,GAElB0C,EAAQ1C,KAEXmD,MAAM,SAACC,GACJ9C,QAAQC,IAAI,MAAO6C,GAChBA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,UACpBxF,EAAWqB,SACXK,EAAmB,UAEvBmB,EAAOS,QA2CfmC,SArCa,SAAC1C,EAAK2C,GAEnB,IACIJ,EAAU,CACVlF,QAAS,CACPmF,iBAHYvF,EAAWkB,aAM7B,OAAOgC,IAAMyC,KAAK5C,EAAK2C,EAAOJ,IA8B9BM,WA3Be,SAAC7C,EAAK2C,GAErB,IACIJ,EAAU,CACVlF,QAAS,CACPmF,iBAHYvF,EAAWkB,aAM7B,OAAOgC,IAAM2C,IAAI9C,EAAK2C,EAAOJ,IAoB7BQ,WAjBe,SAAC/C,EAAK2C,GAErB,IACIJ,EAAU,CACVlF,QAAS,CACPmF,iBAHYvF,EAAWkB,YAKzBb,KAAMqF,GAGV,OADAlF,QAAQC,IAAI,iBAAkB6E,GACvBpC,IAAM6C,OAAOhD,EAAKuC,KCehBU,EAAc,kBAAM,SAAAC,GAC7BA,EAAS,CACLC,KA3F0B,uBA6F9B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,eAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAhGoB,uBAiGpBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KArGiB,oBAsGjBC,QAAS7C,QCpFrBvD,EAAU,GA+GDqG,EAAa,kBAAM,SAAAH,GAC5B,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,cAC7CqB,EAAWC,QAAQtC,EAAKhD,GACnBqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA9HkB,qBA+HlBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAnIe,kBAoIfC,QAAS7C,EAAI+C,iBA4BhBC,EAAc,SAACpG,GAAD,OAAS,SAAA+F,GAChC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB7C,EAAWC,MAAMC,GACjB,IAAIW,EAAWb,EAAWY,cAC1BqF,EAAS,CACLC,KApKuB,sBAqKvBC,QAAStF,IAEb+B,GAAQ,OAGH2D,EAAoB,kBAAM,SAAAN,GACnCjG,EAAWqB,SACX4E,EAAS,CACLC,KA5K2B,oKCvBtBM,EAAc,SAACC,EAAUC,GAClC,IAAIC,EAAW,GACf,GAAIF,EAAU,CACV,IAAIG,EAAK,IAAIC,KAAKJ,GACdK,EAAKC,EAAgBH,EAAGI,WAAa,GACrCC,EAAKF,EAAgBH,EAAGM,WAG5B,GADAP,EAAQ,GAAAxE,OAAMyE,EAAGO,cAAT,KAAAhF,OAA0B2E,EAA1B,KAAA3E,OAAgC8E,GACpCP,EAAU,CAEV,IAAIU,GAAKR,EAAGS,WAAa,GAAK,IAAM,IAAMT,EAAGS,WACzCC,GAAKV,EAAGW,aAAe,GAAK,IAAM,IAAMX,EAAGW,aAC/CZ,GAAQ,IAAAxE,OAAQiF,EAAR,KAAAjF,OAAamF,IAG7B,OAAOX,GAGEI,EAAkB,SAACS,GAE5B,OADWA,EAAU,GAAK,IAAM,IAAMA,GAqC7BC,EAAmB,SAACC,EAAOC,GACpC,OAAID,IAAUE,MAAMF,GAAeA,EAAMG,QAAQF,GAC1C,MAUEG,GAAiB,SAACC,EAAO3D,GAClC,OAAO2D,EAAMC,KAAK,SAACC,EAAGC,GAClB,IAAIC,EAAIF,EAAE7D,GAAUgE,EAAIF,EAAE9D,GAC1B,OAAS+D,EAAIC,GAAM,EAAMD,EAAIC,EAAK,EAAI,KAIjCC,GAAO,SAACC,GACjB,OAAO,IAAI3F,QAAQ,SAAAC,GAAO,OAAI2F,WAAW3F,EAAS0F,MCzEhDE,eAIF,SAAAA,EAAY5G,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,IACfxF,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,KAAM/G,KAJVmH,gBAAkB,EAGC/F,EAFnBgG,gBAAkB,EAEChG,EAWnBiG,kBAAoB,WAChBjG,EAAK+F,gBAAkBG,YACnB,WAAM,IACI1B,EAAYxE,EAAKZ,MAAM+G,YAAvB3B,QAENxE,EAAKoG,SAAS,CACVD,YAAYV,OAAAY,EAAA,EAAAZ,CAAA,GACLzF,EAAKZ,MAAM+G,YADP,CAEP3B,QAAST,EAAgBuC,SAAS9B,GAAW,QAIzD,KAEJxE,EAAKgG,gBAAkBE,YACnB,WAAM,IACIK,EAAYvG,EAAKZ,MAAM+G,YAAvBI,QAEN,GAAe,OAAZA,EAKC,OAHAvG,EAAKZ,MAAMoH,wBACXC,cAAczG,EAAK+F,sBACnBU,cAAczG,EAAKgG,iBAGvBhG,EAAKoG,SAAS,CACVD,YAAYV,OAAAY,EAAA,EAAAZ,CAAA,GACLzF,EAAKZ,MAAM+G,YADP,CAEPI,QAASxC,EAAgBuC,SAASC,GAAW,GAC7C/B,QAAS,QAIrB,MA5CWxE,EAgDnB0G,qBAAuB,WACnBD,cAAczG,EAAK+F,iBACnBU,cAAczG,EAAKgG,kBAlDJhG,EAqDnB2G,OAAS,WAAM,IACLR,EAAgBnG,EAAKZ,MAArB+G,YACN,OACIS,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,gBAAhB,qBAAuDF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,8BAAhB,IAA+CX,EAAYI,QAA3D,IAAqEJ,EAAY3B,SAAeoC,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,gBAAhB,cAvD/J9G,EAAKZ,MAAQ,CACToH,sBAAuB5H,EAAMmI,aAC7BZ,YAAa,CACTI,QAAU3H,GAASA,EAAM2H,QAAWxC,EAAgBnF,EAAM2H,QAAQ,GAAK,GACvE/B,QAAS,KANFxE,6BAJKgH,IAAMC,WAkEnBzB,MCsCA0B,GA9FA,SAACtI,GAAU,IACduI,EAAuCvI,EAAvCuI,QAASC,EAA8BxI,EAA9BwI,UAIbvJ,GAJ2Ce,EAAnByI,eAIbrK,EAAWY,eALJ0J,EAMEN,IAAMO,UAAS,GANjBC,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAA6B,EAAA,GAAAI,GAAAF,EAAA,GAAAA,EAAA,GAOUR,IAAMO,SAAS,OAPzBI,EAAAlC,OAAAgC,EAAA,EAAAhC,CAAAiC,EAAA,GAOfE,EAPeD,EAAA,GAOLE,EAPKF,EAAA,GAQhBG,EAAOC,QAAQH,GASrB,OACIhB,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACmB,EAAA/C,EAAD,CACIgD,SAAS,QACTnB,UAAWoB,IAAWf,EAAQgB,OAAT1C,OAAA2C,EAAA,EAAA3C,CAAA,GACpB0B,EAAQkB,YAAcjB,KAGvBR,EAAA3B,EAAA4B,cAACyB,EAAArD,EAAD,CAASsD,gBAAiBnB,GAElBxI,EAAM4J,kBACN5B,EAAA3B,EAAA4B,cAAC4B,EAAAxD,EAAD,CACIyD,MAAM,UACNC,KAAK,QACLC,aAAW,cACXC,QAAS,kBAAMjK,EAAMkK,gBACrBhC,UAAWoB,IAAWf,EAAQ4B,WAATtD,OAAA2C,EAAA,EAAA3C,CAAA,GACpB0B,EAAQ6B,KAAO5B,KAGhBR,EAAA3B,EAAA4B,cAACoC,EAAAhE,EAAD,OAGZ2B,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAakE,MAAOC,GAAOC,YAAaC,QAAQ,KAAKZ,MAAM,UAAUa,QAAM,GACnE3C,EAAA3B,EAAA4B,cAAA,KAAGrG,KAAMf,EAAOqC,SAASX,SAAS,YAAagI,MAAO,CAACT,MAAO,SACzDjJ,EAAOqC,SAASX,SAAS,gBAGrCtD,GAAYe,EAAM4K,wBACnB5C,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,YAAYZ,MAAM,UAAUa,QAAM,EAACJ,MAAOC,GAAOK,gBAChE5L,EAASI,MAIVjB,EAAWmB,cAAgBS,EAAM4K,wBACjC5C,EAAA3B,EAAA4B,cAAA,OAAKsC,MAAOC,GAAOL,YACnBnC,EAAA3B,EAAA4B,cAAC4B,EAAAxD,EAAD,CACI4D,QA7CG,SAACa,GAChB7B,EAAY6B,EAAMC,gBA6CNhB,KAAK,MACLC,aAAW,0BACXgB,gBAAc,OACdlB,MAAM,WAEN9B,EAAA3B,EAAA4B,cAACgD,EAAA5E,EAAD,OAEJ2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,cACHnC,SAAUA,EACVoC,aAAc,CACdC,SAAU,MACVC,WAAY,SAEZC,aAAW,EACXC,gBAAiB,CACjBH,SAAU,MACVC,WAAY,SAEZpC,KAAMA,EACNuC,QA9DM,WAClBxC,EAAY,QA+DAjB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,cAAkBjM,GAAYA,EAASyM,MACvC1D,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAUjB,QA5EX,WACXjK,EAAM2L,aA2EM,gBAiBdnB,GAAS,CACXL,WAAY,CACRyB,MAAO,OAEXf,eAAgB,CACZgB,WAAY,OAEhBpB,YAAa,CACTA,YAAa,mLCpGfqB,GAAY,CACd,CAAEC,UAAW,YAAaC,aAAc,YAAaC,KAAMC,KAAWC,IAAK,kBAC3E,CAAEJ,UAAW,OAAQC,aAAc,UAAWC,KAAMG,KAAMD,IAAK,kBAC/D,CAAEJ,UAAW,QAASC,aAAc,QAASC,KAAMI,KAAYF,IAAK,kBACpE,CAAEJ,UAAW,cAAeC,aAAc,cAAeC,KAAMK,KAAmBH,IAAK,kBACvF,CAAEJ,UAAW,aAAcC,aAAc,aAAcC,KAAMM,KAAWJ,IAAK,kBAC7E,CAAEJ,UAAW,SAAUC,aAAc,SAAUC,KAAMO,KAASL,IAAK,kBACnE,CAAEJ,UAAW,SAAUC,aAAc,SAAUC,KAAMO,KAASL,IAAK,kBACnE,CAAEJ,UAAW,OAAQC,aAAc,gBAAiBC,KAAMQ,KAAMN,IAAK,kBACrE,CAAEJ,UAAW,QAASC,aAAc,QAASC,KAAMS,KAAcP,IAAK,mBAMpEQ,GAAU,SAACC,GAMb,IAAIX,EAAOW,EAASX,KACpB,OACI7D,IAAMH,cAAcgE,IA4DbY,GAxDI,SAAC7M,GAAU,IAAA8M,EAAAC,EAClBxE,EAA8BvI,EAA9BuI,QAASC,EAAqBxI,EAArBwI,UAAWwE,EAAUhN,EAAVgN,MAC5B,OACQhF,EAAA3B,EAAA4B,cAACgF,GAAA5G,EAAD,CACAqE,QAAQ,YACRxC,UAAWoB,IAAWf,EAAQ2E,QAATJ,EAAA,GAAAjG,OAAA2C,EAAA,EAAA3C,CAAAiG,EACpBvE,EAAQ4E,WAAa3E,GADD3B,OAAA2C,EAAA,EAAA3C,CAAAiG,EAEpBvE,EAAQ6E,aAAe5E,GAFHsE,IAIrBvE,QAAS,CACT8E,MAAO/D,KAAUyD,EAAA,GAAAlG,OAAA2C,EAAA,EAAA3C,CAAAkG,EACZxE,EAAQ4E,WAAa3E,GADT3B,OAAA2C,EAAA,EAAA3C,CAAAkG,EAEZxE,EAAQ6E,aAAe5E,GAFXuE,KAKjB7D,KAAMV,GAENR,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ+E,SACxBtF,EAAA3B,EAAA4B,cAAC4B,EAAAxD,EAAD,CAAY4D,QAAS,kBAAMjK,EAAMuN,kBACR,QAApBP,EAAMQ,UAAsBxF,EAAA3B,EAAA4B,cAACwF,GAAApH,EAAD,MAAuB2B,EAAA3B,EAAA4B,cAACyF,GAAArH,EAAD,QAGxD2B,EAAA3B,EAAA4B,cAAC0F,GAAAtH,EAAD,MACA2B,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,KACCyF,GAAU+B,IAAI,SAACjB,EAAUkB,GAAX,OACX9F,EAAA3B,EAAA4B,cAAA,OAAKzF,IAAKsL,GACL1P,EAAWmB,cAAuC,UAAvBqN,EAASb,WACrC/D,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAI,IAAMpB,EAASb,UAAWvJ,IAAKsL,GACrC9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU6H,QAAM,EAAC1L,IAAKoK,EAASZ,cAE3BhE,EAAA3B,EAAA4B,cAACkG,GAAA9H,EAAD,CAAc+H,MAAOxB,EAASZ,cAAeW,GAAQC,IACrD5E,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckE,MAAO,CAAC+D,eAAgB,QAASC,QAAS3B,EAASZ,kBAIvE5N,EAAWmB,cAAuC,UAAvBqN,EAASb,WACtC/D,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAI,IAAMpB,EAASb,UAAWvJ,IAAKsL,GACrC9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU6H,QAAM,EAAC1L,IAAKoK,EAASZ,cAC3BhE,EAAA3B,EAAA4B,cAACkG,GAAA9H,EAAD,CAAc+H,MAAOxB,EAASZ,cAAeW,GAAQC,IACrD5E,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckE,MAAO,CAAC+D,eAAgB,QAASC,QAAS3B,EAASZ,iBAIvD,WAAjBY,EAAST,KACVnE,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAI,IAAMpB,EAASb,UAAWvJ,IAAKsL,GACrC9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU6H,QAAM,EAAC1L,IAAKoK,EAASZ,cAC3BhE,EAAA3B,EAAA4B,cAACkG,GAAA9H,EAAD,CAAc+H,MAAOxB,EAASZ,cAAeW,GAAQC,IACrD5E,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckE,MAAO,CAAC+D,eAAgB,QAASC,QAAS3B,EAASZ,gEC9D9EwC,GAzBH,SAACxO,GAUT,OACIgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KAVe,CACf,0CACA,gDACA,0EACA,gDACA,kFACA,iFACA,yIAIkB2C,IAAI,SAACY,EAAaX,GAC5B,OACA9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,GACX9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACyG,GAAArI,EAAD,OAEJ2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAcqD,QAASE,wCCdrCE,sBAIF,SAAAA,EAAY3O,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4H,IACfvN,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8H,GAAAzH,KAAAH,KAAM/G,KAJVmH,gBAAkB,EAGC/F,EAFnBgG,gBAAkB,EAEChG,EAWnBiG,kBAAoB,WAChBjG,EAAKwN,iBAAiB,IAAMxN,EAAKpB,MAAM6O,YACvCvH,YAAY,kBAAMlG,EAAKwN,iBAAiB,IAAMxN,EAAKpB,MAAM6O,aAAa,MAbvDzN,EAiBnB0N,4BAA8B,SAACC,GAC3BpI,WAAW,kBAAMvF,EAAK4N,eAAe5N,EAAKpB,MAAM6O,aAAaE,IAlB9C3N,EAqBnB0G,qBAAuB,aArBJ1G,EAwBnBwN,iBAAmB,SAACK,EAAYJ,GACxBK,UAAUC,aAIdD,UAAUC,aAAaC,aAAa,CAChCC,OAAO,EACPC,OAAO,IAEN9N,KAAK,SAAA+N,GACF3Q,QAAQC,IAAI,qBACZuC,EAAKpB,MAAMwP,gBAAgB,WAC3B,IACIC,EAAW,IAAIC,cAAcH,EADnB,CAAEI,SAAU,2BAEtBlR,EAAO,GAEXgR,EAASG,gBAAkB,SAAA9E,GAAK,OAAIrM,EAAK4B,KAAKyK,EAAMrM,OACpDgR,EAASI,QACTjR,QAAQC,IAAI4Q,EAASjP,MAAQ,QAAWyO,EAAa,IAAQ,eAE7D,IAAIa,EAAU,IAAI/O,QAAQ,SAACC,EAASC,GAChCwO,EAASM,OAAS/O,EAClByO,EAASO,QAAU,SAAAlF,GAAK,OAAI7J,EAAO6J,EAAMzL,SAGzC4Q,EAAWxJ,GAAKwI,GAAYzN,KAC5B,iBAAwB,aAAlBiO,EAASjP,OAAwBiP,EAASS,SAGpD,OAAOnP,QAAQoP,IAAI,CACfL,EACAG,IAECzO,KAAK,kBAAM/C,MAGnBgD,MAAM,SAAC2O,GACJxR,QAAQC,IAAI,oCAAqCuR,GACjDhP,EAAKpB,MAAMwP,gBAAgB,YAE9BhO,KAnCL,eAAA6O,EAAAxJ,OAAAyJ,GAAA,EAAAzJ,CAAA0J,GAAAlK,EAAAmK,KAmCU,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAJ,GAAAlK,EAAAuK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACF,GAAIL,GAAkBA,EAAeM,OAAQ,CACrCL,EAAe,IAAIM,KAAKP,EAAgB,CAAEpM,KAAM,eAMpD1F,QAAQC,IAAI,yBAA2B8R,EAAaO,KAAO,aACvDP,EAAarM,MAEK,CAClB9F,QAAS,CACL2S,eAAgB,yBAIxB,IACI/P,EAAKgQ,aAAaT,EAAcvP,EAAKpB,MAAM6O,YAgB3CjQ,QAAQC,IAAR,4BACF,MAAO6C,GACL9C,QAAQC,IAAI6C,SAIhB2P,MAAM,+EAxCR,wBAAAR,EAAAX,SAAAO,MAnCV,gBAAAa,GAAA,OAAAjB,EAAAkB,MAAAxK,KAAAyK,YAAA,IAHI5S,QAAQC,IAAI,mBA1BDuC,EA6GnBqQ,OAAS,SAAClC,GAENtP,OAAOC,SAASC,UA/GDiB,EAmHnB4N,eAnHmBnI,OAAAyJ,GAAA,EAAAzJ,CAAA0J,GAAAlK,EAAAmK,KAmHF,SAAAkB,IAAA,IAAAnC,EAAAoC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzT,EAAA0T,EAAAC,EAAA,OAAA1B,GAAAlK,EAAAuK,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAIPxB,EAASL,UAAUC,aAAagD,gBAAgB,CAClD9C,MAAO,CAAE+C,YAAa,YAGpBT,EAAQpC,EAAO8C,iBAAiB,GAEhCT,EAAe,IAAIU,aAAaX,GAVzBO,EAAAnB,KAAA,EAYQa,EAAaW,YAZrB,cAYPV,EAZOK,EAAAM,KAcbb,EAAMzB,QAEA4B,EAASW,SAASC,eAAe,SAGhCC,MAAQd,EAAOc,MACtBb,EAAOc,OAASf,EAAOe,OACPd,EAAOe,WAAW,MAC1BC,UAAUjB,EAAQ,EAAG,EAAGA,EAAOc,MAAOd,EAAOe,QAC/Cb,EAAQD,EAAOiB,YAvBRb,EAAAnB,KAAA,GA0BKiC,MAAMjB,GA1BX,eA0BPzT,EA1BO4T,EAAAM,KAAAN,EAAAnB,KAAA,GA2BMzS,EAAI2U,cA3BV,QA2BPjB,EA3BOE,EAAAM,KA6BPP,EAAO,CACT,IAAIiB,KAAK,CAAClB,GAAV,SAAAzR,OAA0B,IAAI0E,KAA9B,QAA4C,CACxCX,KAAM,gBAKdlD,EAAKgQ,aAAaa,EAAM7Q,EAAKpB,MAAM6O,YApCtB,yBAAAqD,EAAAhC,SAAAwB,MAnHEtQ,EA4JnBgQ,aA5JmB,eAAA+B,EAAAtM,OAAAyJ,GAAA,EAAAzJ,CAAA0J,GAAAlK,EAAAmK,KA4JJ,SAAA4C,EAAOC,EAAMxE,GAAb,IAAAyE,EAAAC,EAAApS,EAAAqS,EAAAC,EAAAnV,EAAA,OAAAiS,GAAAlK,EAAAuK,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA5C,KAAA,EAGDwC,EAAgB,CAClB9U,QAAS,CACL2S,eAAgB,yBAGpBoC,EAAW,IAAII,SACfxS,EAAMN,EAAOqC,SAASb,qBAAuB,kBAE7CmR,EAAM,IAAIvO,KAEVwO,EAbG,GAAAlT,OAaWsO,EAbX,KAAAtO,OAayBiT,EAAIlO,UAb7B,KAAA/E,OAa0CiT,EAAI/N,WAb9C,KAAAlF,OAa4DiT,EAAI7N,aAbhE,KAAApF,OAagFiT,EAAII,cAC3FhV,QAAQC,IAAI,WAAY4U,GACxBF,EAASM,OAAOhF,EAAYwE,EAAMI,GAElCF,EAASM,OAAO,aAAchF,GAjBvB6E,EAAA3C,KAAA,GAoBWzP,IAAMyC,KAAK5C,EAAKoS,EAAUD,GApBrC,QAoBDhV,EApBCoV,EAAAlB,KAsBP5T,QAAQC,IAAR,6BAAA0B,OAAyCjC,IAtBlCoV,EAAA3C,KAAA,iBAAA2C,EAAA5C,KAAA,GAAA4C,EAAAI,GAAAJ,EAAA,SAwBP9U,QAAQC,IAAR6U,EAAAI,IAxBO,yBAAAJ,EAAAxD,SAAAkD,EAAA,kBA5JI,gBAAAW,EAAAC,GAAA,OAAAb,EAAA5B,MAAAxK,KAAAyK,YAAA,GAAApQ,EAwLnB2G,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACAjM,EAAA3B,EAAA4B,cAAA,UAAQkD,GAAG,UACN,IA1LT/J,EAAKZ,MAAQ,GAFEY,6BAJUgH,IAAMC,YCQxB6L,GAVU,SAAClU,GACpB,OACEgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAAC5J,MAAOC,GAAO2J,WAC1BnM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,KAAK0J,cAAc,EACnCC,MAAM,SAAYvK,MAAM,WAD5B,8BAEI9B,EAAA3B,EAAA4B,cAAC0F,GAAAtH,EAAD,QAMVmE,GAAS,CACX2J,UAAW,CACPG,WAAY,OAEhBC,WAAY,CACRC,SAAU,OACV/J,YAAa,QCSfgK,8MAEFC,aAAe,SAACC,GACZ,IAAIxT,EAAMN,EAAOqC,SAASb,qBAAuB,aAC7C5D,EAAO,CACPkW,aAAcA,GAElBrT,IAAMyC,KAAK5C,EAAK1C,GAAM+C,KAAK,SAAClD,GACVA,EAAIE,QAAQ,gBAEtB4C,EAAKpB,MAAM0E,YAAYpG,GAClBkD,KAAK,SAACoT,GACHxT,EAAKpB,MAAM7B,QAAQkC,KAAK,cAAgBsU,KAGhDvT,EAAKoG,SAAS,CACVqN,aAAc,uHAGvBpT,MAAM,SAACC,GACFN,EAAKpB,MAAM7B,SACXiD,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,wBAM1ByH,OAAS,WAAM,IACL+M,EAAa1T,EAAKpB,MAAM+U,MAAMC,OAA9BF,SAEN,OAAIA,EAEI9M,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAACqN,GAAD,OAEJtN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAACsN,GAAD,MACAvN,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQ/B,KAAK,SAASoG,QAAQ,YAC1BZ,MAAM,UAAUoH,KAAK,QAAQjH,QAAS,kBAAM7I,EAAKsT,aAAaI,KADlE,iBASZ9M,EAAA3B,EAAA4B,cAAA,8HAjDaI,aAgEdoN,eANS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,OAErCwW,CAA6ChB,ICvFtDkB,eACF,SAAAA,EAAY3V,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4O,IACfvU,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8O,GAAAzO,KAAAH,KAAM/G,KASVqH,kBAAoB,WAChBxG,EAAOqC,SAASpC,cAXDM,EAcnBsT,aAAe,SAAC5J,GACZA,EAAM8K,iBAEN,IAAIzU,EAAMN,EAAOqC,SAASf,iBAAmB,aAEzC1D,EAAO,CACPoX,QAASzU,EAAKZ,MAAMqV,QACpBC,SAAU1U,EAAKZ,MAAMsV,UAEzB1U,EAAKoG,SAAS,CACVuO,gBAAiB,eAErBzU,IAAMyC,KAAK5C,EAAK1C,GAAM+C,KAAK,SAAClD,GACVA,EAAIE,QAAQ,gBAEtB4C,EAAKpB,MAAM0E,YAAYpG,GAAKkD,KAAK,SAAClD,GAC9B8C,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,iBAIlBc,EAAKoG,SAAS,CACNqN,aAAc,uCACdkB,gBAAiB,aAG9BtU,MAAM,SAACC,GACNN,EAAKoG,SAAS,CACVqN,aAAc,8EACdkB,gBAAiB,cA3CV3U,EAgDnB4U,gBAAkB,SAACC,GACf7U,EAAKoG,SAAS,CACVqO,QAASI,KAlDE7U,EAsDnB8U,iBAAmB,SAACD,GAChB7U,EAAKoG,SAAS,CACVsO,SAAUG,KAxDC7U,EA4DnB2G,OAAS,WACL,IAAI9I,EAAWb,EAAWY,cADfmX,EAE6B/U,EAAKZ,MAAvCqU,EAFKsB,EAELtB,aAAckB,EAFTI,EAESJ,gBAEpB,OADAnX,QAAQC,IAAI,oBAAqBI,GAE7B+I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uDACG,OAAbjJ,GACG+I,EAAA3B,EAAA4B,cAAA,QAAMmO,YAAU,EAACC,aAAa,MAAMC,SAAU,SAACC,GAAD,OAAOnV,EAAKsT,aAAa6B,KACpEvO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACClD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,yBAAd,UAEAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNP,MAAO7U,EAAKZ,MAAMqV,QAClBY,SAAU,SAACF,GAAD,OAAOnV,EAAK4U,gBAAgBO,EAAEG,OAAOT,QAC/CU,OAAO,SACPjM,QAAQ,WACRxC,UAAU,cAItBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNlS,KAAK,WACL2R,MAAO7U,EAAKZ,MAAMsV,SAClBW,SAAU,SAACF,GAAD,OAAOnV,EAAK8U,iBAAiBK,EAAEG,OAAOT,QAChDU,OAAO,SACPjM,QAAQ,eAGpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,4BAA4B5D,KAAK,UACtCyR,OAOjC/N,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,qCAAqC2M,KAvG1DzT,EAAKZ,MAAQ,CACTqV,QAAS,GACTC,SAAU,GACVjB,aAAc,GACdkB,gBAAiB,UANN3U,6BADWiH,aAsHnBoN,eANS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,OAErCwW,CAA6CE,yBCrHtDnL,GAAS,CACXoM,OAAQ,CACJvN,SAAU,QACVwN,IAAK,MACLC,KAAM,MACNC,UAAW,0BAGJC,GAfU,SAAChX,GACtB,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,GAAGqC,MAAOC,GAAOoM,QAC5B5O,EAAA3B,EAAA4B,cAACgP,GAAA5Q,EAAD,CAAkByD,MAAM,iLCoErBoN,GA5Dc,SAAClX,GAAU,IAC9B8D,EAAU9D,EAAV8D,MACFqT,EAAWnX,GAASA,EAAMoX,SAAY,QAAU,OACpD,OACIpP,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,QACrBxT,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,SACpCxX,EAAMoX,UAAYpP,EAAA3B,EAAA4B,cAACyP,GAAArR,EAAD,MACnBrG,EAAMoX,UAAYpP,EAAA3B,EAAA4B,cAAC0P,GAAAtR,EAAD,OAGvBuR,OACI5P,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQkE,MAAO,CAAC4M,QAASA,GAAUlN,QAAS,kBAAMjK,EAAM6X,UAAxD,WAEJzJ,MAAOpO,EAAMoX,SACL,gBACA,iBAGZpP,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,QACNP,MAAOnS,EAAMoU,cAAgBpU,EAAMoU,cAAc9J,MAAQ,GACzDqI,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,QACpE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,cACN4B,WAAS,EACTC,KAAK,IACLpC,MAAOnS,EAAMoU,cAAgBpU,EAAMoU,cAAcI,YAAc,GAC/D7B,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,cAAejW,EAAM8D,QAC1E6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,YAEJD,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,CAAakE,MAAOC,GAAOgO,cACvBxQ,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACnCG,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SAC5C9D,EAAMoX,SAAW,SAAW,cAQ/C5M,GAAO,CACTwN,YAAa,CACTrF,MAAO,OAEX6F,aAAc,CACV3M,WAAY,OAEhB2L,OAAQ,CACJiB,gBAAiB,6KCvEnBC,GAAQ,CACV,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAEhDC,GAAS,CACX,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAGrBC,eAMF,SAAAA,EAAY5Y,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA6R,IACjBxX,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+R,GAAA1R,KAAAH,KAAM/G,KAQN6Y,aAAe,SAAAxZ,GAAI,OAAI,SAAAyL,GACrB,OAAOzL,GAEL,IAAK,QAEH+B,EAAKoG,SAAS,CACZkR,MAAO5N,EAAM4L,OAAOT,QAEtB,MAEF,IAAK,SAEH7U,EAAKoG,SAAS,CACZmR,OAAQ7N,EAAM4L,OAAOT,WAtBZ7U,EA8BnB0X,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KA/BP9H,EAkCnB2X,YAAc,WACV3X,EAAKoG,SAAS,CAAE0B,MAAM,KAnCP9H,EAsCnB4X,aAAe,WACb5X,EAAK2X,cACL3X,EAAKpB,MAAMiZ,mBAAmB7X,EAAKZ,MAAMkY,MAAOtX,EAAKZ,MAAMmY,SAxC1CvX,EA2CnB2G,OAAS,WAAM,IACPmR,EAAgB9X,EAAKpB,MAArBkZ,YACR,OACIlR,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,WAAWT,QAAS7I,EAAK0X,iBAAzC,eAAuE1X,EAAKZ,MAAMkY,MAAlF,MAA4FtX,EAAKZ,MAAMmY,QACvG3Q,EAAA3B,EAAA4B,cAACkR,GAAA9S,EAAD,CACE+S,sBAAoB,EACpBC,sBAAoB,EACpBnQ,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACqR,GAAAjT,EAAD,gCACA2B,EAAA3B,EAAA4B,cAACsR,GAAAlT,EAAD,KACE2B,EAAA3B,EAAA4B,cAAA,YACID,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,WACFD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAakE,MAAOC,GAAOwN,YAAatN,QAAQ,YAC9C1C,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CAAYoT,QAAQ,gBAApB,SACAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACE4P,MAAO7U,EAAKZ,MAAMkY,MAClBjC,SAAUrV,EAAKyX,aAAa,SAC5Bc,MAAO3R,EAAA3B,EAAA4B,cAAC2R,GAAAvT,EAAD,CAAO8E,GAAG,kBAElBuN,GAAM7K,IAAI,SAACqH,EAAMpH,GAChB,OAAO9F,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,GAAOA,QAI7CgE,GAAelR,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAakE,MAAOC,GAAOwN,YAAatN,QAAQ,YAC/D1C,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CAAYoT,QAAQ,iBAApB,UACAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACE4P,MAAO7U,EAAKZ,MAAMmY,OAClBlC,SAAUrV,EAAKyX,aAAa,UAC5Bc,MAAO3R,EAAA3B,EAAA4B,cAAC2R,GAAAvT,EAAD,CAAO8E,GAAG,mBAElBwN,GAAO9K,IAAI,SAACqH,EAAMpH,GACjB,OAAO9F,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,GAAOA,SAMnDlN,EAAA3B,EAAA4B,cAAC6R,GAAAzT,EAAD,KACE2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQ4D,QAAS7I,EAAK2X,YAAajP,MAAM,WAAzC,UAGA9B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQ4D,QAAS7I,EAAK4X,aAAclP,MAAM,WAA1C,UAvFN1I,EAAKZ,MAAQ,CACX0I,MAAM,EACNwP,MAAO,EACPC,OAAQ,GALOvX,6BANiBiH,aAwGlCmC,GAAS,CAETwN,YAAa,CACXrF,MAAM,MACN9G,WAAW,OAIJ+M,MC9CTpO,GAAS,SAAAwC,GAAK,MAAK,CACrBgL,YAAa,CACTrF,MAAO,OAEX6E,OAAQ,CACJiB,gBAAiB,UAGVsB,GAjFM,SAAC/Z,GAAU,IAClB8D,EAAU9D,EAAV8D,MAON,OACIkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,MACEvC,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYsM,OACRxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,UAAnB,KAIJoE,MAAM,kBAENpG,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACA2B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAO,CAACoI,MAAM,QAC1C3K,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,YACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMmW,SACbxD,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAYjW,EAAM8D,QACvE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAO,CAACoI,MAAM,QAC1C3K,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,iBACHqL,MAAM,QACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMoW,MACbzD,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,QACpE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAO,CAACoI,MAAM,QAC1C3K,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,qBACHqL,MAAM,iBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMqW,UACb1D,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,YAAajW,EAAM8D,QACxE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAO,CAACoI,MAAM,QAC1C3K,EAAA3B,EAAA4B,cAACmS,GAAD,CAA2BnB,mBAAqB,SAACP,EAAOC,GAAR,OAvDrC,SAACD,EAAOC,GAC/B3Y,EAAMmY,cAAcO,EAAO,kBAAmB1Y,EAAM8D,OACpD9D,EAAMmY,cAAcQ,EAAQ,mBAAoB3Y,EAAM8D,OAqDyBmV,CAAmBP,EAAOC,OAEjG3Q,EAAA3B,EAAA4B,cAAA,YAEAD,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,KACA2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC/BG,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SADrD,cChCPuW,GAAkB,SAACxL,GAAD,OAAgB,SAAAxK,GAC3C,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASb,qBAAuB,kBAEjDmB,EAAWK,SAAS1C,EAAK,CAAE0N,WAAYA,IAC1BrN,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAtCM,qBAuCNC,QAASjG,EAAIG,SAElBgD,MAAM,SAACC,GACN2C,EAAS,CACLC,KA1CK,oBA2CLC,QAAS7C,UAOxB4Y,GAAa,SAACxW,GAAD,OAAW,SAAAO,GACjC,IAAIlD,EAAMN,EAAOqC,SAASb,qBAAuB,aAsBjD,OAAO,IAAItB,QAAQ,SAACC,EAASC,GACzBuC,EAAWK,SAAS1C,EAAK2C,GACxBtC,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAjFwB,2BAkFxBC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAvFqB,0BAyFzBrD,EAAOS,SCgDN6Y,GAAiB,SAACC,GAAD,OAAmB,SAAAnW,GAC7CA,EAAS,CACLC,KA1I6B,0BA4IjC,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,WAC7CqB,EAAWQ,WAAW7C,EAAKqZ,GACtBhZ,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA/IuB,8BAkJ9B7C,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAnJoB,uBAoJpBC,QAAS7C,QAKZ+Y,GAAkB,kBAAM,SAAApW,GACjCA,EAAS,CACLC,KAvJ8B,2BAyJlC,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,mBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA5JwB,2BA6JxBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjKqB,wBAkKrBC,QAAS7C,QCzJZgZ,GAAyB,SAACC,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAGzD,OAFAzF,QAAQC,IAAI,sBAAwB+b,GACpChc,QAAQC,IAAI8b,GACLC,GAEH,IAAK,WAED9W,EAAM+W,UAAUC,SAAWH,EAC3BtW,EAAS,CACLC,KAtByB,4BAuBzBC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAM+W,UAAUE,MAAQJ,EACxBtW,EAAS,CACLC,KA/ByB,4BAgCzBC,QAAST,IAEb,MAEJ,IAAK,WAEDA,EAAM+W,UAAUG,SAAWL,EAC3BtW,EAAS,CACLC,KAxCyB,4BAyCzBC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAM+W,UAAUI,MAAQN,EACxBtW,EAAS,CACLC,KAjDyB,4BAkDzBC,QAAST,IAEb,MAEJ,IAAK,UAEDA,EAAM+W,UAAUK,QAAUP,EAC1BtW,EAAS,CACLC,KA1DyB,4BA2DzBC,QAAST,IAQrBO,EAAS,CACLC,KAnEqC,oCAuEhC6W,GAAU,SAACC,EAAWhE,GAAZ,OAAyB,SAAA/S,GAC5C,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzBoD,EAAS,CACLC,KApFkB,mBAsFtB,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,OAE7CqB,EAAWK,SAAS1C,EAAKia,GACpB5Z,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA1FY,mBA2FZC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAlGS,gBAmGTC,QAAS7C,IAEbT,EAAOS,SCvGV2Z,GAAmB,kBAAM,SAAAhX,GAClC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,sBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KDUmB,sBCTnBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KDCY,mBCAZC,QAAS7C,EAAI+C,iBAMpB6W,GAAkB,SAACxX,GAAD,OAAW,SAAAO,GACtC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzB,IAAIE,EAAMN,EAAOqC,SAASb,qBAAuB,kBACjDmB,EAAWK,SAAS1C,EAAK2C,GACpBtC,KAAK,SAAClD,GACH0C,MAEHS,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KDpBQ,mBCqBRC,QAAS7C,EAAI+C,aAGrBxD,EAAOS,sHCsEjB6Z,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CAEF3R,MAAOkD,EAAM0O,QAAQC,OAAOC,MAC5BpH,SAAU,IAEdqH,KAAM,CACFrH,SAAU,MAPMgH,CASpBM,MACWC,GAhGI,SAAC/b,GAAU,IACpBgc,EAAgBhc,EAAhBgc,YAEN,OACIhU,EAAA3B,EAAA4B,cAAA,YACM+T,GAAehU,EAAA3B,EAAA4B,cAACsP,GAAD,MAChByE,GAAsC,IAAvBA,EAAYhL,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,yBAC3CsR,GAAeA,EAAYhL,OAAS,GACjChJ,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACsT,GAAD,aACAvT,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAvB,kBACArM,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAvB,UACArM,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAvB,cACArM,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAvB,gBACArM,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAvB,aAIRrM,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACK2V,EAAYnO,IAAI,SAACwO,EAAYvO,GAE1B,OADAlP,QAAQC,IAAI,wBAAyBwd,EAAWxN,YAEhD7G,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,CAAU7D,IAAKsL,GACX9F,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBe,UAAU,KAAKC,MAAM,OAClCvU,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAI,CAAE1N,SAAU,eAAgBE,MAAO,CAAEgc,OAAQH,EAAWG,UAC7DH,EAAWvB,WAQpB9S,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAQgI,EAAWI,eAC1CzU,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAQgI,EAAWK,kBAC1C1U,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAQzP,EAAYyX,EAAWM,WAAW,IACjE3U,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAAQzP,EAAYyX,EAAWO,aAAa,IACnE5U,EAAA3B,EAAA4B,cAACsT,GAAD,CAAiBlH,MAAM,QAEfgI,EAAWzH,SACVyH,EAAWzH,OAAO/S,QAAQ,WAAa,GACxCwa,EAAWzH,OAAO/S,QAAQ,YAAc,IACxCmG,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAC1N,SAAU,oBAAqBE,MAAO,CAAEqO,WAAYwN,EAAWxN,WACvEgO,YAAaR,EAAWQ,YAAaC,SAAU,iBADnD,gBAgBAT,EAAWK,kBACXL,EAAWK,iBAAiB7a,QAAQ,SAAW,GAC/CmG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,mBAGCmR,EAAWzH,QACXyH,EAAWK,kBACRL,EAAWK,iBAAiB7a,QAAQ,cAAgB,GAExDmG,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQyD,MAAM,UAAUoH,KAAK,QAAQxG,QAAQ,YACzCT,QAAS,kBAAMjK,EAAM+c,gBAAgBV,EAAWxN,cADpD,wCCnG3BmO,GACF,UADEA,GAEH,UAFGA,GAGH,UAEGzO,GACF,UADEA,GAEH,UAFGA,GAGH,UAEG0O,GACF,UADEA,GAEH,UAFGA,GAGH,UAEGC,GACF,UADEA,GAEH,UAFGA,GAGH,UAOGC,GACF,UADEA,GAEH,UAFGA,GAGH,UClBGC,GAA8B5B,qBAAW,SAACxO,GAAD,MAAY,CAC9DqQ,KAAM,CACJzK,OAAQ,GACR0K,aAAc,GAGhBC,aAAc,GAGdC,IAAK,CACHF,aAAc,EACd7E,gBAAiBlK,MAXoBiN,CAarCiC,MAEOC,GAA8BlC,qBAAW,SAACxO,GAAD,MAAY,CAC9DqQ,KAAM,CACJzK,OAAQ,GACR0K,aAAc,GAGhBC,aAAc,GAGdC,IAAK,CACHF,aAAc,EACd7E,gBAAiByE,MAXoB1B,CAarCiC,MAiBOE,IAfgCnC,qBAAW,SAACxO,GAAD,MAAY,CAChEqQ,KAAM,CACJzK,OAAQ,GACR0K,aAAc,GAGhBC,aAAc,GAGdC,IAAK,CACHF,aAAc,EACd7E,gBAAiBwE,MAXsBzB,CAavCiC,MAEkCjC,qBAAW,SAACxO,GAAD,MAAY,CAC3DqQ,KAAM,CACJzK,OAAQ,GACR0K,aAAc,GAGhBC,aAAc,GAGdC,IAAK,CACHF,aAAc,EACd7E,gBAAiB0E,MAXiB3B,CAalCiC,OAESG,GAA8BpC,qBAAW,SAACxO,GAAD,MAAY,CAChEqQ,KAAM,CACJzK,OAAQ,GACR0K,aAAc,GAGhBC,aAAc,GAGdC,IAAK,CACHF,aAAc,EACd7E,gBAAiBuE,MAXsBxB,CAavCiC,MCjFOI,GAEE,YAGTC,GAAkB,CAAC,QAAS,YACrBC,GAAgB,SAACC,GAC1B,IAAItS,EAAOuS,KACX,OAAsC,IAAnCH,GAAgBjc,QAAQ6J,KAGpBsS,GAAcA,EAAWE,gBAAkBL,KAEzCI,GAAqB,WAC9B,IAAI9e,EAAOf,EAAWY,cACtB,OAAGG,EACQA,EAAKuM,KAET,MASEyS,GAA0B,SAACC,GACpC,OAAIA,EACGA,EAAcC,QAAQ,mBAAoB,KADvBD,GCtBxBE,8MAEFjX,kBAAoB,WAChBjJ,EAAWuB,WAAWyB,EAAKpB,MAAM7B,SACjCiD,EAAKpB,MAAMue,iBACXnd,EAAKpB,MAAMwe,gBACXpd,EAAKpB,MAAMye,uBACXrd,EAAKpB,MAAM0e,0BAGf3W,OAAS,WAAM,IAAA4W,EAEavd,EAAKpB,MAAzB4e,GAFOD,EACLpW,QADKoW,EACIE,UADJF,EACeG,SADfH,EACyBI,gBADzBJ,EAEPC,iBAEAhgB,QAAQC,IAAI,WAAYuC,EAAKpB,OAE7B,IAAIgf,EAAiB,GACjBC,EAAe,GAsBvB,OArBOL,GAAmBA,EAAgB5N,SAClC4N,EAAgBM,QAAQ,SAAC7C,EAAYvO,GACE,cAAhCuO,EAAWK,iBACVuC,EAAa5e,KAAKgc,GAGlB2C,EAAe3e,KAAKgc,KAIzB2C,IACuBA,EAAehO,OAGrCgO,GADAA,EAAiB9Y,GAAe8Y,EAAgB,gBAChBG,MAAM,EAAG,IAE1CF,IAECA,GADAA,EAAe/Y,GAAe+Y,EAAc,cAChB7Y,OAAO+Y,MAAM,EAAG,KAIpDnX,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACPF,EAAA3B,EAAA4B,cAACmX,GAAoBhe,EAAKpB,QAElCgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,WAAWqC,MAAOC,GAAO6U,gBACpCrX,EAAA3B,EAAA4B,cAACqX,GAAoBle,EAAKpB,QAE9BgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,WAAWqC,MAAOC,GAAO6U,gBACpCrX,EAAA3B,EAAA4B,cAACsX,GAAuBne,EAAKpB,yCAlDtBqI,aA2DzBmX,GAAkB,SAACxf,GACrB,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,YACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM6e,cAIzE7W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,iBACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM8e,aAIzE9W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,aACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM+e,oBAIzE/W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,eACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM0f,0BAQ/EC,GAAkB,SAAC3f,GACrB,OACIgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,6BAEJD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACTlI,EAAMgf,gBAAkBhX,EAAA3B,EAAA4B,cAACsP,GAAD,MACzBvX,EAAM4e,iBAAoD,IAAjC5e,EAAM4e,gBAAgB5N,QAAgBhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,gCAC/DlI,EAAMgf,gBAAkBhf,EAAMgf,eAAehO,OAAS,GACnDhR,EAAMgf,eAAenR,IAAI,SAACwO,EAAYvO,GAClC,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVmU,EAAWI,cADhB,0BAEIzU,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,eAAetD,EAAYyX,EAAWO,aAAa,KAEvE5U,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAc7F,UAAU,aAAakG,MAAM,WAEvCJ,GAAK,CAAC1N,SAAU,oBAAqBE,MAAO,CAAEqO,WAAYwN,EAAWxN,WACjEgO,YAAaR,EAAWQ,YAAaC,SAAU,iBAEnD9U,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAS/U,QAAQ,SAASZ,MAAM,qBActE8V,GAAqB,SAAC5f,GACxB,OACAgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,8BAEJD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACTlI,EAAMif,cAAgBjX,EAAA3B,EAAA4B,cAACsP,GAAD,MACvBvX,EAAMif,cAA8C,IAA9Bjf,EAAMif,aAAajO,QAAgBhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,gCACzDlI,EAAMif,cAAgBjf,EAAMif,aAAajO,OAAS,GAC/ChR,EAAMif,aAAapR,IAAI,SAACwO,EAAYvO,GAChC,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVmU,EAAWI,cADhB,eAC0CzU,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,eAAetD,EAAYyX,EAAWM,WAAW,WAYjInS,GAAS,CACX6U,eAAgB,CACZQ,UAAW,UAIJvB,MClITwB,GAAY,SAAC9f,GACf,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACHF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVlI,EAAM+f,OAAS/f,EAAM+f,MAAMlS,IAAI,SAACmS,GAE7B,OADAphB,QAAQC,IAAI,aAAcmhB,GAEtBhY,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,0BACXF,EAAA3B,EAAA4B,cAAA,UAAK+X,EAASnF,UAAUC,WAE5B9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUI,QAElDjT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,WACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUK,UAElDlT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,aACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUoF,aAAajP,SAE/DhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUG,SAA9C,aAEJhT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,cACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASE,UAAU7gB,OAElD2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACViY,GAAmBH,EAAUhgB,EAAMogB,gBAAiBpgB,EAAMqgB,4BAU7FF,GAAqB,SAACH,EAAUM,EAAwBC,GAC1D,GAAIP,EAASQ,oBAAsD,eAAhCR,EAASQ,mBAAqC,CAC7E,IAAIC,EAAK,IAAIxb,KAAJ,GAAA1E,OAAYyf,EAASU,iBAC9B,OACI1Y,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,+BAAA1H,OACsBkgB,EAAGnb,UADzB,KAAA/E,OACsCkgB,EAAGrb,WAAa,EADtD,KAAA7E,OAC2DkgB,EAAGlb,cAD9D,KAAAhF,OAC+EkgB,EAAGhb,WADlF,QAGAuC,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,kBACd+B,QAAS,kBACLsW,EAAiBP,EAASW,kBAFlC,WAUhB,GAAIX,EAASQ,oBAAsD,cAAhCR,EAASQ,mBAAoC,CAC5E,IAAIC,EAAK,IAAIxb,KAAK+a,EAASY,YAC3B,OACI5Y,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,gCACuBwY,EAAGlb,cAD1B,MAC4Ckb,EAAGrb,WAAa,EAD5D,MACkEqb,EAAGnb,YAKjF,OACI0C,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACAjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,yBACfF,EAAA3B,EAAA4B,cAAA,iFACC4Y,KAAiBhT,IAAI,SAACiT,GACnB,IAAIhd,EAAQ,CAAE0Y,OAAQwD,EAAS7U,GAAIuV,eAAgBI,GACnD,OACQ9Y,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,8BACd+B,QAAS,kBACLqW,EAAuBxc,KAE1Bgd,SAUvBD,GAAiB,WACnB,OtBrHqC,WACrC,IAAIE,EAAiB,CAAE,EAAG,GAAI,IAC1BC,EAAwB,GACxBxN,EAAM,IAAIvO,KACVgc,EAAK,GAAA1gB,OAAMiT,EAAIjO,cAAV,KAAAhF,OAA2BiT,EAAIpO,WAAW,EAA1C,KAAA7E,OAA+CiT,EAAIlO,WACxD4b,EAAO,GAAA3gB,OAAMiT,EAAIjO,cAAV,KAAAhF,OAA2BiT,EAAIpO,WAAW,EAA1C,KAAA7E,OAA+CiT,EAAIlO,UAAU,GACpE6b,EAAc3N,EAAI/N,WACtB,OAAG0b,EAAcJ,EAAe,IAC5BC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACOC,GAERG,EAAcJ,EAAe,IAC5BC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACOC,GAERG,EAAcJ,EAAe,IAC5BC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B2gB,EAA9B,KAAA3gB,OAAyCwgB,EAAe,GAAxD,QACOC,GAERG,EAAcJ,EAAe,IAC5BC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACAC,EAAsB3gB,KAAtB,GAAAE,OAA8B0gB,EAA9B,KAAA1gB,OAAuCwgB,EAAe,GAAtD,QACOC,QAJX,EsB4FOI,IASIC,GA5IU,SAACrhB,GACtB,GAAIA,EAAMshB,cAAe,CACrB,IAAIA,EAAgBthB,EAAMshB,cAC1B,OAA4B,IAAzBA,EAActQ,OAEThJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACfF,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,uBAOJrM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACXF,EAAA3B,EAAA4B,cAACsZ,GAAD,CACEnT,MAAM,iBACN2R,MAAOuB,EACPlB,gBAAiBpgB,EAAMogB,oBAazC,OACIpY,EAAA3B,EAAA4B,cAACsP,GAAD,OClCFiK,8MAEFna,kBAAoB,WAChBjJ,EAAWuB,WAAWyB,EAAKpB,MAAM7B,SACjCiD,EAAKpB,MAAMue,iBACXnd,EAAKpB,MAAMwe,gBACXpd,EAAKpB,MAAMye,uBACXrd,EAAKpB,MAAM0e,0BAGf3W,OAAS,WAAM,IAAA4W,EAEavd,EAAKpB,MAAzB4e,GAFOD,EACLpW,QADKoW,EACIE,UADJF,EACeG,SADfH,EACyBI,gBADzBJ,EAEPC,iBAEAhgB,QAAQC,IAAI,WAAYuC,EAAKpB,OAE7B,IAAIgf,EAAiB,GACjBC,EAAe,GAsBnB,OArBGL,GAAmBA,EAAgB5N,SAClC4N,EAAgBM,QAAQ,SAAC7C,EAAYvO,GACE,cAAhCuO,EAAWK,iBACVuC,EAAa5e,KAAKgc,GAGlB2C,EAAe3e,KAAKgc,KAIzB2C,IACuBA,EAAehO,OAGrCgO,GADAA,EAAiB9Y,GAAe8Y,EAAgB,gBAChBG,MAAM,EAAG,IAE1CF,IAECA,GADAA,EAAe/Y,GAAe+Y,EAAc,cAChB7Y,OAAO+Y,MAAM,EAAG,KAIxDnX,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACXF,EAAA3B,EAAA4B,cAACwZ,GAAoBrgB,EAAKpB,QAE9BgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,WAAWqC,MAAOC,GAAO6U,gBACpCrX,EAAA3B,EAAA4B,cAACyZ,GAAoBtgB,EAAKpB,QAE9BgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,WAAWqC,MAAOC,GAAO6U,gBACpCrX,EAAA3B,EAAA4B,cAAC0Z,GAAuBvgB,EAAKpB,0CAnDzBqI,aA8D1BmX,GAAkB,SAACxf,GACrB,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,YACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM6e,cAIzE7W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,iBACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM8e,aAIzE9W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,aACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM+e,oBAIzE/W,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAAyBF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YAAzD,eACA9B,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,0CAA0ClI,EAAM0f,0BAQ/EC,GAAkB,SAAC3f,GACrB,OACIgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,6BAEJD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACTlI,EAAMgf,gBAAkBhX,EAAA3B,EAAA4B,cAACsP,GAAD,MACzBvX,EAAM4e,iBAAoD,IAAjC5e,EAAM4e,gBAAgB5N,QAAgBhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,gCAC/DlI,EAAMgf,gBAAkBhf,EAAMgf,eAAehO,OAAS,GACnDhR,EAAMgf,eAAenR,IAAI,SAACwO,EAAYvO,GAClC,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVmU,EAAWI,cADhB,0BAEIzU,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,eAAetD,EAAYyX,EAAWO,aAAa,KAEvE5U,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAc7F,UAAU,aAAakG,MAAM,WAEvCJ,GAAK,CAAC1N,SAAU,oBAAqBE,MAAO,CAAEqO,WAAYwN,EAAWxN,WACjEgO,YAAaR,EAAWQ,YAAaC,SAAU,iBAEnD9U,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAS/U,QAAQ,SAASZ,MAAM,qBActE8V,GAAqB,SAAC5f,GACxB,OACAgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,8BAEJD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACTlI,EAAMif,cAAgBjX,EAAA3B,EAAA4B,cAACsP,GAAD,MACvBvX,EAAMif,cAA8C,IAA9Bjf,EAAMif,aAAajO,QAAgBhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,gCACzDlI,EAAMif,cAAgBjf,EAAMif,aAAajO,OAAS,GAC/ChR,EAAMif,aAAapR,IAAI,SAACwO,EAAYvO,GAChC,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVmU,EAAWI,cADhB,eAC0CzU,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,eAAetD,EAAYyX,EAAWM,WAAW,WAYjInS,GAAS,CACX6U,eAAgB,CACZQ,UAAW,UAIJ2B,MCtITtV,8MACF7E,kBAAoB,WAChBjJ,EAAWuB,WAAWyB,EAAKpB,MAAM7B,SAKL,YAAzB8f,MACC7c,EAAKpB,MAAMqb,sBAInB+E,gBAAkB,SAACtc,GACf1C,EAAKpB,MAAMsb,gBAAgBxX,GACtBtC,KAAK,WACFJ,EAAKpB,MAAMqb,wBAIvBgF,oBAAsB,SAACM,GACnBvf,EAAKpB,MAAM7B,QAAQkC,KAAK,wBAA0BsgB,MAGtD5Y,OAAS,WAAM,IAAA4W,EAEavd,EAAKpB,MADvBuI,EADKoW,EACLpW,QAASsW,EADJF,EACIE,UAAWC,EADfH,EACeG,SAAUC,EADzBJ,EACyBI,gBAChCH,EAFOD,EAEPC,gBACJrW,EAAUA,GAAW,GACrB,IAAImX,EAAsB,EAC1B9gB,QAAQC,IAAI,WAAYuC,EAAKpB,OAE7B,IAAIgf,EAAiB,GACjBC,EAAe,GAuBnB,OAtBGL,GAAmBA,EAAgB5N,SAClC4N,EAAgBM,QAAQ,SAAC7C,EAAYvO,GACE,cAAhCuO,EAAWK,iBACVuC,EAAa5e,KAAKgc,GAGlB2C,EAAe3e,KAAKgc,KAIzB2C,IACCU,EAAsBV,EAAehO,OAGrCgO,GADAA,EAAiB9Y,GAAe8Y,EAAgB,gBAChBG,MAAM,EAAG,IAE1CF,IAECA,GADAA,EAAe/Y,GAAe+Y,EAAc,cAChB7Y,OAAO+Y,MAAM,EAAG,KAIxB,YAAzBlB,KAEKjW,EAAA3B,EAAA4B,cAAC2Z,GAAD,CACAnD,qBAAsB,kBAAMrd,EAAKpB,MAAM6hB,wBACvCrD,cAAe,kBAAMpd,EAAKpB,MAAM8hB,iBAChCvD,eAAgB,kBAAMnd,EAAKpB,MAAM+hB,kBACjCrD,qBAAsB,kBAAMtd,EAAKpB,MAAMgiB,wBACvCnD,UAAWA,EACXC,SAAUA,EACVC,gBAAiBA,EACjBW,oBAAqBA,EACrBV,eAAgBA,EAChBC,aAAcA,IAKM,aAAzBhB,KAEKjW,EAAA3B,EAAA4B,cAACga,GAAD,CACAxD,qBAAsB,kBAAMrd,EAAKpB,MAAM6hB,wBACvCrD,cAAe,kBAAMpd,EAAKpB,MAAM8hB,iBAChCvD,eAAgB,kBAAMnd,EAAKpB,MAAM+hB,kBACjCrD,qBAAsB,kBAAMtd,EAAKpB,MAAMgiB,wBACvCnD,UAAWA,EACXC,SAAUA,EACVC,gBAAiBA,EACjBW,oBAAqBA,EACrBV,eAAgBA,EAChBC,aAAcA,IAKM,YAAzBhB,KAESjW,EAAA3B,EAAA4B,cAAA,YAURD,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWK,EAAQ2Z,8BACrBla,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGlN,UAAWK,EAAQ4Z,gBACxCna,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,SAASxC,UAAWK,EAAQ6Z,eACxCpa,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAIRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,eACD1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAAMmU,GAF7B,eAUpB7W,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWK,EAAQ8Z,8BACrBra,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGlN,UAAWK,EAAQ4Z,gBACxCna,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,UAAUxC,UAAWK,EAAQ6Z,eACzCpa,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAIRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,eACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAAMoU,GAF9B,kBAWpB9W,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWK,EAAQ+Z,gCACrBta,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGlN,UAAWK,EAAQ4Z,gBACxCna,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,UAAUxC,UAAWK,EAAQ6Z,eACzCpa,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAIRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,eACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAAMqU,GAF9B,2BAUpB/W,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWK,EAAQ+Z,gCACrBta,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGlN,UAAWK,EAAQ4Z,gBACxCna,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,UAAUxC,UAAWK,EAAQ6Z,eACzCpa,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAIRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,sBACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAAMgV,GAF9B,yBAWxB1X,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAAC5J,MAAO,CAACgY,UAAW,OAC/Bva,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWoB,IAAWf,EAAQia,sBAChCxa,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYhD,UAAWK,EAAQka,gCAAiCrU,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,2BACvE1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAWoB,IAAWf,EAAQma,kBACvC1a,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,KACI2B,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CACIkI,QAASvG,EAAA3B,EAAA4B,cAAA,WACLD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,MACJ1C,EAAA3B,EAAA4B,cAACmV,GAAD,CAA6B1S,QAAQ,cAAcuL,MAAO,MAE1DgH,UAAWjV,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,4BAEnB1C,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckI,QAASvG,EAAA3B,EAAA4B,cAAA,WACfD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,gBACJ1C,EAAA3B,EAAA4B,cAACyV,GAAD,CAA6BhT,QAAQ,cAAcuL,MAAO,MAEtDgH,UAAWjV,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,4BAEvB1C,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CACIkI,QAASvG,EAAA3B,EAAA4B,cAAA,WACLD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,WACJ1C,EAAA3B,EAAA4B,cAAC0V,GAAD,CAA0BjT,QAAQ,cAAcuL,MAAO,MAEvDgH,UAAWjV,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,4BAEnB1C,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CACIkI,QAASvG,EAAA3B,EAAA4B,cAAA,WACLD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,QACJ1C,EAAA3B,EAAA4B,cAAC2V,GAAD,CAA6BlT,QAAQ,cAAcuL,MAAO,MAE1DgH,UAAWjV,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,gCAOnC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,IAChBwJ,GAAmB5W,EAAA3B,EAAA4B,cAACsP,GAAD,MACpBqH,GAA8C,IAA3BA,EAAgB5N,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,gCACnDsU,GAAkBA,EAAehO,OAAS,GAC3ChJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWoB,IAAWf,EAAQia,sBAChCxa,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAcK,MAAM,WAAWJ,GAAK,CAAC1N,SAAU,iBAC3C0H,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAS/U,QAAQ,SAASZ,MAAM,aAGxC5B,UAAWK,EAAQka,gCAAiCrU,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,qBAC/D1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAWoB,IAAWf,EAAQma,kBAC3C1a,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,KACA2B,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACQ2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckI,QAAQ,eAE1BvG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckI,QAAQ,iBAOlCyQ,EAAenR,IAAI,SAACwO,EAAYvO,GAKhC,OACA9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAc4W,UAAWZ,EAAWI,iBAExCzU,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAc4W,UAAWrY,EAAYyX,EAAWO,aAAa,cAerF5U,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,IAEpBwJ,GAAmB5W,EAAA3B,EAAA4B,cAACsP,GAAD,MAChBqH,GAA8C,IAA3BA,EAAgB5N,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,gCACnDuU,GAAgBA,EAAajO,OAAS,GACvChJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMhD,UAAWoB,IAAWf,EAAQia,sBAChCxa,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAcK,MAAM,WAAWJ,GAAK,CAAC1N,SAAU,iBAC3C0H,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAS/U,QAAQ,SAASZ,MAAM,aAGxC5B,UAAWK,EAAQka,gCAAiCrU,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,mBAC/D1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAWoB,IAAWf,EAAQma,kBAC3C1a,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,KACA2B,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACQ2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckI,QAAQ,eAE1BvG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAckI,QAAQ,eAOlC0Q,EAAapR,IAAI,SAACwO,EAAYvO,GAK9B,OACA9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAc4W,UAAWZ,EAAWI,iBAExCzU,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAAc4W,UAAWrY,EAAYyX,EAAWM,WAAW,8CAtU/EtU,aAwWToN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMmiB,iBACNniB,EAAMoiB,mBAEc,SAAAve,GAAQ,MAAK,CACpCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,KAChD8iB,eAAgB,kBAAM1d,EC7WU,SAAAA,GAChC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,uBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA/BwB,2BAgCxBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KApCqB,wBAqCrBC,QAAS7C,EAAI+C,kBDkWzBqd,cAAe,kBAAMzd,EC9VU,SAAAA,GAC/B,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,sBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA7CuB,0BA8CvBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAlDoB,uBAmDpBC,QAAS7C,EAAI+C,kBDmVzBod,qBAAsB,kBAAMxd,EC/UU,SAAAA,GACtC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,6BAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3D8B,iCA4D9BC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhE2B,8BAiE3BC,QAAS7C,EAAI+C,kBDoUzBud,qBAAsB,kBAAM3d,ECjYU,SAAAA,GACtC,IAAIlD,EAAMN,EAAOqC,SAASb,qBAAuB,gBACjDmB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAR8B,iCAS9BC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAb2B,8BAc3BC,QAAS7C,EAAI+C,kBDsXzB4W,iBAAkB,kBAAMhX,EAASgX,OACjCC,gBAAiB,SAACxX,GAAD,OAAWO,EAASiX,GAAgBxX,OAE1C2R,CAA6CvJ,IElR/C2W,GAAY,kBAAM,SAAAxe,GAC3BA,EAAS,CACLC,KAtHwB,qBAwH5B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,aAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACHM,QAAQC,IAAI,gBACZwF,EAAS,CACLC,KA5HkB,qBA6HlBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjIe,kBAkIfC,QAAS7C,EAAI+C,mGC3Fdqe,GAhDW,SAAC9iB,GAAU,IAC3B+iB,EAAc/iB,EAAd+iB,UACN,OACI/a,EAAA3B,EAAA4B,cAAC+a,GAAA3c,EAAD,CACE+E,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdpC,KAAM6Z,EACNE,iBAAkB,IAClBxX,QAASzL,EAAM+Y,YACfmK,aAAc,CACZC,mBAAoB,cAEtBvf,QAASoE,EAAA3B,EAAA4B,cAAA,QAAMkD,GAAG,cAAcnL,EAAMojB,cACtCxL,OAAQ,CACN5P,EAAA3B,EAAA4B,cAAC4B,EAAAxD,EAAD,CACE7D,IAAI,QACJwH,aAAW,QACXF,MAAM,UACNG,QAASjK,EAAM+Y,aAEf/Q,EAAA3B,EAAA4B,cAACob,GAAAhd,EAAD,SAIN2B,EAAA3B,EAAA4B,cAACqb,GAAAjd,EAAD,CACIkE,MAAOC,GAAO6S,KACd8F,mBAAiB,kBACjBvf,QACIoE,EAAA3B,EAAA4B,cAAA,QAAMkD,GAAG,mBAERnL,EAAMojB,cAGXxL,OAAQ,CACJ5P,EAAA3B,EAAA4B,cAAC4B,EAAAxD,EAAD,CACA7D,IAAI,QACJwH,aAAW,QACXF,MAAM,WAEN9B,EAAA3B,EAAA4B,cAACob,GAAAhd,EAAD,YAQVmE,GAAS,CACX6S,KAAM,CACF5E,gBAAiB,SCAV8K,GA9CE,SAACvjB,GAAU,IACd8D,EAAqB9D,EAArB8D,MAAOtE,EAAcQ,EAAdR,UAGb,OACIwI,EAAA3B,EAAA4B,cAAA,YACEnE,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,GACjBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,YAClB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACKuL,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQnS,IAC7DmS,MAAOnS,EAAMoc,UAAUxU,MAEvB1D,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU+K,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAECzI,GAAaA,EAAUwR,OAAS,GAC7BxR,EAAUqO,IAAI,SAACqH,EAAMpH,GACrB,OACI9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOf,GAAOA,QAMxDlN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,QCzB5C5K,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAInBgL,eACF,SAAAA,EAAYzjB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA0c,IACfriB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4c,GAAAvc,KAAAH,KAAM/G,KAMV0jB,gBAAkB,SAACC,GACfviB,EAAKoG,SAAS,CACVoc,cAAeD,KATJviB,EAanByiB,aAAe,SAAC1kB,GACZiC,EAAKpB,MAAM6jB,aAAa1kB,GACxBiC,EAAKoG,SAAS,CACVoc,eAAgB,KAhBLxiB,EAoBnB2G,OAAS,WAAM,IAAA4W,EACsBvd,EAAKpB,MAAhC8jB,EADKnF,EACLmF,MAAOC,EADFpF,EACEoF,KAAMvkB,EADRmf,EACQnf,UACbokB,EAAkBxiB,EAAKZ,MAAvBojB,cAEN,OACI5b,EAAA3B,EAAA4B,cAAA,YACE6b,GAAS9b,EAAA3B,EAAA4B,cAACsP,GAAD,MACVuM,GAA0B,IAAjBA,EAAM9S,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,mBAC/BoZ,GAASA,EAAM9S,OAAS,GACzBhJ,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACA2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC+b,GAAD,cACAhc,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QAAvB,gBACArM,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QAAvB,QACArM,EAAA3B,EAAA4B,cAAC+b,GAAD,YACAhc,EAAA3B,EAAA4B,cAAC+b,GAAD,QAGJhc,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACCyd,EAAMjW,IAAI,SAAC1O,EAAM2O,GAAP,OACP9F,EAAA3B,EAAA4B,cAACgc,EAAA,SAAD,CAAUzhB,IAAKsL,GACdA,IAAU8V,GACX5b,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACnBrM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aACfvL,EAAK+gB,UAAY/gB,EAAK+gB,UAAUrK,QAAU,KAGnD7N,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACnBrM,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aACtChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,YACNtO,UAAWsC,GAAOwP,MAClB/D,MAAO9W,EAAK+gB,UAAU7gB,KACtBoX,SAAU,SAACF,GAAD,OAAOnV,EAAK2F,KAAK/G,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQ9W,IACvEwX,OAAO,SACPjM,QAAQ,eAIxB1C,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACnBrM,EAAA3B,EAAA4B,cAACic,GAAD,CACIpgB,MAAO3E,EACPK,UAAWA,EACX2Y,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMmY,cAAcwC,EAAKC,EAAO9W,OAGpFkE,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACfrM,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC3ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACKuL,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAAS9W,IACnE8W,MAAO9W,EAAK+gB,UAAUiE,MAAQhlB,EAAK+gB,UAAUiE,OAAS,GAEtDnc,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU+K,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAEC8b,GAAQA,EAAK/S,OAAS,GACnB+S,EAAKlW,IAAI,SAACqH,EAAMpH,GAEhB,OADIlP,QAAQC,IAAI,WAAYqW,GAExBlN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOf,EAAK/J,IAAK+J,EAAKkP,SAAS/kB,WAM7E2I,EAAA3B,EAAA4B,cAAC+b,GAAD,KACIhc,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIjB,QAAS,kBAAM7I,EAAKyiB,aAAa1kB,IACjC4K,KAAK,MACLD,MAAM,WAEN9B,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OAEJzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAEInB,KAAK,MACLD,MAAM,aAEN9B,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,SAMX3R,IAAU8V,GACX5b,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACnBrM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aACfvL,EAAK+gB,UAAY/gB,EAAK+gB,UAAUrK,QAAU,KAGnD7N,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QACnBrM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aACfvL,EAAK+gB,UAAY/gB,EAAK+gB,UAAU7gB,KAAO,KAGhD2I,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QAClBlV,EAAK+gB,WAAa/gB,EAAK+gB,UAAUxU,KAAOvM,EAAK+gB,UAAUxU,KAAKwS,cAAsB,IAEvFlW,EAAA3B,EAAA4B,cAAC+b,GAAD,CAAiB3P,MAAM,QAClBlV,EAAKilB,UAAYjlB,EAAKilB,SAAS/kB,KAAOF,EAAKilB,SAAS/kB,KAAa,IAEtE2I,EAAA3B,EAAA4B,cAAC+b,GAAD,KACIhc,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIjB,QAAS,kBAAM7I,EAAKpB,MAAMqkB,aAAallB,IACvC4K,KAAK,MACLD,MAAM,WAEN9B,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OAEJzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIjB,QAAS,kBAAM7I,EAAKsiB,gBAAgB5V,IACpC/D,KAAK,MACLD,MAAM,WAEN9B,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,gBAxIxBre,EAAKZ,MAAQ,CACTojB,eAAgB,GAHLxiB,6BADCiH,aAyJlBkT,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CAEJ3R,MAAOkD,EAAM0O,QAAQC,OAAOC,MAC5BpH,SAAU,IAEZqH,KAAM,CACJrH,SAAU,MAPQgH,CASpBM,MACW2H,MC9KTa,eAEF,SAAAA,EAAYtkB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAud,IACfljB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyd,GAAApd,KAAAH,KAAM/G,KAMV8Y,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KARP9H,EAWnB2X,YAAc,WACV3X,EAAKoG,SAAS,CAAE0B,MAAM,KAZP9H,EAenB4X,aAAe,WACb5X,EAAKpB,MAAMsW,SAASlV,EAAKpB,MAAM8D,OAC/B1C,EAAK2X,eAjBY3X,EAoBnB2G,OAAS,WAAM,IAAA4W,EACsBvd,EAAKpB,MAAhC8D,EADK6a,EACL7a,MAAOigB,EADFpF,EACEoF,KAAMvkB,EADRmf,EACQnf,UACnB,OACIwI,EAAA3B,EAAA4B,cAAA,YACEnE,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACDkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,KACQ2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYZ,MAAM,UAAUG,QAAS7I,EAAK0X,iBAA1D,YACJ9Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAqZ,WAAW,EACXrb,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aAA3B,mBACA/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAC5BtP,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OACnBrO,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYuO,QAAQ,wBAApB,QAGAzR,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIuL,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQnS,IAClEmS,MAAOnS,EAAMoc,UAAUxU,KACvBiO,MACI3R,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsZ,WAAY,GACZnlB,KAAK,OACL8L,GAAG,0BAGV3L,GAAaA,EAAUwR,OAAS,GAC7BxR,EAAUqO,IAAI,SAACqH,EAAMpH,GACrB,OACI9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOf,GAAOA,OAKpDlN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYuO,QAAQ,uBAApB,gBAGAzR,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIuL,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASnS,IACnEmS,MAAOnS,EAAMoc,UAAUiE,MACvBxK,MACI3R,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsZ,WAAY,GACZnlB,KAAK,MACL8L,GAAG,yBAGV4Y,GAAQA,EAAK/S,OAAS,GACnB+S,EAAKlW,IAAI,SAACqH,EAAMpH,GAChB,OACI9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOf,EAAK/J,IAAK+J,EAAKkP,SAAS/kB,UAKzE2I,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,iBACHqL,MAAM,WACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMoc,UAAUrK,QACvBY,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,UAAWnS,IACrE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,YACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMoc,UAAU7gB,KACvBoX,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQnS,IAClE6S,OAAO,SACPjM,QAAQ,gBAKxB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC/BG,QAAU,kBAAM7I,EAAK4X,aAAa5X,EAAKpB,MAAM8D,SAD7D,oBAzGhB1C,EAAKZ,MAAQ,CACT0I,MAAM,GAHK9H,6BAFDiH,aAyHhBmC,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAGV6L,MCzITG,eACF,SAAAA,EAAYzkB,GAAM,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA0d,IACdrjB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4d,GAAAvd,KAAAH,KAAM/G,KAKV0kB,eAAiB,SAACthB,GACd,IAAIjC,EAAMN,EAAOqC,SAASf,iBAAmB,cAC7Cb,IAAMC,IAAIJ,EAAK,CACb3C,QAAS,CACPmmB,aAAcvhB,EAASwhB,eAExBpjB,KAAK,SAAClD,GACLM,QAAQC,IAAI,MAAMP,GACJA,EAAIE,QAAQ,iBAEtB4C,EAAKpB,MAAM0E,YAAYpG,GACvB8C,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,gBAGdc,EAAKoG,SAAS,CACVqN,aAAc,2CAGvBpT,MAAM,SAACC,GACHN,EAAKpB,MAAM7B,SACViD,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,sBA5BRc,EAkClB2G,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAA,OAAKsC,MAAOC,GAAO2J,WACd/S,EAAKZ,MAAMqU,cAAgB7M,EAAA3B,EAAA4B,cAAA,WAAM7G,EAAKZ,MAAMqU,cAC7C7M,EAAA3B,EAAA4B,cAAC4c,EAAA,YAAD,CACYC,SAAS,2EACTC,WAAW,QACXC,UAAW5jB,EAAKsjB,eAChBO,UAAW7jB,EAAKsjB,eAChBQ,aAAc,yBAzClC9jB,EAAKZ,MAAQ,CACTqU,aAAc,IAHJzT,6BADOiH,aAkDvBmC,GAAS,CACX2J,UAAW,CACP0C,IAAK,MACLC,KAAM,QC1CCqO,IDmDA1P,YANS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,OAErCwW,CAA6CgP,ICjE5C,SAACzkB,GAEb,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,uBAGA1C,EAAA3B,EAAA4B,cAAA,WAEID,EAAA3B,EAAA4B,cAACmd,GAAD,UCCVC,8MAEFhe,kBAAoB,WAChBjG,EAAKjB,YAITA,OAAS,WACLiB,EAAKpB,MAAMwE,aACXpD,EAAKpB,MAAM6iB,eAGfyC,UAAY,SAACxhB,GACT1C,EAAKpB,MAAMskB,QAAQxgB,GACVtC,KAAK,SAAClD,GACH8C,EAAKjB,cAIrBkkB,aAAe,SAACvgB,GACZ1C,EAAKpB,MAAMulB,WAAWzhB,GACbtC,KAAK,SAAClD,GACH8C,EAAKjB,cAIrB0jB,aAAe,SAAC/f,GACZ1C,EAAKpB,MAAMwlB,WAAW1hB,GACjBtC,KAAK,SAAClD,GACH8C,EAAKjB,cAIjB4H,OAAS,WAAM,IAAA4W,EACmCvd,EAAKpB,MAA7CylB,EADK9G,EACL8G,aAAc3B,EADTnF,EACSmF,MAAO4B,EADhB/G,EACgB+G,QAASpiB,EADzBqb,EACyBrb,MAEhC9D,EADaqB,EAAOqC,SAASX,SAAS,cACfojB,MAAM,KAEjC,OAAGriB,EAEK0E,EAAA3B,EAAA4B,cAAC2d,GAAD,MAKJ5d,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,KACrBqQ,GAAgBzd,EAAA3B,EAAA4B,cAACsP,GAAD,MACjBkO,GACDzd,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAY0M,OACR5P,EAAA3B,EAAA4B,cAAA,WACJD,EAAA3B,EAAA4B,cAAC6d,GAAD,CACIxP,SAAW,SAACxS,GAAD,OAAW1C,EAAKkkB,UAAUxhB,IACrCA,MAAO1C,EAAKpB,MAAMylB,aAClB1B,KAAM2B,EACNlmB,UAAWA,EACX2Y,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM+lB,uBAAuBpL,EAAKC,EAAO9W,OAIzFsK,MAAM,UAENpG,EAAA3B,EAAA4B,cAAC+d,GAAD,CACIlC,MAAOA,EACPC,KAAM2B,EACNlmB,UAAWA,EACX2Y,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM+lB,uBAAuBpL,EAAKC,EAAO9W,IACrF+f,aAAe,SAAC/f,GAAD,OAAW1C,EAAKyiB,aAAa/f,IAC5CugB,aAAe,SAACvgB,GAAD,OAAW1C,EAAKijB,aAAavgB,OAIpDkE,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,6DA3ENhb,IAAMC,WAgGnBoN,eAdS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,YACNlV,EAAM4lB,aAEc,SAAA/hB,GAAQ,MAAK,CACpCmhB,WAAY,SAAC1hB,GAAD,OAAWO,GlCyDAgiB,EkCzDoBviB,ElCyDN,SAAAO,GACrC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CqB,EAAWQ,WAAW7C,EAAKklB,EAAWloB,GACjCqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA1Je,0BA6JtB9C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAlKe,sBAmKfC,QAAS,CAAE+hB,YAAa,SAE5BrlB,EAAOS,UAlBG,IAAC2kB,GkCxDvBd,WAAY,SAACzhB,GAAD,OAAWO,GlCZAgiB,EkCYoBviB,ElCZN,SAAAO,GACrC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CqB,EAAWU,WAAW/C,EAAKklB,GAClB7kB,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAzEW,sBA0EXC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjFQ,mBAkFRC,QAAS7C,IAEbT,EAAOS,UAnBD,IAAC2kB,GkCavB/B,QAAS,SAAC+B,GAAD,OAAehiB,ElCWL,SAACgiB,GAAD,OAAe,SAAAhiB,GAClC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzB,IAGIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CqB,EAAWK,SAAS1C,EAAKklB,GAChB7kB,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAtHQ,mBAuHRC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA9HK,gBA+HLC,QAAS7C,IAEbT,EAAOS,QkCjCU4iB,CAAQ+B,KACzC7hB,WAAY,kBAAMH,EAASG,MAC3Bqe,UAAW,kBAAMxe,EAASwe,OAC1BsD,cAAe,kBAAM9hB,ElC6FU,SAAAA,GAC/BA,EAAS,CACLC,KA/KsB,sBkCiF1BiiB,aAAc,kBAAMliB,ElCiGU,SAAAA,GAC9BA,EAAS,CACLC,KAnLqB,qBkCiFzByhB,uBAAwB,SAACpL,EAAKC,EAAO9W,GAAb,OAAuBO,ElCzEb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAQzD,OAPIP,IACAA,EAAQ,CACJoc,UAAW,KAKZtF,GAEH,IAAK,UAED9W,EAAMoc,UAAUrK,QAAU8E,EAC1BtW,EAAS,CACLC,KAnCyB,4BAoCzBC,QAAST,IAEb,MAEJ,IAAK,OAEDA,EAAMoc,UAAU7gB,KAAOsb,EACvBtW,EAAS,CACLC,KA5CyB,4BA6CzBC,QAAST,IAEb,MAEJ,IAAK,OAEDA,EAAMoc,UAAUxU,KAAOiP,EACvBtW,EAAS,CACLC,KArDyB,4BAsDzBC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAMoc,UAAUiE,MAAQxJ,EACxBtW,EAAS,CACLC,KA9DyB,4BA+DzBC,QAAST,IAQrBO,EAAS,CACLC,KAvEqC,mCkC6FeyhB,CAAuBpL,EAAKC,EAAO9W,OAEhF2R,CAA6C4P,ICzF7CmB,GAjBO,SAACxmB,GAEnB,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,qCAGA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,kEAGA1C,EAAA3B,EAAA4B,cAAA,cCFGwe,GAVU,SAACzmB,GAEtB,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,8HC2EGgc,GAjEM,SAAC1mB,GAEd,OADApB,QAAQC,IAAImB,GAERgI,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAAC0e,GAAAtgB,EAAD,OAGRuR,OACI5P,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAMjK,EAAM4mB,oBAC3B5mB,EAAM6mB,eAAiB7e,EAAA3B,EAAA4B,cAAC6e,GAAAzgB,EAAD,MACxBrG,EAAM6mB,eAAiB7e,EAAA3B,EAAA4B,cAACob,GAAAhd,EAAD,OAGhC+H,MAAK,cAAA7N,OAAgBP,EAAM+mB,WAAa,IAAI/mB,EAAM+mB,WAAW/V,OAAO,IAAM,MAE9EhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KAEQlD,EAAA3B,EAAA4B,cAAC+e,GAAA3gB,EAAD,CAAU4gB,GAAIjnB,EAAM6mB,eACpB7e,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,SACN0Q,YAAY,yBACZjR,MAAOjW,EAAMmnB,WACb1Q,SAAU,SAACF,GAAD,OAAOvW,EAAMonB,iBAAiB7Q,EAAEG,OAAOT,QACjDU,OAAO,SACPjM,QAAQ,eAKpB1C,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,CAAM2T,OAAO,GACRha,EAAM+mB,YAAc/mB,EAAM+mB,WAAW/V,OAAS,GAC5ChR,EAAM+mB,WAAWlZ,IAAI,SAACwZ,EAAUvZ,GAC/B,IAAIoH,EAAOmS,EAASnP,cACpB,OACAlQ,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU7D,IAAK6kB,EAASlc,GACpBmc,SAAS,EACTpZ,QAAQ,EAAMjE,QAAU,kBAAMjK,EAAMunB,iBAAiBF,KAEzDrf,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CACIkI,QAAS2G,EAAK9G,MACd6O,UAAW/H,EAAKoD,cAEpBtQ,EAAA3B,EAAA4B,cAACuf,GAAAnhB,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAMjK,EAAMynB,iBAAiBJ,KAC9Crf,EAAA3B,EAAA4B,cAACyf,GAAArhB,EAAD,CAAQmO,SAAS,QAAQ1K,MAAM,sBAOhD9J,EAAM+mB,YAA0C,IAA5B/mB,EAAM+mB,WAAW/V,SACxChJ,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,8CAUV7J,GAAS,CACXgN,OAAQ,CACJiB,gBAAiB,QAErBT,YAAa,CACTrF,MAAO,QC9ETgV,8MAEFtgB,kBAAoB,WAChBjG,EAAKjB,YAGTynB,oBAAsB,WACgB,KAA/BxmB,EAAKpB,MAAM6nB,iBACVzmB,EAAKpB,MAAMya,qBAInBqN,0BAA4B,SAACC,EAAUC,GACH,KAA7BD,EAASF,kBACRzmB,EAAKpB,MAAMya,kBACXrZ,EAAKpB,MAAMumB,mBAInBpmB,OAAS,WACLiB,EAAKpB,MAAMya,qBAGf1S,OAAS,WACL,IAAIgf,EAAa,GAOjB,OALIA,EADD3lB,EAAKpB,MAAMioB,eACG7mB,EAAKpB,MAAMkoB,mBAGX9mB,EAAKpB,MAAMmoB,aAGxBngB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAACmgB,GAAD,CACI9R,SAAW,SAACxS,GAAD,OAAW1C,EAAKpB,MAAMqoB,YAAYvkB,EAAO1C,EAAKpB,MAAMoX,WAC/DtT,MAAO1C,EAAKpB,MAAMsoB,iBAClBlR,SAAUhW,EAAKpB,MAAMoX,SACrBS,MAAO,kBAAMzW,EAAKjB,UAClBgY,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMuoB,2BAA2B5N,EAAKC,EAAO9W,OAEjGkE,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAACugB,GAAD,CAAczB,WAAYA,EACtBQ,iBAAmB,SAACrS,GAAD,OAAU9T,EAAKpB,MAAMyoB,eAAevT,IACvD0R,eAAiB,kBAAMxlB,EAAKpB,MAAM0oB,eAClCjB,iBAAmB,SAACvS,GAAD,OAAU9T,EAAKpB,MAAM2oB,eAAezT,IACvD2R,cAAezlB,EAAKpB,MAAMioB,eAC1Bd,WAAY/lB,EAAKpB,MAAM4oB,YACvBxB,iBAAmB,SAACD,GAAD,OAAgB/lB,EAAKpB,MAAM6oB,eAAe1B,EAAY/lB,EAAKpB,MAAMmoB,kBAE5FngB,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,4DApDFhb,IAAMC,WAyEvBoN,eAfS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMsoB,kBAEc,SAAAzkB,GAAQ,MAAK,CACpCgkB,YAAa,SAACvkB,EAAOsT,GAAR,OAAqB/S,EvBnBX,SAACmW,EAAepD,GAAhB,OAA6B,SAAA/S,GACpDA,EAAS,CACLC,KArD0B,uBAuD9B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,WACzCiV,EAgBA/S,EAASkW,GAAeC,IAfxBhX,EAAWK,SAAS1C,EAAKqZ,GACpBhZ,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3DgB,uBA4DhBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhEa,oBAiEbC,QAAS7C,OuBGkB2mB,CAAYvkB,EAAOsT,KAC9DmD,eAAgB,SAACzW,GAAD,OAAWO,EAASkW,GAAezW,KACnD2kB,eAAgB,SAAC3kB,GAAD,OAAWO,GvBiEAmW,EuBjEwB1W,EvBiEN,SAAAO,GAC7CA,EAAS,CACLC,KAhIuB,kBAiIvBC,QAASiW,OAHa,IAACA,GuBhE3BmO,eAAgB,SAAC7kB,GAAD,OAAWO,GvBGAmW,EuBHwB1W,EvBGN,SAAAO,GAC7C,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,WAC7CqB,EAAWU,WAAW/C,EAAKqZ,GACtBhZ,KAAK,SAAClD,GACH+F,EAASoW,QAEZhZ,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA/EoB,uBAgFpBC,QAAS7C,SATK,IAAC8Y,GuBF3BC,gBAAiB,kBAAMpW,EAASoW,OAChC0L,cAAe,kBAAM9hB,EvB4GU,SAAAA,GAC/BA,EAAS,CACLC,KAxKsB,sBuB2D1BiiB,aAAc,kBAAMliB,EvBgHU,SAAAA,GAC9BA,EAAS,CACLC,KA5KqB,qBuB2DzBokB,YAAa,kBAAMrkB,EvBaU,SAAAA,GAC7BA,EAAS,CACLC,KAtF6B,6BuBwEjCukB,eAAgB,SAAC1B,EAAYgB,GAAb,OAA8B9jB,EvBkBpB,SAAC8iB,EAAYgB,GAAb,OAA8B,SAAA9jB,GACxD,GAAG8jB,GAAgBA,EAAanX,OAAS,EAAG,CACxC,IAAIkX,EAAqBC,EAAaY,OAAO,SAAC7T,GAC1C,OACQA,EAAK9G,OACL8G,EAAK9G,MAAM4a,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,GAG1D9T,EAAKoD,aACLpD,EAAKoD,YAAY0Q,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,IAEjFd,GAAsBA,EAAmBlX,OAAS,EACjD3M,EAAS,CACLC,KAtGuB,0BAuGvBC,QAAS,CACL2jB,qBACAf,gBAKR9iB,EAAS,CACLC,KA/GuB,0BAgHvBC,QAAS,CACL2jB,mBAAoB,GACpBf,qBAMZ9iB,EAAS,CACLC,KAzH2B,0BA0H3BC,QAAS,CACL2jB,mBAAoB,GACpBf,iBuBrD2C0B,CAAe1B,EAAYgB,KAClFI,2BAA4B,SAAC5N,EAAKC,EAAO9W,GAAb,OAAuBO,EvB3Db,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAC7D,OAAOuW,GAEH,IAAK,QAED9W,EAAMoU,cAAc9J,MAAQuM,EAC5BtW,EAAS,CACLC,KAf6B,gCAgB7BC,QAAST,IAEb,MAEJ,IAAK,cAEDA,EAAMoU,cAAcI,YAAcqC,EAClCtW,EAAS,CACLC,KAxB6B,gCAyB7BC,QAAST,IASrBO,EAAS,CACLC,KAlCyC,uCuBkEeikB,CAA2B5N,EAAKC,EAAO9W,OAExF2R,CAA6CkS,IC5B7CsB,GAvCC,SAACjpB,GAET,OADApB,QAAQC,IAAImB,GAERgI,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAAC0e,GAAAtgB,EAAD,OAGR+H,MAAK,iBAAA7N,OAAmBP,EAAM+jB,KAAO,IAAI/jB,EAAM+jB,KAAK/S,OAAO,IAAM,MAErEhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,CAAM2T,OAAO,GACRha,EAAM+jB,MAAQ/jB,EAAM+jB,KAAK/S,OAAS,GAChChR,EAAM+jB,KAAKlW,IAAI,SAACqb,EAAKpb,GACpB,IAAIoH,EAAOgU,EAAI9E,SACf,OACApc,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU7D,IAAK0mB,EAAI/d,GACfmc,SAAS,EACTpZ,QAAQ,EAAMjE,QAAU,kBAAMjK,EAAMmpB,YAAYD,KAEpDlhB,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CACIkI,QAAO,GAAAhO,OAAK2U,EAAK7V,KAAV,MAAAkB,OAAmB2U,EAAKkU,KAAxB,KACPnM,UAAW/H,EAAKW,gBAM7B7V,EAAM+jB,MAA8B,IAAtB/jB,EAAM+jB,KAAK/S,SAC5BhJ,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,iDAUV7J,GAAS,CACXgN,OAAQ,CACJiB,gBAAiB,QAErBT,YAAa,CACTrF,MAAO,QCqBA0W,GAtES,SAACrpB,GAAU,IACzB8D,EAAU9D,EAAV8D,MACFqT,EAAWnX,GAASA,EAAMoX,SAAY,QAAU,OAEpD,OACIpP,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,QACrBxT,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,SACpCxX,EAAMoX,UAAYpP,EAAA3B,EAAA4B,cAACyP,GAAArR,EAAD,MACnBrG,EAAMoX,UAAYpP,EAAA3B,EAAA4B,cAAC0P,GAAAtR,EAAD,OAGvBuR,OACI5P,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQkE,MAAO,CAAC4M,QAASA,GAAUlN,QAAS,kBAAMjK,EAAM6X,UAAxD,WAEJzJ,MAAOpO,EAAMoX,SACL,oBACA,qBAGZpP,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,OACNP,MAAOnS,EAAMsgB,SAAWtgB,EAAMsgB,SAAS/kB,KAAO,GAC9CoX,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQjW,EAAM8D,QACnE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,OACNP,MAAOnS,EAAMsgB,SAAWtgB,EAAMsgB,SAASgF,KAAO,GAC9C3S,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQjW,EAAM8D,QACnE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,iBACHqL,MAAM,kBACNP,MAAOnS,EAAMsgB,SAAWtgB,EAAMsgB,SAASvO,QAAU,GACjDY,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,UAAWjW,EAAM8D,QACtE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,YAEJD,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,CAAakE,MAAOC,GAAOgO,cACvBxQ,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACnCG,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SAC5C9D,EAAMoX,SAAW,SAAW,cAQ/C5M,GAAO,CACTwN,YAAa,CACTrF,MAAO,OAEX6F,aAAc,CACV3M,WAAY,OAEhB2L,OAAQ,CACJiB,gBAAiB,SC/EnB6Q,8MAEFjiB,kBAAoB,WAChBjG,EAAKjB,YAGTA,OAAS,WACLiB,EAAKpB,MAAM6iB,eAGf0G,SAAW,SAACzlB,GACL1C,EAAKpB,MAAMoX,SACVhW,EAAKpB,MAAMwpB,UAAU1lB,GACZtC,KAAK,SAAClD,GACH8C,EAAKjB,WAIjBiB,EAAKpB,MAAMypB,OAAO3lB,GACTtC,KAAK,SAAClD,GACH8C,EAAKjB,cAKzB4H,OAAS,WAAM,IAAA4W,EACoBvd,EAAKpB,MAA9B0lB,EADK/G,EACL+G,QAASgE,EADJ/K,EACI+K,YAGf,OAFA9qB,QAAQC,IAAI,cAAe6qB,GAGvB1hB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAAC0hB,GAAD,CACIrT,SAAW,SAACxS,GAAD,OAAW1C,EAAKmoB,SAASzlB,IACpCA,MAAO4lB,EACPtS,SAAUhW,EAAKpB,MAAMoX,SACrBS,MAAO,kBAAMzW,EAAKjB,UAClBgY,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM4pB,sBAAsBjP,EAAKC,EAAO9W,OAE5FkE,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAAC4hB,GAAD,CACI9F,KAAM2B,EACNyD,YAAc,SAACjU,GAAD,OAAU9T,EAAKpB,MAAM8pB,UAAU5U,sCA1C1C9M,IAAMC,WA2DlBoN,eAVS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM4lB,aAEc,SAAA/hB,GAAQ,MAAK,CACpCwe,UAAW,kBAAMxe,EAASwe,OAC1B4G,OAAQ,SAAC3lB,GAAD,OAAWO,GdTA0lB,EcSgBjmB,EdTH,SAAAO,GAE5B,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,MAC7CvD,QAAQC,IAAI,gBACZD,QAAQC,IAAIkrB,GACZvmB,EAAWK,SAAS1C,EAAK4oB,GACpBvoB,KAAK,SAAClD,GACHM,QAAQC,IAAI,cAAgBP,GAC5B+F,EAAS,CACLC,KAjEO,kBAkEPC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAzEI,eA0EJC,QAAS7C,EAAI+C,aAEjBxD,EAAOS,UAtBL,IAACqoB,GcUnBP,UAAW,SAAC1lB,GAAD,OAAWO,GduCA0lB,EcvCmBjmB,EduCN,SAAAO,GACnC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,MAC7CqB,EAAWQ,WAAW7C,EAAK4oB,GACtBvoB,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAzGc,yBA4GrB9C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhHW,kBAiHXC,QAAS7C,EAAI+C,aAEjBxD,EAAOS,UAlBE,IAACqoB,GctCtBD,UAAW,SAAChmB,GAAD,OAAWO,Gd8BA0lB,Ec9BmBjmB,Ed8BN,SAAAO,GACnCzF,QAAQC,IAAI,aAAckrB,GAC1B1lB,EAAS,CACLC,KA3FkB,aA4FlBC,QAASwlB,OAJQ,IAACA,Gc7BtBH,sBAAuB,SAACjP,EAAKC,EAAO9W,GAAb,OAAuBO,EdpDb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GACxD,OAAOuW,GAEH,IAAK,OAED9W,EAAMsgB,SAAS/kB,KAAOsb,EACtBtW,EAAS,CACLC,KAbwB,2BAcxBC,QAAST,IAEb,MAEJ,IAAK,OAEDA,EAAMsgB,SAASgF,KAAOzO,EACtBtW,EAAS,CACLC,KAtBwB,2BAuBxBC,QAAST,IAEb,MAEJ,IAAK,UAEDA,EAAMsgB,SAASvO,QAAU8E,EACzBtW,EAAS,CACLC,KA/BwB,2BAgCxBC,QAAST,IASrBO,EAAS,CACLC,KAzCoC,kCcyDeslB,CAAsBjP,EAAKC,EAAO9W,OAE9E2R,CAA6C6T,ICtB7CU,GAvCW,SAAChqB,GAAU,IAC3B8D,EAAU9D,EAAV8D,MACS9D,GAASA,EAAMoX,SAC9B,OACIpP,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,QACrBxT,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACvCxP,EAAA3B,EAAA4B,cAACyP,GAAArR,EAAD,OAGH+H,MAAM,cAEVpG,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,QACNP,MAAOnS,EAAMiX,MACbtE,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,QACpE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAA,YAEJD,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,CAAakE,MAAOC,GAAOgO,cACvBxQ,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACnCG,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SADjD,cAUd0G,GAAO,CACTwN,YAAa,CACTrF,MAAO,OAEX6F,aAAc,CACV3M,WAAY,OAEhB2L,OAAQ,CACJiB,gBAAiB,8BCaVwR,GA3DG,SAACjqB,GAEX,OADApB,QAAQC,IAAImB,GAERgI,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAAC0e,GAAAtgB,EAAD,OAGRuR,OACI5P,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAMjK,EAAM4mB,oBAC3B5mB,EAAM6mB,eAAiB7e,EAAA3B,EAAA4B,cAAC6e,GAAAzgB,EAAD,MACxBrG,EAAM6mB,eAAiB7e,EAAA3B,EAAA4B,cAACob,GAAAhd,EAAD,OAGhC+H,MAAK,UAAA7N,OAAYP,EAAMkqB,OAAS,IAAIlqB,EAAMkqB,OAAOlZ,OAAO,IAAM,MAElEhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KAEQlD,EAAA3B,EAAA4B,cAAC+e,GAAA3gB,EAAD,CAAU4gB,GAAIjnB,EAAM6mB,eACpB7e,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,SACN0Q,YAAY,yBACZjR,MAAOjW,EAAMmnB,WACb1Q,SAAU,SAACF,GAAD,OAAOvW,EAAMmqB,cAAc5T,EAAEG,OAAOT,QAC9CU,OAAO,SACPjM,QAAQ,eAKpB1C,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,CAAM2T,OAAO,GACRha,EAAMkqB,QAAUlqB,EAAMkqB,OAAOlZ,OAAS,GACpChR,EAAMkqB,OAAOrc,IAAI,SAACuc,EAAWtc,GAC5B,IAAIoH,EAAOkV,EAAUC,WACrB,OACAriB,EAAA3B,EAAA4B,cAACqiB,GAAAjkB,EAAD,CAAMmQ,MAAOtB,EAAK6F,MAAOvY,IAAK4nB,EAAUjf,GACpCZ,MAAOC,GAAO+f,KACd/S,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,KACK6O,EAAK6F,MAAQ7F,EAAK6F,MAAM,GAAK,YAOnD/a,EAAMkqB,QAAkC,IAAxBlqB,EAAMkqB,OAAOlZ,SAChChJ,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,0CAUV7J,GAAS,CACXgN,OAAQ,CACJiB,gBAAiB,QAErBT,YAAa,CACTrF,MAAO,OAEX4X,KAAM,CACF5T,OAAQ,KCxEV6T,8MAEFnjB,kBAAoB,WAChBzI,QAAQC,IAAI,aACZuC,EAAKjB,YAGTynB,oBAAsB,WACrBhpB,QAAQC,IAAI,qBACyB,KAA/BuC,EAAKpB,MAAM6nB,iBACVzmB,EAAKpB,MAAMoE,iBAInB0jB,0BAA4B,SAACC,EAAUC,GACnCppB,QAAQC,IAAI,mBACZD,QAAQC,IAAIkpB,GACoB,KAA7BA,EAASF,kBACRzmB,EAAKpB,MAAMoE,cACXhD,EAAKpB,MAAMumB,mBAInBpmB,OAAS,WACLiB,EAAKpB,MAAMoE,iBAGf2D,OAAS,WACLnJ,QAAQC,IAAI,oBACZD,QAAQC,IAAIuC,EAAKpB,OACjB,IAAIkqB,EAAS,GAOb,OALIA,EADD9oB,EAAKpB,MAAMioB,eACD7mB,EAAKpB,MAAMyqB,eAGXrpB,EAAKpB,MAAM0qB,UAGpB1iB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAAC0iB,GAAD,CACIrU,SAAW,SAACxS,GAAD,OAAW1C,EAAKpB,MAAM4qB,SAAS9mB,EAAO1C,EAAKpB,MAAMoX,WAC5DtT,MAAO1C,EAAKpB,MAAM6qB,cAClBhT,MAAO,kBAAMzW,EAAKjB,UAClBgY,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM8qB,wBAAwBnQ,EAAKC,EAAO9W,OAE9FkE,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnBpN,EAAA3B,EAAA4B,cAAC8iB,GAAD,CAAWb,OAAQA,EACftD,eAAiB,kBAAMxlB,EAAKpB,MAAM0oB,eAClC7B,cAAezlB,EAAKpB,MAAMioB,eAC1Bd,WAAY/lB,EAAKpB,MAAM4oB,YACvBuB,cAAgB,SAAChD,GAAD,OAAgB/lB,EAAKpB,MAAMgrB,YAAY7D,EAAY/lB,EAAKpB,MAAM0qB,eAEtF1iB,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,4DAvDLhb,IAAMC,WAyEpBoN,eAZS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMyqB,eAEc,SAAA5mB,GAAQ,MAAK,CACpCumB,SAAU,SAAC9mB,EAAOsT,GAAR,OAAqB/S,G7CzCV6mB,E6CyC4BpnB,E7CzCb,SAAAO,GACpCA,EAAS,CACLC,KAjCuB,oBAmC3B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,QAC7CqB,EAAWK,SAAS1C,EAAK+pB,GACpB1pB,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAtCiB,oBAuCjBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA3Cc,iBA4CdC,QAAS7C,SAfD,IAACwpB,G6C0CrB9mB,YAAa,kBAAMC,EAASD,MAC5B+hB,cAAe,kBAAM9hB,E7C0CU,SAAAA,GAC/BA,EAAS,CACLC,KA5GsB,sB6CiE1BiiB,aAAc,kBAAMliB,E7C8CU,SAAAA,GAC9BA,EAAS,CACLC,KAhHqB,qB6CiEzBokB,YAAa,kBAAMrkB,E7CxBU,SAAAA,GAC7BA,EAAS,CACLC,KAnD0B,0B6C0E9B0mB,YAAa,SAAC7D,EAAYgB,GAAb,OAA8B9jB,E7CnBpB,SAAC8iB,EAAYuD,GAAb,OAA2B,SAAArmB,GAClD,GAAGqmB,GAAaA,EAAU1Z,OAAS,EAAG,CAClC,IAAIyZ,EAAiBC,EAAU3B,OAAO,SAAC7T,GACnC,OACQA,EAAK6F,OACL7F,EAAK6F,MAAMiO,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,IAGvEyB,GAAkBA,EAAezZ,OAAS,EACzC3M,EAAS,CACLC,KAhEoB,uBAiEpBC,QAAS,CACLkmB,iBACAtD,gBAKR9iB,EAAS,CACLC,KAzEoB,uBA0EpBC,QAAS,CACLkmB,eAAgB,GAChBtD,qBAMZ9iB,EAAS,CACLC,KAnFwB,uBAoFxBC,QAAS,CACLkmB,eAAgB,GAChBtD,iB6CbwC6D,CAAY7D,EAAYgB,KAC5E2C,wBAAyB,SAACnQ,EAAKC,EAAO9W,GAAb,OAAuBO,E7CjEb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAC1D,OAAOuW,GAEH,IAAK,QAED9W,EAAMumB,WAAWtP,MAAQJ,EACzBtW,EAAS,CACLC,KAf0B,6BAgB1BC,QAAST,IAKrBO,EAAS,CACLC,KArBsC,oC6CwEewmB,CAAwBnQ,EAAKC,EAAO9W,OAElF2R,CAA6C+U,IChExDrsB,GAAU,GA+CDgtB,GAAY,SAAC3O,GAAD,OAAY,SAAAnY,GACjC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,kBAAyBqa,EACtEhZ,EAAWC,QAAQtC,EAAKhD,IACnBqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAlEc,qBAmEdC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAxEW,kBAyEXC,QAAS7C,IAEbT,EAAOS,SA8HV0pB,GAAc,SAAChQ,GAAD,OAAe,SAAA/W,GAEtC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CiZ,EAAUP,UAAUtX,OAAS,YAC7BC,EAAWQ,WAAW7C,EAAKia,EAAWjd,IACjCqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3Mc,iBA4MdC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAxNiB,oBAyNjBC,QAAS7C,QCnLV2pB,GApCO,SAACrrB,GACf,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,WACA1C,EAAA3B,EAAA4B,cAAC2F,GAAAvH,EAAD,CAAM2T,OAAO,GACJha,EAAMsrB,SAAWtrB,EAAMsrB,QAAQta,OAAS,GACtChR,EAAMsrB,QAAQzd,IAAI,SAACqH,EAAMpH,GACxB,OACA9F,EAAA3B,EAAA4B,cAACgG,GAAA5H,EAAD,CAAU7D,IAAKsL,EACXwZ,SAAS,EACTpZ,QAAQ,EAAOjE,QAAU,kBAAMjK,EAAMurB,gBAAkBvrB,EAAMurB,eAAerW,KAEhFlN,EAAA3B,EAAA4B,cAACkG,GAAA9H,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACKgK,EAAK1S,MAGdwF,EAAA3B,EAAA4B,cAACoG,GAAAhI,EAAD,CAEIkI,QACIvG,EAAA3B,EAAA4B,cAAA,OACIujB,wBAAyB,CACrBC,OAAQtN,GAAwBjJ,EAAKwW,YAIjDzO,UAAW/H,EAAKyW,UAAY,UAAY,gBCtBlEC,GAAa,SAAC5rB,GAChB,OAAOgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAADrE,OAAAglB,OAAA,CAAOre,UAAU,MAASxN,KAwHtB8rB,eApHX,SAAAA,EAAY9rB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA+kB,IACf1qB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAilB,GAAA5kB,KAAAH,KAAM/G,KAMV8Y,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KARP9H,EAWnB2X,YAAc,WACVna,QAAQC,IAAI,gBACZuC,EAAKoG,SAAS,CAAE0B,MAAM,KAbP9H,EAgBnB2qB,aAAe,WACX3qB,EAAKpB,MAAMgsB,cACX5qB,EAAKoG,SAAS,CAAE0B,MAAM,KAlBP9H,EAqBnByX,aAAe,SAACoT,GACZrtB,QAAQC,IAAI,WAAYotB,GACxB7qB,EAAKpB,MAAMksB,gBAAgBD,IAvBZ7qB,EA0BnB2G,OAAS,WAAM,IAAA4W,EAEwBvd,EAAKpB,MADlCmsB,EADKxN,EACLwN,QAASC,EADJzN,EACIyN,aAAcC,EADlB1N,EACkB0N,WACrBC,EAFG3N,EAEH2N,YAAaC,EAFV5N,EAEU4N,UACjBN,EAAME,EAAUA,EAAQK,SAAW,KAEnCC,EAAqB,GAKzB,OAJGN,GAAWA,EAAQM,qBAClBA,EAAkB,GAAAlsB,OAAM4rB,EAAQM,mBAAqB,IAIrDzkB,EAAA3B,EAAA4B,cAAA,WAECgkB,GACGjkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIoc,SAAS,EACTrd,QAAS7I,EAAK0X,gBACd5K,QAAQ,GAERlG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIqD,QAAU0d,EAAIS,SAAWT,EAAIS,SAAWT,EAAI3T,YAC5C2E,UAAS,KAAA1c,OACAksB,EADA,MAAAlsB,OACuB0rB,EAAI5E,SAD3B,OAAA9mB,OACyC0rB,EAAIlR,MAAQkR,EAAIlR,MAAhB,GAAAxa,OAA2B0rB,EAAIhR,MAA/B,gBAAA1a,OAAmD0rB,EAAIU,WADhG,OAGZP,GACDpkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAM7I,EAAKpB,MAAM4sB,oBAChCX,EAAIY,UACN7kB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAQjL,SAAS,QAAQ1K,MAAM,gBAItCwiB,GACDtkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAM7I,EAAKpB,MAAM8sB,wBAClC9kB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAQjL,SAAS,QAAQ1K,MAAM,gBAGtCuiB,GACDrkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU6hB,QAASR,EAAW9V,SAAU,kBAAMrV,EAAKyX,aAAaoT,IAAMhW,MAAM,aAC5EjO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS,kBAAM7I,EAAKpB,MAAMgtB,YAAYf,KAC9CjkB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAMjL,SAAS,QAAQ1K,MAAM,iBAK5CmiB,GACGjkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI+hB,oBAAqBrB,GACrBsB,YAAU,EACV3iB,MAAO,CAACuM,KAAM,MAAOlL,MAAO,MAAOiL,IAAK,MAAOsW,OAAQ,OACvDjkB,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aACvB/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WACfuhB,EAAIS,UAET1kB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,GAAAnK,OACQ0rB,EAAI5E,SADZ,OAAA9mB,OAC0B0rB,EAAIlR,MAAQkR,EAAIlR,MAAhB,GAAAxa,OAA2B0rB,EAAIhR,MAA/B,gBAAA1a,OAAmD0rB,EAAIU,aAEjF3kB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS7I,EAAK2X,YAAaxO,MAAO,CAACqB,MAAO,KAAMiL,IAAK,KAAMxN,SAAS,aAC5ErB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAGRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAE5BtP,EAAA3B,EAAA4B,cAAA,OACIujB,wBAAyB,CACrBC,OAAQtN,GAAwB8N,EAAI3T,gBAG5CtQ,EAAA3B,EAAA4B,cAACmlB,GAAD,CAAe9B,QAASW,EAAIX,WAE/Be,GACDrkB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYZ,MAAM,YAAYG,QAAS7I,EAAK2qB,cAA5D,cAtGhB3qB,EAAKZ,MAAQ,CACT0I,MAAM,GAHK9H,6BADDiH,aC4BPglB,8MArCXC,SAAW,SAACC,GACR,OAAOA,EAAKnnB,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEmmB,mBAAqBpmB,EAAEomB,wBAGxD1kB,OAAS,WAAM,IACLkY,EAAiB7e,EAAKpB,MAAtBigB,aACFuN,EAAsB,GAI1B,OAHGvN,IACCuN,EAAsBpsB,EAAKksB,SAASrN,IAGpCjY,EAAA3B,EAAA4B,cAAA,WACCulB,GAAuBA,EAAoBxc,OAAS,GACjDhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACKsiB,EAAoB3f,IAAI,SAACqH,EAAMpH,GAE5B,OADAlP,QAAQC,IAAI,cAAeqW,GAEvBlN,EAAA3B,EAAA4B,cAACwlB,GAAD,CAAStB,QAASjX,EAAO1S,IAAKsL,EAClB4f,SAAW,kBAAMtsB,EAAKpB,MAAM2tB,QAAQzY,IACpC4X,oBAAsB,kBAAM1rB,EAAKpB,MAAM8sB,oBAAoB5X,IAC3DoX,aAAa,EACbF,cAAc,QAMxCnM,GACEjY,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,yBAEHuV,GAAwC,IAAxBA,EAAajP,QAC1BhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,wDAjCWtC,IAAMC,WCI3BujB,GAAa,SAAC5rB,GAChB,OAAOgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAADrE,OAAAglB,OAAA,CAAOre,UAAU,QAAWxN,KA2GxB4tB,eAtGX,SAAAA,EAAY5tB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA6mB,IACfxsB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+mB,GAAA1mB,KAAAH,KAAM/G,KAQVqH,kBAAoB,WAChB,IAAIlG,EAAMN,EAAOqC,SAASf,iBADJwc,EAEEvd,EAAKpB,MAAtBib,EAFe0D,EAEf1D,MAAOF,EAFQ4D,EAER5D,MAGV5Z,GADD8Z,EACI,wBAAA1a,OAA4B0a,GAG5B,wBAAA1a,OAA4Bwa,GAEnCvX,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACHM,QAAQC,IAAI,eACZuC,EAAKoG,SAAS,CACVqmB,QAASvvB,EAAIG,KACb6E,MAAO,OAGd7B,MAAM,SAACC,GACJN,EAAKoG,SAAS,CACVlE,MAAO5B,OA7BJN,EAkCnB0sB,gBAAkB,SAAC3B,GACf/qB,EAAKpB,MAAM+tB,YAAY5B,IAnCR/qB,EAsCnB0X,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KAvCP9H,EA0CnB2X,YAAc,WACVna,QAAQC,IAAI,gBACZuC,EAAKoG,SAAS,CAAE0B,MAAM,KA5CP9H,EA+CnB2G,OAAS,WAAM,IAAAimB,EAC4B5sB,EAAKpB,MAAtBigB,GADX+N,EACLpB,eADKoB,EACW/N,cAChB4N,EAAYzsB,EAAKZ,MAAjBqtB,QAKN,OAJG5N,GAAgBA,EAAajP,OAAS,GACrCiP,EAAapS,IAAI,SAACqH,EAAMpH,MAIxB9F,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUG,QAAS7I,EAAK0X,iBAAiB9Q,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OACvDzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACA+hB,oBAAqBrB,GACrBsB,YAAU,EACV3iB,MAAO,CAACuM,KAAM,OACd5N,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEV/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aACvB/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,MAApB,sBACwBmjB,EAAUA,EAAQ7c,OAAS,EADnD,KAGAhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYjB,QAAS7I,EAAK2X,YAAaxO,MAAO,CAACqB,MAAO,KAAMiL,IAAK,KAAMxN,SAAS,aAC5ErB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAGRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAChCtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACK2iB,GAAWA,EAAQ7c,OAAS,GAC7B6c,EAAQhgB,IAAI,SAACqH,EAAMpH,GAQf,OAPGmS,GAAgBA,EAAagO,UAAU,SAAAhC,GACtC,OAAQA,EAAI9gB,IAAM+J,EAAK/J,IAAQ8gB,EAAI9gB,KAAO+J,EAAK/J,MAC7C,EACF+J,EAAK2X,UAAW,EAEhB3X,EAAK2X,UAAW,EAGpB7kB,EAAA3B,EAAA4B,cAACwlB,GAAD,CAAYtB,QAASjX,EAAM1S,IAAKsL,EACpB8e,eAAgB,kBAAMxrB,EAAKpB,MAAM+tB,YAAY7Y,IAC7CkX,cAAc,EACdC,YAAY,YAvF5CjrB,EAAKZ,MAAQ,CACT0I,MAAM,EACN2kB,QAAS,GACTvqB,MAAO,IALIlC,6BAFGiH,aCwBX6lB,8MA5BXnmB,OAAS,WAAM,IAAA4W,EACyBvd,EAAKpB,MAAnCigB,EADKtB,EACLsB,aAAckO,EADTxP,EACSwP,YACdlT,EAAiBkT,EAAjBlT,MAAOF,EAAUoT,EAAVpT,MACb,OACI/S,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACKijB,GACDnmB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYkD,MAAO6R,GAAgBjY,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAAauV,EAAajP,OAA9C,cAC/B4G,OACmC,UAA/BuW,EAAYtT,UAAUtX,QACtByE,EAAA3B,EAAA4B,cAACmmB,GAAD,CAEInT,MAAOA,EACPF,MAAOA,EACPgT,YAAa,SAAC5B,GAAD,OAAa/qB,EAAKpB,MAAM+tB,YAAY5B,IACjDlM,aAAcA,MAK1BjY,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAAComB,GAAD,CACIvB,oBAAqB,SAACX,GAAD,OAAa/qB,EAAKpB,MAAM8sB,oBAAoBX,IACjElM,aAAcA,oCAxBH5X,kCCkB7BimB,eAEF,SAAAA,EAAYtuB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAunB,IACfltB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAynB,GAAApnB,KAAAH,KAAM/G,KAQVqH,kBAAoB,WAChBjG,EAAKpB,MAAMwE,cAVIpD,EAanB0X,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KAdP9H,EAiBnB2X,YAAc,WACVna,QAAQC,IAAI,gBACZuC,EAAKoG,SAAS,CAAE0B,MAAM,KAnBP9H,EAsBnBmtB,aAAe,SAACC,GAAa,IACnBC,EAAkBrtB,EAAKZ,MAAvBiuB,cACFC,EAAmB,GACnBD,GAAiBA,EAAczd,OAAS,GACxCyd,EAAcvP,QAAQ,SAACyP,GACfA,EAAOxjB,KAAOqjB,EAASrjB,IACvBujB,EAAiBruB,KAAKsuB,KAIlCD,EAAiBruB,KAAKmuB,GACtBptB,EAAKoG,SAAS,CAAEinB,cAAeC,KAjChBttB,EAoCnBwtB,gBAAkB,SAACJ,GAAa,IACtBC,EAAkBrtB,EAAKZ,MAAvBiuB,cACFC,EAAmB,GACnBD,GAAiBA,EAAczd,OAAS,GACxCyd,EAAcvP,QAAQ,SAACyP,GACfA,EAAOxjB,KAAOqjB,EAASrjB,IACvBujB,EAAiBruB,KAAKsuB,KAIlCvtB,EAAKoG,SAAS,CAAEinB,cAAeC,KA9ChBttB,EAkDnB4X,aAAe,WACXpa,QAAQC,IAAI,gBAAiBuC,EAAKZ,MAAMiuB,eADvB,IAOb3qB,EAAQ,CACR0Y,OAFkBpb,EAAKpB,MAArBmuB,YAEkBhjB,GAEpB0jB,SAAU,IAERJ,EAAkBrtB,EAAKZ,MAAvBiuB,cACHA,GAAiBA,EAAczd,OAAS,IACvCyd,EAAcvP,QAAQ,SAACsP,GACnB,IAAIM,EAAU,CAENjZ,QAAS2Y,EAAStO,UAAUrK,QAC5BxW,KAAMmvB,EAAStO,UAAU7gB,MAGjCyE,EAAM+qB,SAASxuB,KAAKyuB,KAGxB1tB,EAAKpB,MAAM+uB,kBAAkBjrB,KA1ElB1C,EA+EnB2G,OAAS,WAAM,IACL+b,EAAU1iB,EAAKpB,MAAf8jB,MAEFkL,GADJlL,EAAQA,GAAS,IACSiF,OAAO,SAACyF,GAC9B,OAAOA,EAAStO,UAAU7gB,KACrB2pB,cACAnnB,QAAQT,EAAKZ,MAAMyuB,WAAWjG,gBAAkB,IAMzD,OAHApqB,QAAQC,IAAI,gBAIRmJ,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQinB,MAAM,eAAe5qB,KAAK,SAAS6qB,cAAY,WAAWC,cAAY,mBAAmBC,gBAAc,QAAQC,gBAAc,mBAArI,iBAIJtnB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQinB,MAAM,2BAA2B5qB,KAAK,SAAS8J,MAAM,oCACzDnE,QAAS,kBAAM7I,EAAK4X,aAAa5X,EAAKpB,MAAM8D,SAC5CkE,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,SAcZzX,EAAA3B,EAAA4B,cAAA,OAAKkD,GAAG,kBAAkBjD,UAAU,OAIhCF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,iBACNP,MAAO7U,EAAKZ,MAAMyuB,WAClBxY,SAAU,SAACF,GAAD,OAAOnV,EAAKoG,SAAS,CAAEynB,WAAY1Y,EAAEG,OAAOT,SACtDU,OAAO,SACPjM,QAAQ,WACR6kB,WAAY,CACRC,eAAgBxnB,EAAA3B,EAAA4B,cAACwnB,GAAAppB,EAAD,CAAgBgD,SAAS,SAAQrB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,YAKjEzX,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACV8mB,GAAiBA,EAAche,OAAS,GACrCge,EAAcnhB,IAAI,SAAC2gB,EAAU1gB,GACzB,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACVsmB,EAAStO,UAAU7gB,MAExB2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,eACd+B,QAAS,kBAAM7I,EAAKmtB,aAAaC,KAAWxmB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,aAQ3EuP,GAA0C,IAAzBA,EAAche,QAC5BhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uBAAf,qBAQhBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cAEP9G,EAAKZ,MAAMiuB,eAAiBrtB,EAAKZ,MAAMiuB,cAAczd,OAAS,GAC9D5P,EAAKZ,MAAMiuB,cAAc5gB,IAAI,SAAC2gB,GAC1B,OACIxmB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACVsmB,EAAStO,UAAU7gB,MAExB2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,eACd+B,QAAS,kBAAM7I,EAAKwtB,gBAAgBJ,KAAWxmB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,YAQvEre,EAAKZ,MAAMiuB,eAAqD,IAApCrtB,EAAKZ,MAAMiuB,cAAczd,QACrDhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uBAAf,0BA3LxB9G,EAAKZ,MAAQ,CACT0I,MAAM,EACN+lB,WAAY,GACZR,cAAe,IALJrtB,6BAFKiH,aA+RtBmC,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAUVhD,eAPS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpCG,WAAY,kBAAMH,EAASG,QAGhBiR,CAA6C6Y,ICzTtDoB,8MAEF3nB,OAAS,WAAM,IACL4nB,EAAevuB,EAAKpB,MAApB2vB,WACFC,EAAW3R,KAEf,OACEjW,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACgB,YAAb2b,GACC5nB,EAAA3B,EAAA4B,cAAC4nB,GAAkBzuB,EAAKpB,OAE1BgI,EAAA3B,EAAA4B,cAAC6nB,GAADjpB,OAAAglB,OAAA,GACQzqB,EAAKpB,MADb,CAEIgc,YAAa2T,oCAbOtnB,aA8CrBqnB,IA1BSlU,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CACJhD,gBAAiB,UACjB3O,MAAOkD,EAAM0O,QAAQC,OAAOoU,OAE9BlU,KAAM,CACJrH,SAAU,MANQgH,CAQpBM,MACoBN,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CACJhD,gBAAiBzL,EAAM0O,QAAQC,OAAOC,MACtC9R,MAAOkD,EAAM0O,QAAQC,OAAOoU,OAE9BlU,KAAM,CACJrH,SAAU,MANQgH,CAQlBM,MAEmBN,qBAAW,SAAAxO,GAAK,MAAK,CAC1CqQ,KAAM,CACJ2S,qBAAsB,CACpBvX,gBAAiBzL,EAAM0O,QAAQuU,WAAWC,YAHzB1U,CAMrB2U,MACWT,ICmIAU,8MA/KXroB,OAAS,WAAM,IAAA4W,EACoBvd,EAAKpB,MAA9BmuB,EADKxP,EACLwP,YADKxP,EACQpW,QACnB3J,QAAQC,IAAI,WAAYsvB,GACxB,IAAIkC,EAAgBlC,EAAYtT,WAAasT,EAAYtT,UAAUyV,UAAYnC,EAAYtT,UAAUyV,SAASD,cAAiB,GAC3HE,EAAkBpC,GAAeA,EAAYtT,UAAUyV,UAAYnC,EAAYtT,UAAUyV,SAASC,eAAkBpC,EAAYtT,UAAUyV,SAASC,eAAiB,GACpKC,EAAarC,GAAeA,EAAYpT,MAASoT,EAAYpT,MAAQ,GACrE0V,EAAatC,GAAeA,EAAYlT,MAASkT,EAAYlT,MAAQ,GACrEyV,EAAevC,GAAeA,EAAYjT,QAAWiT,EAAYjT,QAAU,GAC3EyV,EAAgBxC,GAAeA,EAAY9G,SAAY8G,EAAY9G,SAAW,GAC9EuJ,EAAgBzC,GAAeA,EAAYtT,WAAasT,EAAYtT,UAAUG,SAAYmT,EAAYtT,UAAUG,SAAW,IAC3H6V,EAAmB1C,GAAeA,EAAYtT,WAAasT,EAAYtT,UAAUgW,gBAAmB1C,EAAYtT,UAAUgW,gBAAkB,IAC5IC,EAAa3C,GAAeA,EAAYtT,WAAasT,EAAYtT,UAAUiW,UAAalsB,EAAYupB,EAAYtT,UAAUiW,WAAa,IACvIC,EAAa5C,GAAeA,EAAYjO,WAAaiO,EAAYjO,UAAU7gB,KAAQ8uB,EAAYjO,UAAU7gB,KAAO,IAChH2xB,KAA2B7C,GAAeA,EAAYtT,UAAUyV,UAAYnC,EAAYtT,UAAUyV,SAASU,0BAA2B7C,EAAYtT,UAAUyV,SAASU,wBAKzK,OAHAR,EAAYA,IAAerC,GAAeA,EAAYtT,UAAasT,EAAYtT,UAAUK,QAAU,IAI/FlT,EAAA3B,EAAA4B,cAAA,YA4BqBD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACZF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAO0a,EACPla,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,iBAIxD,gBAAjB0a,GAAkC3oB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAC9CF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOua,EACP/Z,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,cAIxD,aAAjB0a,GAA+B3oB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAC3CF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOwa,EACPha,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,cAIxD,aAAjB0a,GAA+B3oB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAC3CF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,WACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOya,EACPja,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,gBAIzEjO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACZF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,2BACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,SACL4D,UAAU,eACV+N,MAAO2a,EACPna,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,iBAIxD,gBAAjB0a,GAAkC3oB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAC9CF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,sBACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,SACL4D,UAAU,eACV+N,MAAO4a,EACPpa,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,wBAI1EjO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,mBACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACfF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,eACd+N,MAAOsa,EACP9Z,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,oBAE7D,CAAC,SAAU,qBAAqBpI,IAAI,SAACqH,EAAMpH,GAC5C,OAAO9F,EAAA3B,EAAA4B,cAAA,UAAQzF,IAAKsL,EAAOmI,MAAOf,GAAOA,QAoBjDlN,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,kBACPlnB,EAAA3B,EAAA4B,cAAA,SAAOinB,MAAM,2BAAb,6BAGAlnB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,wBAAwB5D,KAAK,WACtCyoB,QAASiE,EACTva,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOqW,QAAS,gCAI1D,gBAAjB4D,GAAkC3oB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAC9CF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,2BAAjB,wBACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOoa,EACP5Z,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,qBAI1EjO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAGnBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,0BAAf,cACgBtD,EAAYksB,GAAW,GADvC,OACkDC,GAIlD/oB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC3CG,QAAS,kBAAM7I,EAAKpB,MAAMkxB,yBAD9B,yCAvKU7oB,aCT5B8oB,eACF,SAAAA,EAAYnxB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAoqB,IACf/vB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsqB,GAAAjqB,KAAAH,KAAM/G,KAMV6Y,aAAe,SAAC/N,EAAOmL,GACnB7U,EAAKoG,SAAS,CAAEyO,WARD7U,EAWnB2G,OAAS,WAAM,IACLkO,EAAU7U,EAAKZ,MAAfyV,MACNA,EAAQ7U,EAAKpB,MAAMoxB,kBAAoBnb,EACvCrX,QAAQC,IAAI,yBAA0BoX,GAH3B,IAAA0I,EAI2Cvd,EAAKpB,MAA/CigB,GAJDtB,EAIL0S,KAJK1S,EAICsB,cAAckO,EAJfxP,EAIewP,YAJfxP,EAI4BgR,WACvC,OACA3nB,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQ7B,SAAS,UACbrB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMR,QAAQ,YAAYuL,MAAOA,EACzBQ,SAAUrV,EAAKyX,cACnB7Q,EAAA3B,EAAA4B,cAACqpB,GAAD,CAAS9a,MAAM,YAAY5U,KAAK,UAChCoG,EAAA3B,EAAA4B,cAACqpB,GAAD,CAAS9a,MAAM,aAAa5U,KAAK,UACjCoG,EAAA3B,EAAA4B,cAACqpB,GAAD,CAAS9a,MAAM,UAAU5U,KAAK,YAG3B,IAAVqU,GACDjO,EAAA3B,EAAA4B,cAACspB,GAAD,KACIvpB,EAAA3B,EAAA4B,cAACupB,GAAD,CACYjpB,QAASnH,EAAKpB,MAAMuI,QACpB0X,aAAcA,EACd8N,YAAc,SAAC5B,GAAD,OAAa/qB,EAAKpB,MAAM4sB,eAAeT,IACrDW,oBAAsB,SAACX,GAAD,OAAa/qB,EAAKpB,MAAM8sB,oBAAoBX,IAClEgC,YAAaA,KAGlB,IAAVlY,GACDjO,EAAA3B,EAAA4B,cAACspB,GAAD,KACIvpB,EAAA3B,EAAA4B,cAACwpB,GACOrwB,EAAKpB,QAIN,IAAViW,GACDjO,EAAA3B,EAAA4B,cAACspB,GAAD,KACIvpB,EAAA3B,EAAA4B,cAACypB,GAAD,CACQnpB,QAASnH,EAAKpB,MAAMuI,QACpB4lB,YAAaA,EACbhW,cAAe,SAACwC,EAAKC,GAAN,OAAgBxZ,EAAKpB,MAAM2xB,sBAAsBhX,EAAKC,IACrEsW,qBAAsB,kBAAM9vB,EAAKpB,MAAMkxB,6BA/CvD9vB,EAAKZ,MAAQ,CACTyV,MAAOjW,EAAMoxB,kBAAoB,GAHtBhwB,6BADOiH,aAyDxBupB,GAAe,SAAC5xB,GAClB,OACEgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYoR,UAAU,MAAM/R,MAAO,CAAE+M,QAAS,KAC3CtX,EAAM6xB,WAKTC,GAAU,SAAC9xB,GACb,OAAOgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAADrE,OAAAglB,OAAA,CAAK5hB,QAAS,SAAAa,GAAK,OAAIA,EAAM8K,mBAAsB5V,KAS/CmxB,UC5DTY,eAEF,SAAAA,EAAY/xB,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAgrB,IACf3wB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkrB,GAAA7qB,KAAAH,KAAM/G,KAOVqH,kBAAoB,WAChBjG,EAAKpB,MAAML,WAAWyB,EAAKpB,MAAM7B,SACjCiD,EAAKjB,UAVUiB,EAanB0mB,0BAA4B,SAACC,EAAUC,GACH,KAA7BD,EAASF,iBAA0BE,EAASF,iBAdhCzmB,EAkBnBjB,OAAS,WAAM,IACLK,EAAUY,EAAKpB,MAAME,SAArBM,MACHA,IACCY,EAAKpB,MAAMgyB,aAAaxxB,EAAMgc,QAC9Bpb,EAAKpB,MAAMmrB,UAAU3qB,EAAMgc,OAAQpb,EAAKpB,MAAM7B,SACrCqD,KAAK,WACsC,aAArCJ,EAAKpB,MAAMiyB,aAAa5K,SACvBjmB,EAAKpB,MAAMkyB,iBAAiB1xB,EAAMgc,QAGlCpb,EAAKpB,MAAMmyB,mBAAmB3xB,EAAMgc,YA5BzCpb,EAkCnBgxB,UAAY,SAACtuB,GACT1C,EAAKpB,MAAMmb,QAAQrX,EAAO1C,EAAKpB,MAAMoX,WAnCtBhW,EAsCnBwrB,eAAiB,SAACT,GACdvtB,QAAQC,IAAI,eAAgBstB,GADF,IAEpB8F,EAAiB7wB,EAAKpB,MAAtBiyB,aACN7wB,EAAKpB,MAAMqyB,aAAalG,EAAS/qB,EAAKpB,MAAMiyB,cACnCzwB,KAAK,SAAClD,GACH8C,EAAKpB,MAAMgyB,aAAaC,EAAa9mB,IACpC3J,KAAK,WACFJ,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAY,kBAAA7iB,OAAoBa,EAAKpB,MAAMigB,aAAe7e,EAAKpB,MAAMigB,aAAajP,OAAS,EAA/E,gBA/CjB5P,EAqDnB0rB,oBAAsB,SAACX,GAAY,IACzB8F,EAAiB7wB,EAAKpB,MAAtBiyB,aACN7wB,EAAKpB,MAAMuyB,kBAAkBpG,EAAS/qB,EAAKpB,MAAMiyB,cACpCzwB,KAAK,SAAClD,GACH8C,EAAKpB,MAAMgyB,aAAaC,EAAa9mB,IACpC3J,KAAK,WACFJ,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAY,kBAAA7iB,OAAoBa,EAAKpB,MAAMigB,aAAe7e,EAAKpB,MAAMigB,aAAajP,OAAS,EAA/E,gBA7DrB5P,EAmEnBoxB,UAAY,WACRpxB,EAAKpB,MAAMorB,YAAYhqB,EAAKpB,MAAMiyB,cAClC7wB,EAAKjB,UArEUiB,EAwEnBqxB,0BAA4B,SAAC9X,EAAKC,GAC9BxZ,EAAKpB,MAAM0yB,oBAAoB/X,EAAKC,EAAOxZ,EAAKpB,MAAMiyB,eAzEvC7wB,EA4EnBuxB,mBAAqB,WACjBvxB,EAAKpB,MAAM4yB,mBAAmBxxB,EAAKpB,MAAMiyB,cACxCzwB,KAAK,SAAClD,GACH8C,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,sBAjFPhiB,EAsFnByxB,YAAc,SAAC/uB,GACX1C,EAAKpB,MAAMsa,WAAWxW,GACjBtC,KAAK,WACFJ,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,qBAElBhiB,EAAKpB,MAAMmyB,mBAAmBruB,EAAM0Y,UAEvC/a,MAAM,SAACC,GACJN,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,iDAlGXhiB,EAuGnB2b,gBAAkB,SAAClO,GAAe,IACxBojB,EAAiB7wB,EAAKpB,MAAtBiyB,aACN7wB,EAAKpB,MAAMqa,gBAAgBxL,GAC1BrN,KAAK,WACFJ,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,iCAElBhiB,EAAKpB,MAAMmyB,mBAAmBF,EAAa9mB,MAE9C1J,MAAM,SAACC,GACJN,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,iDApHPhiB,EAyHnB2G,OAAS,WAAM,IAAA4W,EAC+Cvd,EAAKpB,MAAzDiyB,EADKtT,EACLsT,aAAchS,EADTtB,EACSsB,aAAc0P,EADvBhR,EACuBgR,WAAYpnB,EADnCoW,EACmCpW,QAC3C0pB,GAAgBA,EAAahS,cAC5BrhB,QAAQC,IAAI,eAAeozB,GAHpB,IAKLzxB,EAAUY,EAAKpB,MAAME,SAArBM,MACF4wB,EAAoB5wB,GAASA,EAAM4wB,iBAAoB5wB,EAAM4wB,iBAAmB,EACpF,OACIppB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,KACrB6c,GAAgBjqB,EAAA3B,EAAA4B,cAACsP,GAAD,MACjB0a,GACDjqB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAY0M,OACR5P,EAAA3B,EAAA4B,cAAA,WACmC,UAAlCgqB,EAAapX,UAAUtX,QACxB0uB,EAAapX,UAAUoF,cACvBgS,EAAapX,UAAUoF,aAAajP,OAAS,GAE7ChJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQkD,MAAM,UAAUtE,MAAM,UAAUoH,KAAK,QACrCjH,QAAS7I,EAAKoxB,WACrBxqB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OACDzX,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMjE,MAAM,UAAUkE,GAAE,GAAAzN,OAA4B,YAAvB0d,KAAmC,UAAY,WACxEjW,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAIRrR,MAAO6jB,EAAapX,UAAUC,SAC7BgY,UAA2C,UAAhCb,EAAapX,UAAUtX,OAAmB,YAAc,UAEpEyE,EAAA3B,EAAA4B,cAAC8qB,GAAD,CACIxqB,QAASA,EACT8oB,KAAMA,GACND,iBAAkBA,EAClBxE,eAAgB,SAACT,GAAD,OAAa/qB,EAAKwrB,eAAeT,IACjDW,oBAAsB,SAACX,GAAD,OAAa/qB,EAAK0rB,oBAAoBX,IAC5DlM,aAAcA,EACd0P,WAAYA,EACZxB,YAAa8D,EACbN,sBAAuB,SAAChX,EAAKC,GAAN,OAAgBxZ,EAAKqxB,0BAA0B9X,EAAKC,IAC3EsW,qBAAsB,kBAAM9vB,EAAKuxB,sBACjC5D,kBAAmB,SAACjrB,GAAD,OAAW1C,EAAKyxB,YAAY/uB,IAC/CiZ,gBAAiB,SAAClO,GAAD,OAAgBzN,EAAK2b,gBAAgBlO,OAI9D7G,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKZ,MAAM8xB,UAAWvZ,YAAa,kBAAM3X,EAAKoG,SAAS,CAAC8qB,WAAW,KAC9ElP,aAAchiB,EAAKZ,MAAM4iB,kBAvKrChiB,EAAKZ,MAAQ,CACT8xB,WAAW,EACXlP,aAAc,IAJHhiB,6BAFYgH,IAAMC,WAqMnCgpB,GAAO,CACT,CAAC7uB,IAAK,EAAGkpB,QAAS,qEAClB,CAAClpB,IAAK,EAAGkpB,QAAS1jB,EAAA3B,EAAA4B,cAACupB,GAAD,OAClB,CAAChvB,IAAK,EAAGkpB,QAASsH,KAEhBA,GAAY,SAACllB,GACf,MAAO,MAAMA,GAEF2H,eA3BS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMyyB,qBAEc,SAAA5uB,GAAQ,MAAK,CACpC1E,WAAY,SAACxB,GAAD,OAAakG,GVtLFzE,EUsLsBzB,EVtLL,SAAAkG,GACxClG,GAAUyB,KADY,IAACA,GUuLvByyB,aAAc,SAAClG,EAAS/Q,GAAV,OAAwB/W,EV/Dd,SAAC8nB,EAAS/Q,GAAV,OAAwB,SAAA/W,GAChD,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAExCiZ,EAAUP,UAAUoF,eACrB7E,EAAUP,UAAUoF,aAAe,IAEzB7E,EAAUP,UAAUoF,aAAlC,IACIiT,EAAc9X,EAAUP,UAAUoF,aAAagO,UAAU,SAAA/Y,GAAI,OAAIA,EAAK/J,KAAOghB,EAAQhhB,UACrEgoB,IAAhBD,GAA6BA,GAAe,IAI5C9X,EAAUP,UAAUoF,aAAa5f,KAAK,CAClC+yB,MAAOjH,EAAQhhB,KAGvB3H,EAAWQ,WAAW7C,EAAKia,EAAWjd,IACjCqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA9JgB,uBA+JhBC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJT,EAAOS,SUqC4B2wB,CAAalG,EAAS/Q,KACrEmX,kBAAmB,SAACpG,EAAS/Q,GAAV,OAAwB/W,EVhCd,SAAC8nB,EAAS/Q,GAAV,OAAwB,SAAA/W,GACrD,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAExCiZ,EAAUP,UAAUoF,eACrB7E,EAAUP,UAAUoF,aAAe,IAEzB7E,EAAUP,UAAUoF,aAAlC,IACIiT,EAAc9X,EAAUP,UAAUoF,aAAagO,UAAU,SAAA/Y,GACzD,OAAOA,EAAKke,QAAUjH,EAAQhhB,UAEdgoB,IAAhBD,GAA6BA,GAAe,GAC5Ct0B,QAAQC,IAAR,iBAAA0B,OAA6B4rB,EAAQhhB,KACrCiQ,EAAUP,UAAUoF,aAAaoT,OAAOH,EAAa,GAMzD1vB,EAAWQ,WAAW7C,EAAKia,EAAWjd,IACjCqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA/LqB,4BAgMrBC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ9C,QAAQC,IAAI,kCAAmC6C,GAC/CT,EAAOS,MAfX9C,QAAQC,IAAR,kCAAA0B,OAA8C4rB,EAAQhhB,QUgBVonB,CAAkBpG,EAAS/Q,KAC/EgQ,YAAa,SAAChQ,GAAD,OAAe/W,EAAS+mB,GAAYhQ,KACjD+P,UAAW,SAAC3O,EAAQre,GAAT,OAAqBkG,EAAS8mB,GAAU3O,KACnDwV,aAAc,SAACxV,GAAD,OAAYnY,EVvHF,SAACmY,GAAD,OAAY,SAAAnY,GACpC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAhB,0BAAA5B,OAA6Dic,GACvEhZ,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAtFmB,0BAuFnBC,QAASjG,EAAIG,OAEjBuC,GAAQ,KACTS,MAAM,SAACC,GACN2C,EAAS,CACLC,KA3FgB,uBA4FhBC,QAAS7C,IAEbT,EAAOS,QUwGgBswB,CAAaxV,KAChD2V,mBAAoB,SAAC3V,GAAD,OAAYnY,EVpGF,SAACmY,GAAD,OAAY,SAAAnY,GAC1C,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAhB,gCAAA5B,OAAmEic,GAC7EhZ,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAvG6B,gCAwG7BC,QAASjG,EAAIG,SAElBgD,MAAM,SAACC,GACN2C,EAAS,CACLC,KA3G0B,6BA4G1BC,QAAS7C,OUyFoBywB,CAAmB3V,KAC5D0V,iBAAkB,SAAC1V,GAAD,OAAYnY,EVrFF,SAACmY,GAAD,OAAY,SAAAnY,GACxC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAhB,8BAAA5B,OAAiEic,GAC3EhZ,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAvH6B,gCAwH7BC,QAASjG,EAAIG,SAElBgD,MAAM,SAACC,GACN2C,EAAS,CACLC,KA3H0B,6BA4H1BC,QAAS7C,OU0EkBwwB,CAAiB1V,KACxDkW,oBAAqB,SAAC/X,EAAKC,EAAO9W,GAAb,OAAuBO,EV1Lb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAMtD,OALGP,GAASA,EAAM+W,YACV/W,EAAM+W,UAAUyV,WAChBxsB,EAAM+W,UAAUyV,SAAW,KAG5B1V,GAEH,IAAK,eAED9W,EAAM+W,UAAUyV,SAASD,aAAe1V,EACxCtW,EAAS,CACLC,KAvB0B,6BAwB1BC,QAAST,IAEb,MAEJ,IAAK,iBAEDA,EAAM+W,UAAUyV,SAASC,eAAiB5V,EAC1CtW,EAAS,CACLC,KAhC0B,6BAiC1BC,QAAST,IAEb,MAEJ,IAAK,0BAEDA,EAAM+W,UAAUyV,SAASU,wBAA0BrW,EACnDtW,EAAS,CACLC,KAzC0B,6BA0C1BC,QAAST,MU2JgC4uB,CAAoB/X,EAAKC,EAAO9W,KACrF8uB,mBAAoB,SAACxX,GAAD,OAAe/W,EViBL,SAAC+W,GAAD,OAAe,SAAA/W,GAC7C,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAE7B,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CqB,EAAWQ,WAAW7C,EAAKia,EAAWjd,IACjCqD,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA7N4B,+BA8N5BC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KApO4B,+BAqO5BC,QAAS7C,IAEbT,EAAOS,QUlC6BkxB,CAAmBxX,KAC/Dd,WAAY,SAACxW,GAAD,OAAWO,EAASiW,GAAWxW,KAC3CuW,gBAAiB,SAACxL,GAAD,OAAgBxK,EAASgW,GAAgBxL,KAC1DsX,cAAe,kBAAM9hB,EVqCU,SAAAA,GAC/BA,EAAS,CACLC,KA7OsB,sBUuM1BiiB,aAAc,kBAAMliB,EVyCU,SAAAA,GAC9BA,EAAS,CACLC,KAjPqB,uBUgNdmR,CAA6Csc,sLC3G7CuB,WAlGS,SAACtzB,GAAU,IAAAuzB,EAEqBvzB,EAAM6xB,SADhD2B,EADqBD,EACrBC,cAAeC,EADMF,EACNE,oBAAqBC,EADfH,EACeG,YAAa5vB,EAD5ByvB,EAC4BzvB,MACnD6vB,EAFuBJ,EAEvBI,kBAAmBC,EAFIL,EAEJK,qBAGvB,OACI5rB,EAAA3B,EAAA4B,cAAC4rB,GAAAxtB,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC6rB,GAAAztB,EAAD,CAAuB0tB,WAAY/rB,EAAA3B,EAAA4B,cAAC+rB,GAAA3tB,EAAD,OACnC2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,MAApB,mBAEJ1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,IAEtBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,aAApB,iBAIR1C,EAAA3B,EAAA4B,cAACgsB,GAAA5tB,EAAD,KACI2B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVsrB,GACDxrB,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KAOIjM,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACisB,GAAA,OAAD,CACQC,YAAaR,EACbS,iBAAiB,gBACjBC,iBAAiB,gBACjBC,gBAAgB,eAEhBC,oBAAqBX,KAGjC5rB,EAAA3B,EAAA4B,cAACusB,GAAAnuB,EAAD,CAAkBkE,MAAOC,GAAOwN,YAC5Byc,QACAzsB,EAAA3B,EAAA4B,cAACysB,GAAAruB,EAAD,CAEIoQ,SAAW,SAACF,GAAD,OAAOkd,EAAoBld,EAAEG,OAAOqW,QAAS,YAAayG,IACrEvd,MAAOud,EAAc7H,YAGzBnV,MAAM,iBAKlBxO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAACmlB,GAAD,CAAe9B,QAASxnB,EAAM0oB,SAASlB,aAmCnDtjB,EAAA3B,EAAA4B,cAAC0F,GAAAtH,EAAD,MACA2B,EAAA3B,EAAA4B,cAAC0sB,GAAAtuB,EAAD,KACA2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,WAAWwG,KAAK,QAAQpH,MAAM,UAAUG,QAAU,kBAAMypB,EAAYF,KAApF,WAQVhpB,GAAS,CACXwN,YAAa,CACTrF,MAAO,QC9GTiiB,GAAkB,CACpB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAGhDC,eAMF,SAAAA,EAAY70B,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA8tB,IACjBzzB,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAguB,GAAA3tB,KAAAH,KAAM/G,KALRQ,MAAQ,CACJ0I,MAAM,EACN4rB,IAAK,IAEU1zB,EAUjByX,aAAe,SAAAxZ,GAAI,OAAI,SAAAyL,GAErB,OAAOzL,GAEL,IAAK,MAEH+B,EAAKoG,SAAS,CACZstB,IAAKhqB,EAAM4L,OAAOT,QAEpB,MAEF,IAAK,MAEH7U,EAAKoG,SAAS,CACZutB,IAAKjqB,EAAM4L,OAAOT,WAxBT7U,EAgCnB0X,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KAjCP9H,EAoCnB2X,YAAc,WACV3X,EAAKoG,SAAS,CAAE0B,MAAM,KArCP9H,EAwCnB4X,aAAe,WACbpa,QAAQC,IAAI,iBACZuC,EAAK2X,cACL3X,EAAKpB,MAAMiZ,mBAAmB7X,EAAKZ,MAAMs0B,IAAK1zB,EAAKZ,MAAMu0B,MA3CxC3zB,EA8CnB2G,OAAS,WACT,OACIC,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,WAAWT,QAAS7I,EAAK0X,iBAAzC,qBAA6E1X,EAAKZ,MAAMs0B,IAAxF,MAAgG1zB,EAAKZ,MAAMu0B,KAC3G/sB,EAAA3B,EAAA4B,cAACkR,GAAA9S,EAAD,CACE+S,sBAAoB,EACpBC,sBAAoB,EACpBnQ,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACqR,GAAAjT,EAAD,gCACA2B,EAAA3B,EAAA4B,cAACsR,GAAAlT,EAAD,KACE2B,EAAA3B,EAAA4B,cAAA,YACID,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,WACFD,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAakE,MAAOC,GAAOwN,YAAatN,QAAQ,YAC9C1C,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CAAYoT,QAAQ,cAApB,WACAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACE4P,MAAO7U,EAAKZ,MAAMs0B,IAClBre,SAAUrV,EAAKyX,aAAa,OAC5Bc,MAAO3R,EAAA3B,EAAA4B,cAAC2R,GAAAvT,EAAD,CAAO8E,GAAG,gBAElBypB,GAAgB/mB,IAAI,SAACqH,EAAMpH,GAC1B,OAAO9F,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,GAAOA,OAI/ClN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAakE,MAAOC,GAAOwN,YAAatN,QAAQ,YAC9C1C,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CAAYoT,QAAQ,cAApB,WACAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACE4P,MAAO7U,EAAKZ,MAAMu0B,IAClBte,SAAUrV,EAAKyX,aAAa,OAC5Bc,MAAO3R,EAAA3B,EAAA4B,cAAC2R,GAAAvT,EAAD,CAAO8E,GAAG,gBAElBypB,GAAgB/mB,IAAI,SAACqH,EAAMpH,GAC1B,OAAO9F,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,GAAOA,SAMnDlN,EAAA3B,EAAA4B,cAAC6R,GAAAzT,EAAD,KACE2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQ4D,QAAS7I,EAAK2X,YAAajP,MAAM,WAAzC,UAGA9B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQ4D,QAAS7I,EAAK4X,aAAclP,MAAM,WAA1C,UAzFN1I,EAAKZ,MAAQ,CACX0I,MAAM,EACN4rB,IAAK,EACLC,IAAK,IALU3zB,6BANQiH,aA0GzBmC,GAAS,CAETwN,YAAa,CACXrF,MAAM,MACN9G,WAAW,OAIJgpB,MCpDAG,GAtEQ,SAACh1B,GAAU,IACxB8D,EAAoB9D,EAApB8D,MAAoB9D,EAAboX,SAEb,OACIpP,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,WAGAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAGVpE,GAASA,EAAM0oB,UAChBxkB,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,2BAAjB,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+sB,UAAQ,EACRhf,MAAO,eAIvBjO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,2BAAjB,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOnS,EAAM0oB,SAASE,SACtBjW,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAYjW,EAAM8D,YAIvFkE,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOgpB,IAAI,cAAc/oB,UAAU,2BAAnC,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACfF,EAAA3B,EAAA4B,cAAA,UAAQinB,MAAM,eACNjZ,MAAOnS,EAAM0oB,SAASzR,MACtBtE,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,SAEvE9D,EAAMkqB,QAAUlqB,EAAMkqB,OAAOrc,IAAI,SAACuc,EAAWtc,GACtC,IAAIoH,EAAOkV,EAAUC,WACrB,OAAOriB,EAAA3B,EAAA4B,cAAA,UAAQzF,IAAKsL,EAAOmI,MAAOf,EAAK6F,OAAQ7F,EAAK6F,YAKpE/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,2BAAjB,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAACisB,GAAA,OAAD,CACIC,YAAan0B,EAAMk1B,oBACnBd,iBAAiB,gBACjBC,iBAAiB,gBACjBC,gBAAgB,eAChBC,oBAAqBv0B,EAAMm1B,gCAIvCntB,EAAA3B,EAAA4B,cAACmtB,GAAD,KACKp1B,OCmHnBwK,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAGV4c,GArKA,SAACr1B,GAAU,IACZ8D,EAAoB9D,EAApB8D,MAAOsT,EAAapX,EAAboX,SAOb,MAA4B,YAAzB6G,KAEKjW,EAAA3B,EAAA4B,cAACqtB,GAAmBt1B,GAKxBgI,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,MACFvC,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GAASA,EAAM0oB,UACAxkB,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYsM,OACRxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAACyP,GAAArR,EAAD,OAGRuR,OACI5P,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQyD,MAAM,UAAUoH,KAAK,QAAQxG,QAAQ,WACrCT,QAAS,kBAAMjK,EAAM7B,QAAQo3B,WACjCvtB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OAGRrR,MAAOgJ,EAAW,WAAa,UAC/B0b,UAAU,6BAEV9qB,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CAAYoT,QAAQ,4BAApB,YAGAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACIoQ,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAYjW,EAAM8D,QACvEmS,MAAOnS,EAAM0oB,SAASnF,SACtB1N,MACA3R,EAAA3B,EAAA4B,cAACutB,GAAAnvB,EAAD,CACIme,WAAY,GACZnlB,KAAK,WACL8L,GAAG,8BAGPnD,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU4P,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAECjI,EAAM+mB,YAAc/mB,EAAM+mB,WAAW/V,OAAS,GAC3ChR,EAAM+mB,WAAWlZ,IAAI,SAACwZ,EAAUvZ,GAC5B,IAAIoH,EAAOmS,EAASnP,cACxB,OACIlQ,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,EAAK9G,OAAQ8G,EAAK9G,WAK/DpG,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,QACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM0oB,SAASE,SACtBjW,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAYjW,EAAM8D,QACvE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACuR,GAAAnT,EAAD,CACIoT,QAAQ,yBADZ,SAIAzR,EAAA3B,EAAA4B,cAACyR,GAAArT,EAAD,CACIoQ,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,QACpEmS,MAAOnS,EAAM0oB,SAASzR,MACtBpB,MACA3R,EAAA3B,EAAA4B,cAACutB,GAAAnvB,EAAD,CACIme,WAAY,GACZnlB,KAAK,QACL8L,GAAG,2BAGPnD,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU4P,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAECjI,EAAMkqB,QAAUlqB,EAAMkqB,OAAOrc,IAAI,SAACuc,EAAWtc,GAC1C,IAAIoH,EAAOkV,EAAUC,WACrB,OACIriB,EAAA3B,EAAA4B,cAAC4R,GAAAxT,EAAD,CAAU7D,IAAKsL,EAAOmI,MAAOf,EAAK6F,OAAQ7F,EAAK6F,WAK/D/S,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACwtB,GAAD,CACIxc,mBAAqB,SAAC6b,EAAKC,GAAN,OAhG1B,SAACD,EAAKC,GAC7B/0B,EAAMmY,cAAc2c,EAAK,oBAAqB90B,EAAM8D,OACpD9D,EAAMmY,cAAc4c,EAAK,oBAAqB/0B,EAAM8D,OA8FWmV,CAAmB6b,EAAKC,OAEnE/sB,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,QACNlS,KAAK,SACL4D,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM0oB,SAAS1mB,MACtB2Q,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAASjW,EAAM8D,QACpE6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAKtChQ,EAAA3B,EAAA4B,cAACisB,GAAA,OAAD,CACIC,YAAan0B,EAAMk1B,oBACnBd,iBAAiB,gBACjBC,iBAAiB,gBACjBC,gBAAgB,eAEpBC,oBAAqBv0B,EAAMm1B,+BAgBnCntB,EAAA3B,EAAA4B,cAACmtB,GAAD,KACKp1B,IAGTgI,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,KACA2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACvCG,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SAD7C,cCgHd4xB,GAAY,SAACC,EAAgBxO,EAAY0G,GAA7B,OAAyC,SAAAxpB,GAC/D,GAAGwpB,GAAWA,EAAQ7c,OAAS,EAAG,CAC9B,IAAIkX,EAAqB2F,EAUzB,OATkB,QAAf1G,GACC9iB,EAAS,CACLC,KAtRkB,qBAuRlBC,QAAS,CACL2jB,qBACAf,gBAILwO,GACH,IAAK,gBACDzN,EAAqB2F,EAAQ9E,OAAO,SAACoD,GACjC,IAAIjX,EAAOiX,EAAQK,SACnB,OA1CI,SAACtX,EAAMiS,GAC3B,OAAQjS,EAAKwX,UACLvF,GACAjS,EAAKwX,SAAS1D,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,EAuCjD4M,CAAgB1gB,EAAMiS,IApCvB,SAACjS,EAAMiS,GAC9B,OAAQjS,EAAKoD,aACL6O,GACAjS,EAAKoD,YAAY0Q,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,EAkCpD6M,CAAmB3gB,EAAMiS,KAGrC,MAEJ,IAAK,QACDe,EAAqB2F,EAAQ9E,OAAO,SAACoD,GAEjC,OAvCC,SAACjX,EAAMiS,GACxB,IAAI2O,EAAa3O,EAAWxB,MAAM,KAClC,OAAQzQ,EAAK6F,OACL+a,GACAA,EAAWC,SAAS7gB,EAAK6F,OAmCTib,CADG7J,EAAQK,SACQrF,KAE/B,MAEJ,IAAK,WACDvoB,QAAQC,IAAI,kBAAmBsoB,GAC/Be,EAAqB2F,EAAQ9E,OAAO,SAACoD,GAEjC,OAvCI,SAACjX,EAAMiS,GAC3B,OAAQjS,EAAKmS,UACLF,GACAjS,EAAKmS,SAAS2B,cAAcnnB,QAAQslB,EAAW6B,gBAAkB,EAoCjDiN,CADG9J,EAAQK,SACWrF,KAKvCe,GAAsBA,EAAmBlX,OAAS,EACjD3M,EAAS,CACLC,KAzTkB,qBA0TlBC,QAAS,CACL2jB,qBACAf,gBAKR9iB,EAAS,CACLC,KAlUkB,qBAmUlBC,QAAS,CACL2jB,mBAAoB,GACpBf,qBAMZ9iB,EAAS,CACLC,KA5UsB,qBA6UtBC,QAAS,CACL2jB,mBAAoB,GACpBf,kBAgDH+O,GAAY,SAACC,GAAD,OAAe,SAAA9xB,GACpCA,EAAS,CACLC,KArXuB,oBAuX3B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,aAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH,IAAIiG,EAAU,CACV9F,KAAMH,EAAIG,KACVmF,QAAS,6BAEVuyB,IACC5xB,EAAQX,QAAU,4BAEtBS,EAAS,CACLC,KAjYiB,oBAkYjBC,QAASA,MAGhB9C,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KA1YU,iBA2YVC,QAAS7C,EAAI+C,gDCxZ3B2xB,eAEF,SAAAA,EAAYp2B,GAAM,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAqvB,IACdh1B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuvB,GAAAlvB,KAAAH,KAAM/G,KAOVm1B,4BAA8B,SAACD,GAC3B9zB,EAAKoG,SAAS,CACV0tB,wBAEJ,IAAIz2B,EAAO43B,KAAYC,wBAAapB,EAAoBqB,sBACxDn1B,EAAKpB,MAAMw2B,sBAAsB/3B,EAAM,cAAe2C,EAAKpB,MAAMy2B,cAbnDr1B,EAgBlBwyB,qBAAuB,SAACD,GACpBvyB,EAAKoG,SAAS,CACVmsB,sBAEJ,IAAIl1B,EAAO43B,KAAYC,wBAAa3C,EAAkB4C,sBACtDn1B,EAAKpB,MAAM02B,yBAAyBj4B,EAAM,UAAW2C,EAAKpB,MAAMwzB,gBArBlDpyB,EAwBlBiG,kBAAoB,WAChBjG,EAAKjB,UAzBSiB,EA4BlBwmB,oBAAsB,WACgB,KAA/BxmB,EAAKpB,MAAM6nB,iBACVzmB,EAAKpB,MAAMya,mBA9BDrZ,EAkClBjB,OAAS,WACLiB,EAAKpB,MAAMya,kBACXrZ,EAAKpB,MAAMoE,eApCGhD,EAuClBu1B,SAAW,SAAC7yB,GAAU,IACZtD,EAAUY,EAAKpB,MAAME,SAArBM,MAEHA,GAASA,EAAMyrB,MACH,EACX7qB,EAAKpB,MAAM42B,UAAU9yB,GAChBtC,KAAK,SAAClD,GACH8C,EAAKpB,MAAM7B,QAAQkC,KAAK,YAIhCe,EAAKpB,MAAMq1B,OAAOvxB,GACTtC,KAAK,SAAClD,GACH8C,EAAKpB,MAAM7B,QAAQkC,KAAK,YApD1Be,EAyDlB2G,OAAS,WAAM,IACLvH,EAAUY,EAAKpB,MAAME,SAArBM,MACFyrB,EAAM,KACPzrB,GAASA,EAAMyrB,MACdA,EAAMzrB,EAAMyrB,KAJL,IAAA9V,EAMsC/U,EAAKZ,MAAhD00B,EANK/e,EAML+e,oBAAqBvB,EANhBxd,EAMgBwd,kBAC3B,OACI3rB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnBpN,EAAA3B,EAAA4B,cAAC4uB,GAAD,CACIvgB,SAAW,SAACxS,GAAD,OAAW1C,EAAKu1B,SAAS7yB,IACpC4vB,YAAc,SAAC5vB,GAAD,OAAW1C,EAAKpB,MAAM82B,gBAAgBhzB,EAAO1C,EAAKpB,MAAMy2B,cAEtE3yB,MAAOmoB,GAAY7qB,EAAKpB,MAAMy2B,YAC9B1P,WAAY3lB,EAAKpB,MAAM+mB,WACvBmD,OAAQ9oB,EAAKpB,MAAMkqB,OACnBsJ,cAAepyB,EAAKpB,MAAMwzB,cAC1Bpc,WAAU6U,EACV9T,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMw2B,sBAAsB7b,EAAKC,EAAO9W,IACpF2vB,oBAAsB,SAAC9Y,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM02B,yBAAyB/b,EAAKC,EAAO9W,IAC7F3F,QAASiD,EAAKpB,MAAM7B,QACpB+2B,oBAAqBA,EACrBC,4BAA6B/zB,EAAK+zB,4BAClCxB,kBAAmBA,EACnBC,qBAAsBxyB,EAAKwyB,0BAhF3CxyB,EAAKZ,MAAQ,CACT00B,oBAAqB6B,eAAYC,cACjCrD,kBAAmBoD,eAAYC,eAJrB51B,6BAFKgH,IAAMC,WA6GlBoN,eAlBS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMy2B,aAEc,SAAA5yB,GAAQ,MAAK,CACpCgxB,OAAQ,SAACvxB,EAAOsT,GAAR,OAAqB/S,GDmDV6yB,ECnD0BpzB,EDmDb,SAAAO,GAChC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzBoD,EAAS,CACLC,KA3JiB,kBA6JrB,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,MAC7CqB,EAAWK,SAAS1C,EAAK+1B,GACpB11B,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAhKW,kBAiKXC,QAASjG,EAAIG,SAGpB+C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAxKQ,eAyKRC,QAAS7C,IAEbT,EAAOS,UArBD,IAACw1B,GClDnBJ,gBAAiB,SAAChzB,EAAOozB,GAAR,OAAqB7yB,ED8BX,SAAC8yB,EAAaD,GAAd,OAA2B,SAAA7yB,GACtD,GAAG6yB,EAAU,CAKT,GAJIA,EAAS1K,SAASlB,SAAgD,IAArC4L,EAAS1K,SAASlB,QAAQta,SACvDkmB,EAAS1K,SAASlB,QAAU,GAC5B6L,EAAY30B,IAAM3B,EAAOqC,SAAST,iBAAiB,KAEnD00B,EAAY30B,IAAK,CACjB,IAAI40B,EAAsD,IAArCF,EAAS1K,SAASlB,QAAQta,OAAe,EAAIkmB,EAAS1K,SAASlB,QAAQta,OAC5FmmB,EAAY30B,IAAM3B,EAAOqC,SAAST,iBAAiB20B,GAIvDF,EAAS1K,SAASlB,QAAQjrB,KAAK82B,GAEnC9yB,EAAS,CACLC,KAnI2B,sBAoI3BC,QAAS2yB,KC9CkCJ,CAAgBhzB,EAAOozB,KACtEN,UAAW,SAAC9yB,GAAD,OAAWO,GD4EA6yB,EC5EmBpzB,ED4EN,SAAAO,GACnC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GAEzBoD,EAAS,CACLC,KAjLoB,qBAmLxB,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,MAC7CqB,EAAWQ,WAAW7C,EAAK+1B,GACtB11B,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAtLc,yBAyLrB9C,KAAK,SAAClD,GACH0C,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA7LW,kBA8LXC,QAAS7C,IAEbT,EAAOS,UArBE,IAACw1B,GC3EtBG,UAAW,SAACvzB,GAAD,OAAWO,GDoRA6yB,ECpRmBpzB,EDoRN,SAAAO,GACnCA,EAAS,CACLC,KAnXkB,aAoXlBC,QAAS2yB,OAHQ,IAACA,GCnRtBzc,gBAAiB,kBAAMpW,EDiPW,SAAAA,GAClC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,mBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,K7CnVwB,2B6CoVxBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,K7CxVqB,wB6CyVrBC,QAAS7C,SC5PrB0C,YAAa,kBAAMC,EDiQU,SAAAA,GAC7B,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,eAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA5VoB,uBA6VpBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjWiB,oBAkWjBC,QAAS7C,SC5QrBw0B,UAAW,kBAAM7xB,EAAS6xB,OAC1B/P,cAAe,kBAAM9hB,EDwTU,SAAAA,GAC/BA,EAAS,CACLC,KAhZsB,sBCuF1BiiB,aAAc,kBAAMliB,ED4TU,SAAAA,GAC9BA,EAAS,CACLC,KApZqB,qBCuFzBokB,YAAa,kBAAMrkB,EDkIU,SAAAA,GAC7BA,EAAS,CACLC,KA9OwB,wBC2G5BoxB,UAAW,SAACvO,EAAY0G,GAAb,OAAyBxpB,EAASqxB,GAAUvO,EAAY0G,KACnE2I,sBAAuB,SAAC7b,EAAKC,EAAO9W,GAAb,OAAuBO,EDvFb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GACxD,OAAOuW,GAEH,IAAK,WAED9W,EAAM0oB,SAASE,SAAW/R,EAC1BtW,EAAS,CACLC,KApBwB,2BAqBxBC,QAAST,IAEb,MAEJ,IAAK,cAEDA,EAAM0oB,SAASlU,YAAcqC,EAC7BtW,EAAS,CACLC,KA7BwB,2BA8BxBC,QAAST,IAEb,MAEJ,IAAK,WAEDA,EAAM0oB,SAASnF,SAAW1M,EAC1BtW,EAAS,CACLC,KAtCwB,2BAuCxBC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAM0oB,SAASzR,MAAQJ,EACvBtW,EAAS,CACLC,KA/CwB,2BAgDxBC,QAAST,IAEb,MAEJ,IAAK,oBAEDA,EAAM0oB,SAAS8K,kBAAoB3c,EACnCtW,EAAS,CACLC,KAxDwB,2BAyDxBC,QAAST,IAEb,MAEJ,IAAK,oBAEDA,EAAM0oB,SAAS+K,kBAAoB5c,EACnCtW,EAAS,CACLC,KAjEwB,2BAkExBC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAM0oB,SAAS1mB,MAAQ6U,EACvBtW,EAAS,CACLC,KA1EwB,2BA2ExBC,QAAST,IAQrBlF,QAAQC,IAAI,6BAA6BiF,EAAM0oB,SAASlU,aACxDjU,EAAS,CACLC,KApFoC,kCCmGekyB,CAAsB7b,EAAKC,EAAO9W,KACzF4yB,yBAA0B,SAAC/b,EAAKC,EAAO9W,GAAb,OAAuBO,EDZb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAC3D,OAAOuW,GAEH,IAAK,UAED9W,EAAM4nB,QAAU/Q,EAChBtW,EAAS,CACLC,KA9F2B,8BA+F3BC,QAAST,IAEb,MAEJ,IAAK,YAEDA,EAAM6nB,UAAYhR,EAClBtW,EAAS,CACLC,KAvG2B,8BAwG3BC,QAAST,IAQrBlF,QAAQC,IAAI,gBAAgBiF,EAAM4nB,SAClCrnB,EAAS,CACLC,KAjHuC,qCCkGeoyB,CAAyB/b,EAAKC,EAAO9W,OAEpF2R,CAA6C2gB,yBCnHtDoB,eAEF,SAAAA,EAAYx3B,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAywB,IACfp2B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2wB,GAAAtwB,KAAAH,KAAM/G,KAOVy3B,iBAAmB,SAAC/L,EAASjY,GACzB7U,QAAQC,IAAI,WAAY4U,GACxB7U,QAAQC,IAAI,UAAW6sB,GACvB,IAAIgM,EAAchM,EACdiM,EAAY,CACZpK,KAAM,IAEN/uB,EAAU,GACCk5B,EAAY,GAClB7pB,IAAI,SAACqH,EAAM0iB,GAChBp5B,EAAQ6B,KAAK6U,KAEZ9T,EAAKy2B,gBAAgBr5B,GAMrB4C,EAAK02B,WAAWJ,IAMrBA,EAAY7pB,IAAI,SAACkqB,EAAWC,GACxB,GAAiB,IAAbA,OAGC,CACD,IAAI/L,EAAM,CACVA,SAAe,CACXX,QAAS,KAGbyM,EAAUlqB,IAAI,SAACoqB,EAAUC,GACrB,IAAIC,EAAkBt3B,EAAOqC,SAASvC,aAAaooB,OAAO,SAAC7T,GACvD,OAAOA,EAAK7V,OAASb,EAAQ05B,KAGjC,GAAGC,GAAmBA,EAAgBnnB,OAAS,EAAG,CAC9C,IAAIpQ,EAAOu3B,EAAgB,GAAGv3B,KAC3BA,EAAKw3B,WAAW,UACZH,GACChM,EAAIO,SAASlB,QAAQjrB,KAAK,CACtBqrB,QAASuM,EACTtM,UAZA,KAiBRM,EAAIO,SAAS5rB,GAAQq3B,KAI9BhM,EAAIO,SAASE,UAAsC,KAA1BT,EAAIO,SAASE,UACrCiL,EAAUpK,KAAKltB,KAAK4rB,MAIhC7qB,EAAKoG,SAAS,CACVmwB,UAAWA,KAzCXv2B,EAAKoG,SAAS,CACV5D,QAAO,mCAAArD,OAAqCM,EAAOqC,SAASm1B,aAArD,WAAA93B,OAA2EM,EAAOqC,SAASo1B,gBAPtGl3B,EAAKoG,SAAS,CACV5D,QAAS,kEAtBFxC,EAwEnBm3B,SAAW,WAAM,IACPZ,EAAcv2B,EAAKZ,MAAnBm3B,UACFx2B,EAAMN,EAAOqC,SAASf,iBAAmB,UAC7CqB,EAAWK,SAAS1C,EAAKw2B,GACpBn2B,KAAK,SAAClD,GACH8C,EAAKoG,SAAS,CACV5D,QAAS,yBACT+zB,UAAW,OAGlBl2B,MAAM,SAAC6B,GACJlC,EAAKoG,SAAS,CACV5D,QAAS,kDApFNxC,EAyFnBy2B,gBAAkB,SAACr5B,GAEf,IAAIg6B,GAAU,EAUd,OATAh6B,EAAQqP,IAAI,SAACqH,EAAMujB,GACf,IAAIN,EAAkBt3B,EAAOqC,SAASvC,aAAaooB,OAAO,SAAC2P,GACvD,OAAOA,EAAGr5B,OAAS6V,IAEpBijB,GAAmBA,EAAgBnnB,OAAS,IAE3CwnB,GAAU,KAGXA,GArGQp3B,EAwGnB02B,WAAa,SAACa,GACV,IAAIC,EAAeD,EAAO3nB,OAC1B,QAAG4nB,EAAe/3B,EAAOqC,SAASm1B,cAAgBO,EAAe/3B,EAAOqC,SAASo1B,eA1GlEl3B,EAgHnBy3B,YAAc,SAACv1B,GACX1E,QAAQC,IAAI,kBAAmByE,IAjHhBlC,EAoHnB2G,OAAS,WAAM,IAAAoO,EACoB/U,EAAKZ,MAA5BoD,EADGuS,EACHvS,QAAS+zB,EADNxhB,EACMwhB,UACjB,OACI3vB,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAC6wB,GAAAzyB,EAAD,CACI0yB,SAAS,mBACTviB,MAAM,4CACNwiB,aAAc53B,EAAKq2B,iBACnBwB,QAAS73B,EAAKy3B,YACdK,QAAQ,UACRC,WAAY,CAACrvB,MAAO,SAExB9B,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYpB,MAAM,UAAUY,QAAQ,aAAa9G,GAChD+zB,GAAaA,EAAUpK,MAAQoK,EAAUpK,KAAKvc,OAAS,GACxDhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUY,QAAQ,YACxBwG,KAAK,QACLjH,QAAS7I,EAAKm3B,UAFtB,UAKa,2BAAZ30B,GACGoE,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUY,QAAQ,YAChCwG,KAAK,QACLjH,QAAS,kBAAM7I,EAAKpB,MAAM7B,QAAQo3B,WAFlC,aAvIZn0B,EAAKZ,MAAQ,CACToD,QAAS,GACT+zB,UAAW,IAJAv2B,6BAFEgH,IAAMC,WAoJhBmvB,MCjJT4B,8MAEF/xB,kBAAoB,WAChBjG,EAAKjB,YAGT2nB,0BAA4B,SAACC,EAAUC,GACH,KAA7BD,EAASF,sBAAuDsL,IAA7BpL,EAASF,kBAC3CjpB,QAAQC,IAAI,4BACZD,QAAQC,IAAIkpB,EAASF,iBACrBzmB,EAAKpB,MAAMumB,eACX5f,WAAW,WACPvF,EAAKpB,MAAM7B,QAAQkC,KAAK,gBACzB,SAIXF,OAAS,WACLiB,EAAKpB,MAAMoE,iBAGfi1B,eAAiB,SAACv1B,GACd1C,EAAKpB,MAAM+Z,aAAajW,EAAO1C,EAAKpB,MAAMoX,aAG9CrP,OAAS,WAGL,OAFAnJ,QAAQC,IAAI,gCACZD,QAAQC,IAAIuC,EAAKpB,MAAMkmB,YAEnBle,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnBpN,EAAA3B,EAAA4B,cAACqxB,GAAD,CACIhjB,SAAW,SAACxS,GAAD,OAAW1C,EAAKi4B,eAAev1B,IAC1CA,MAAO1C,EAAKpB,MAAMu5B,kBAClBrP,OAAQ9oB,EAAKpB,MAAMkqB,OACnB9S,SAAUhW,EAAKpB,MAAMoX,SACrBe,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMw5B,4BAA4B7e,EAAKC,EAAO9W,MAGlGkE,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,6DAzCDhb,IAAMC,WCKjC8S,IDsDS1F,YAXS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMi5B,mBAEc,SAAAp1B,GAAQ,MAAK,CACpC0V,aAAc,SAACjW,EAAOsT,GAAR,OAAqB/S,GE0BVq1B,EF1BgC51B,EE0BH,SAAAO,GACtDA,EAAS,CACLC,KAnF2B,wBAqF/B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,YACzCqB,EAAWK,SAAS1C,EAAKu4B,GACpBl4B,KAAK,SAAClD,GACHM,QAAQC,IAAI,oBAAsBP,GAClC+F,EAAS,CACLC,KAzFiB,wBA0FjBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA9Fc,qBA+FdC,QAAS7C,SAhBD,IAACg4B,GFzBzBC,gBAAiB,SAAC71B,GAAD,OAAWO,GEiGAq1B,EFjGyB51B,EEiGN,SAAAO,GAC/CA,EAAS,CACLC,KAtJ8B,2BAwJlC,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,YAC7CqB,EAAWQ,WAAW7C,EAAKu4B,GACtBl4B,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3JwB,+BA8J/B7C,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA/JqB,wBAgKrBC,QAAS7C,SAdM,IAACg4B,GFhG5Bt1B,YAAa,kBAAMC,EEqEU,SAAAA,GAC7BA,EAAS,CACLC,KlE3H0B,uBkE6H9B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,eAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KlEhIoB,uBkEiIpBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KlErIiB,oBkEsIjBC,QAAS7C,SFnFrBykB,cAAe,kBAAM9hB,EEkHU,SAAAA,GAC/BA,EAAS,CACLC,KA3JsB,sBFwC1BiiB,aAAc,kBAAMliB,EEsHU,SAAAA,GAC9BA,EAAS,CACLC,KA/JqB,qBFwCzBk1B,4BAA6B,SAAC7e,EAAKC,EAAO9W,GAAb,OAAuBO,EEtCb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAG9D,OAFAzF,QAAQC,IAAI,2BAA6B+b,GACzChc,QAAQC,IAAI8b,GACLC,GAEH,IAAK,WAED9W,EAAMmW,SAAWU,EACjBtW,EAAS,CACLC,KAtB8B,iCAuB9BC,QAAST,IAEb,MAEJ,IAAK,QAEDA,EAAMoW,MAAQS,EACdtW,EAAS,CACLC,KA/B8B,iCAgC9BC,QAAST,IAEb,MAEJ,IAAK,YAEDA,EAAMqW,UAAYQ,EAClBtW,EAAS,CACLC,KAxC8B,iCAyC9BC,QAAST,IAEb,MAEJ,IAAK,kBAEDA,EAAM+sB,gBAAkBlW,EACxBtW,EAAS,CACLC,KAjD8B,iCAkD9BC,QAAST,IAEb,MAEJ,IAAK,mBAEDA,EAAM81B,iBAAmBjf,EACzBtW,EAAS,CACLC,KA1D8B,iCA2D9BC,QAAST,IAQrBO,EAAS,CACLC,KAnE0C,wCFkDek1B,CAA4B7e,EAAKC,EAAO9W,OAE1F2R,CAA6C2jB,gBCpDxD,SAAAje,EAAYnb,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAoU,IACf/Z,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsU,GAAAjU,KAAAH,KAAM/G,KAMV8Y,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KARP9H,EAWnB2X,YAAc,WACVna,QAAQC,IAAI,gBACZuC,EAAKoG,SAAS,CAAE0B,MAAM,KAbP9H,EAgBnB4X,aAAe,WACbpa,QAAQC,IAAI,iBACZuC,EAAKpB,MAAMsW,SAASlV,EAAKpB,MAAM8D,OAC/B1C,EAAK2X,eAnBY3X,EAsBnB6X,mBAAqB,SAACP,EAAOC,GACzBvX,EAAKpB,MAAMmY,cAAcO,EAAO,kBAAmBtX,EAAKpB,MAAM8D,QAvB/C1C,EA0BnB2G,OAAS,WAAM,IACLjE,EAAU1C,EAAKpB,MAAf8D,MAGN,OAFAlF,QAAQC,IAAI,gBACZD,QAAQC,IAAIiF,GAERkE,EAAA3B,EAAA4B,cAAA,YACEnE,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACDkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,KACQ2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYZ,MAAM,UAAUG,QAAS7I,EAAK0X,iBAA1D,eAEJ9Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAqZ,WAAW,EACXrb,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aAA3B,qBACA/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAC5BtP,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OACvBrO,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYuO,QAAQ,yBAApB,SAGAzR,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIuL,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAAS7U,EAAKpB,MAAM8D,QAC9EmS,MAAOnS,EAAM+W,UAAUE,MACvBpB,MACA3R,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsZ,WAAY,GACZnlB,KAAK,QACL8L,GAAG,2BAGPnD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU+K,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAEC7G,EAAKpB,MAAMkqB,QAAU9oB,EAAKpB,MAAMkqB,OAAOlZ,OAAS,GAC7C5P,EAAKpB,MAAMkqB,OAAOrc,IAAI,SAACuc,EAAWtc,GAC9B,IAAIoH,EAAOkV,EAAUC,WACzB,OACIriB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOf,EAAK6F,OAAQ7F,EAAK6F,WAK/D/S,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,oBACHqL,MAAM,YACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+W,UAAUC,SACvBrE,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAY7U,EAAKpB,MAAM8D,QACjF6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,iBACHqL,MAAM,uBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+W,UAAUG,SACvBvE,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAY7U,EAAKpB,MAAM8D,QACjF6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACmS,GAAD,CACQlB,aAAa,EACbD,mBAAqB,SAACP,EAAOC,GAAR,OAAmBvX,EAAK6X,mBAAmBP,EAAOC,SAI3F3Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC/BG,QAAU,kBAAM7I,EAAK4X,aAAa5X,EAAKpB,MAAM8D,SAD7D,oBArGhB1C,EAAKZ,MAAQ,CACT0I,MAAM,GAHK9H,6BAFDiH,cAqHhBmC,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAGV0C,MEpFTI,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CAEJ3R,MAAOkD,EAAM0O,QAAQC,OAAOC,MAC5BpH,SAAU,IAEZqH,KAAM,CACJrH,SAAU,MAPQgH,CASpBM,MACW+d,GArDE,SAAC75B,GAAU,IAClB+f,EAAU/f,EAAV+f,MACN,OACI/X,EAAA3B,EAAA4B,cAAA,YACE8X,GAAS/X,EAAA3B,EAAA4B,cAACsP,GAAD,MACVwI,GAA0B,IAAjBA,EAAM/O,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,mBAC/BqV,GAASA,EAAM/O,OAAS,GACzBhJ,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACA2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC6xB,GAAD,aACA9xB,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAvB,UACArM,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAvB,cACArM,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAvB,UACArM,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,YAG3BrM,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACC0Z,EAAMlS,IAAI,SAACksB,EAAMjsB,GAAP,OACP9F,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,CAAU7D,IAAKsL,GACf9F,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBxd,UAAU,KAAKC,MAAM,OAClCvU,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAC1N,SAAU,eAAgBE,MAAO,CAAEgc,OAAQud,EAAK5uB,MACvD4uB,EAAKlf,UAAUC,WAGxB9S,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAOrM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAAcqvB,EAAKlf,UAAUtX,OAAO2a,gBACtFlW,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAQ0lB,EAAKlf,UAAUiW,WAC9C9oB,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAQ0lB,EAAK7Z,UAAU7gB,MAC9C2I,EAAA3B,EAAA4B,cAAC6xB,GAAD,CAAiBzlB,MAAM,QAAQkI,MAAM,MAAMD,UAAU,MAChDyB,GAAcgc,EAAKlf,UAAUtX,SAC9ByE,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAC1N,SAAU,iBAAkBE,MAAO,CAAEgc,OAAQud,EAAK5uB,MAC1DnD,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,eChClBua,8MAEF3yB,kBAAoB,WAChBjG,EAAKjB,YAKTA,OAAS,WACLiB,EAAKpB,MAAMoE,cACXhD,EAAKpB,MAAMi6B,gBAGf7H,UAAY,SAACtuB,GACTA,EAAM+W,UAAUyV,SAAW,CACvBC,eAAgB1vB,EAAOqC,SAASP,eAAeC,mBAEnDxB,EAAKpB,MAAMmb,QAAQrX,EAAO1C,EAAKpB,MAAMoX,SAAUhW,EAAKpB,MAAM7B,SACjDqD,KAAK,SAAClD,GACH8C,EAAKjB,cAIrB4H,OAAS,WAEL,OADAnJ,QAAQC,IAAI,+BAERmJ,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,IACvBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAY0M,OACZ5P,EAAA3B,EAAA4B,cAACiyB,GAAD,CACI5jB,SAAW,SAACxS,GAAD,OAAW1C,EAAKgxB,UAAUtuB,IACrCA,MAAO1C,EAAKpB,MAAMiyB,aAClB/H,OAAQ9oB,EAAKpB,MAAMkqB,OACnB9S,SAAUhW,EAAKpB,MAAMoX,SACrBe,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM0a,uBAAuBC,EAAKC,EAAO9W,MAGzFsK,MAAM,UACVpG,EAAA3B,EAAA4B,cAACkyB,GAAD,CAAUpa,MAAO3e,EAAKpB,MAAM+f,SAE5B/X,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,6DA3CDhb,IAAMC,WA8DxBoN,eAZS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMoiB,mBAEc,SAAAve,GAAQ,MAAK,CACpC8W,QAAS,SAACrX,EAAOsT,GAAR,OAAqB/S,EAAS8W,GAAQrX,KAC/Cs2B,WAAY,SAACt2B,GAAD,OAAWO,GnDkFA+W,EmDlFoBtX,EnDkFN,SAAAO,GACrCA,EAAS,CACLC,KA5IyB,sBA8I7B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,OAC7CqB,EAAWQ,WAAW7C,EAAKia,GACtB5Z,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAjJmB,0BAoJ1B7C,MAAM,SAACC,GACJ2C,EAAS,CACLC,KArJgB,mBAsJhBC,QAAS7C,SAdC,IAAC0Z,GmDjFvBhX,YAAa,kBAAMC,EnDgEU,SAAAA,GAC7B,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,eAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAlHoB,uBAmHpBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAvHiB,oBAwHjBC,QAAS7C,SmD3ErBu4B,WAAY,kBAAM51B,EnDmGU,SAAAA,GAC5BA,EAAS,CACLC,KAtJwB,qBAwJ5B,IAAInD,EAAMN,EAAOqC,SAASf,iBAAmB,cAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3JmB,sBA4JnBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KApKY,mBAqKZC,QAAS7C,EAAI+C,kBmDrH7B0hB,cAAe,kBAAM9hB,EnD2HU,SAAAA,GAC/BA,EAAS,CACLC,KA1KsB,sBmD8C1BiiB,aAAc,kBAAMliB,EnD+HU,SAAAA,GAC9BA,EAAS,CACLC,KA9KqB,qBmD8CzBoW,uBAAwB,SAACC,EAAKC,EAAO9W,GAAb,OAAuBO,EAASqW,GAAuBC,EAAKC,EAAO9W,OAEhF2R,CAA6CukB,yBCvBtDK,eAEF,SAAAA,EAAar6B,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAszB,IACjBj5B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwzB,GAAAnzB,KAAAH,KAAM/G,KAyBTqH,kBAAoB,WAChBjG,EAAKjB,UA3BWiB,EA8BpBjB,OAAS,WACLiB,EAAKpB,MAAMk2B,YACX90B,EAAKpB,MAAMya,kBACXrZ,EAAKpB,MAAMoE,eAjCKhD,EAoCpBwrB,eAAiB,SAACwG,GACdhyB,EAAKpB,MAAMqyB,aAAae,IArCRhyB,EAwCpB4rB,YAAc,SAACf,GACX7qB,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAW,UACXE,MAAO,CACHyrB,IAAKA,MA5CG7qB,EAiDpB4qB,YAAc,SAACC,GACX7qB,EAAKpB,MAAMs6B,UAAUrO,IAlDL7qB,EAqDpBm5B,cAAgB,WAAM,IACZta,EAAiB7e,EAAKZ,MAAtByf,aACHA,GAAgBA,EAAajP,OAAS,GACrC5P,EAAKpB,MAAMw6B,cAAcva,IAxDb7e,EA4DpB8qB,gBAAkB,SAACD,GAAQ,IACjBhM,EAAiB7e,EAAKZ,MAAtByf,aACFwa,EAAexa,EAAa8I,OAAO,SAAC7T,GACpC,OAAOA,EAAK/J,KAAO8gB,EAAI9gB,KAExBsvB,GAAgBA,EAAazpB,OAAS,IAErCiP,EAAa5f,KAAK4rB,GAClB7qB,EAAKoG,SAAS,CAACyY,mBApEH7e,EAwEpBs5B,mBAAqB,SAACnkB,GAClB,IAAIokB,EAAWpkB,EAAEG,OAAOkkB,WAAWC,aAAa,iBAAiB5kB,MAEjE,OADArX,QAAQC,IAAI,WAAY87B,GACjBA,GACH,IAAK,QACDv5B,EAAKoG,SAAS,CACVszB,eAAgBvkB,EAAEG,OAAOT,QAYrCrX,QAAQC,IAAI,WAAY0X,EAAEG,OAAOT,OACjC,IAAIkR,EAAa5Q,EAAEG,OAAOT,MACtBkR,KACAA,EAAa5Q,EAAEG,OAAOqkB,YAEW,gBAA7B5T,EAAW6B,eACE,aAAb2R,EACAv5B,EAAKoG,SAAS,CACVwzB,sBAAsB,IAGR,aAAbL,GACLv5B,EAAKoG,SAAS,CACVwzB,sBAAsB,KAIlC55B,EAAKpB,MAAM01B,UAAUiF,EAAUxT,EAAY/lB,EAAKpB,MAAMutB,OA3GtCnsB,EA8GpB65B,aAAe,WACX75B,EAAKpB,MAAM01B,UAAU,MAAO,GAAIt0B,EAAKpB,MAAMutB,MAC3CnsB,EAAKoG,SAAS,CACVwzB,sBAAsB,KAjHV55B,EAqHpB2G,OAAS,WAAM,IAAA4W,EAEqBvd,EAAKpB,MAD/ButB,EADK5O,EACL4O,KAAM3E,EADDjK,EACCiK,YAAaV,EADdvJ,EACcuJ,mBAAoBD,EADlCtJ,EACkCsJ,eACzCE,GAFOxJ,EACkDrb,MADlDqb,EAEPwJ,cAAcuC,EAFP/L,EAEO+L,UACZzK,EAAiB7e,EAAKZ,MAAtByf,aACFib,EAAehT,GAA0CqF,EAC7D,IAAI2N,EACA,OACIlzB,EAAA3B,EAAA4B,cAACsP,GAAD,MAIR3Y,QAAQC,IAAI,eAAgBspB,GAC5BvpB,QAAQC,IAAI,YAAa6rB,GACzB,IAAIyQ,EAAc,CACdhT,eACAuC,YACAsQ,qBAAsB55B,EAAKZ,MAAMw6B,qBACjCC,aAAc75B,EAAK65B,cAGvB,OACIjzB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAA,WACKgY,GAAgBA,EAAajP,OAAS,GACvChJ,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAM9D,QAAS,kBAAM7I,EAAKm5B,iBAAiBrpB,KAAK,QAAQ9C,MAAM,mBAC1DpG,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAQ3V,MAAM,eAMlB9B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUG,QAAS,kBAAM7I,EAAKjB,UAAU+Q,KAAK,SACvDlJ,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAS3V,MAAM,eAEnB9B,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAG,UAAUI,MAAM,eACrBpG,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAK3V,MAAM,eAEf9B,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAG,WAAWI,MAAM,oBACtBpG,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAa3V,MAAM,gBAK/BsE,MAAK,aAAA7N,OAAe26B,EAAalqB,OAA5B,KACL8hB,UAAU,8BAEd9qB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACKkwB,GAAcD,EAAa/5B,EAAKs5B,oBAChCzS,GACDjgB,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,gBACHqL,MAAM,SACNP,MAAO2S,EACP1gB,UAAWsC,GAAOwP,MAElBvD,SAAUrV,EAAKs5B,mBACf/jB,OAAO,SACPjM,QAAQ,WACR2wB,WAAY,CAAEC,gBAAiB,mBAEnCtzB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYC,GAAG,+BAAf,OACAnD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,wBACHowB,UAAQ,EACRtlB,MAAO7U,EAAKZ,MAAMs6B,eAClBrkB,SAAUrV,EAAKs5B,mBACfW,WAAY,CAAEC,gBAAiB,SAC/B3hB,MAAO3R,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACPswB,YAAa,SAAC3O,GAAD,OAAcA,EAAS4O,KAAK,QAGxCvR,GAAOrc,IAAI,SAACxO,GAAD,OACR2I,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKnD,EAAM4W,MAAO5W,GAC5B2I,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU6hB,QAAS3rB,EAAKZ,MAAMs6B,eAAej5B,QAAQxC,IAAS,IAC9D2I,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAcqD,QAASlP,SAKnC2I,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAO,CAACoI,MAAO,MAAO4P,UAAW,OAC7Dva,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAASpB,MAAM,UAAUoH,KAAK,QAAQjH,QAAS,kBAAM7I,EAAKpB,MAAM07B,cAAhE,iBAUR1zB,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAG,WACLhG,EAAA3B,EAAA4B,cAAC0zB,GAAAt1B,EAAD,CAAKyD,MAAM,UAAUE,aAAW,MAAMO,MAAO,CAACqB,MAAO,GAAIvC,SAAU,QAAS8jB,OAAQ,KAChFnlB,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,QAGRzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAM8O,OAAO,GACPkhB,GAAgBA,EAAalqB,OAAS,GACtCkqB,EAAartB,IAAI,SAACqH,EAAMpH,GACtB,OACI9F,EAAA3B,EAAA4B,cAACwlB,GAAD,CAAYtB,QAASjX,EAAM1S,IAAKsL,EACpBkf,YAAa,SAACf,GAAD,OAAS7qB,EAAK4rB,YAAY9X,IACvC8W,YAAa,kBAAM5qB,EAAK4qB,YAAY9W,IACpCgX,gBAAiB,kBAAM9qB,EAAK8qB,gBAAgBhX,IAC5CkX,cAAc,EACdC,YAAY,UA/NjDjrB,EAAKZ,MAAQ,CACVyf,aAAc,GACd6a,eAAgB,IAJF15B,6BAFFiH,aA6OhB+yB,GAAgB,SAACD,EAAaT,GAEhC,OACI1yB,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACKknB,EAAYhT,cAAgBgT,EAAYhT,aAAanX,OAAS,GAC3DhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,yBAAf,cACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVizB,EAAYhT,aAAata,IAAI,SAAC+tB,EAAcC,GACzC,OACQ7zB,EAAA3B,EAAA4B,cAAA,UAAQzF,IAAKq5B,EAAIv3B,KAAK,SAAS4D,UAAU,gCAAgCozB,gBAAc,WAAWrxB,QAASywB,GAAqBkB,EAAa1jB,cAAc9J,SAGvKpG,EAAA3B,EAAA4B,cAAA,UAAQ3D,KAAK,SAAS4D,UAAU,8BAA8BozB,gBAAc,WAAWrxB,QAASkxB,EAAYF,cAA5G,UAKhBjzB,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KAEKknB,EAAYH,sBAAwBG,EAAYzQ,WAAayQ,EAAYzQ,UAAU1Z,OAAS,GACzFhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,yBAAf,UACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVizB,EAAYzQ,UAAU7c,IAAI,SAACuc,GACxB,OACQpiB,EAAA3B,EAAA4B,cAAA,UAAQ3D,KAAK,SAAS4D,UAAU,gCAAgCozB,gBAAc,QAAQrxB,QAASywB,GAAqBtQ,EAAUC,WAAWtP,cA6BlKtF,eAjBS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMy2B,WACNz2B,EAAMsoB,gBACNtoB,EAAMyqB,eAEc,SAAA5mB,GAAQ,MAAK,CACpC6xB,UAAW,kBAAM7xB,EAAS6xB,OAC1BoE,UAAW,SAACrO,GAAD,OAAS5nB,GR3HE6yB,EQ2HiBjL,ER3HJ,SAAA5nB,GACnC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,MAC7CqB,EAAWU,WAAW/C,EAAK+1B,GACtB11B,KAAK,SAAClD,GACH+F,EAAS6xB,IAAU,MAEtBz0B,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA3Me,kBA4MfC,QAAS7C,SATA,IAACw1B,GQ4HtBsD,cAAe,SAACjN,GAAD,OAAUlpB,ER9GA,SAACkpB,GAAD,OAAU,SAAAlpB,GACnC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,UACzC25B,EAAiB,GACrBvO,EAAK1f,IAAI,SAACqH,EAAMpH,GACZguB,EAAez7B,KAAK6U,EAAK/J,MAE7B,IAAI1M,EAAO,CACPq9B,eAAgBA,GAEpBt4B,EAAWU,WAAW/C,EAAK1C,GACtB+C,KAAK,SAAClD,GACH+F,EAAS6xB,IAAU,MAEtBz0B,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhOe,kBAiOfC,QAAS7C,OQ8Fa84B,CAAcjN,KAChD9S,gBAAiB,kBAAMpW,EAASoW,OAChCrW,YAAa,kBAAMC,EAASD,MAC5B+hB,cAAe,kBAAM9hB,ERwFU,SAAAA,GAC/BA,EAAS,CACLC,KAhZsB,sBQuT1BiiB,aAAc,kBAAMliB,ER4FU,SAAAA,GAC9BA,EAAS,CACLC,KApZqB,qBQuTzBokB,YAAa,kBAAMrkB,ER9FU,SAAAA,GAC7BA,EAAS,CACLC,KA9OwB,wBQ2U5Bo3B,UAAW,kBAAMr3B,ERzFU,SAAAA,GAC3BA,EAAS,CACLC,KArPsB,sBQ6U1BoxB,UAAW,SAACC,EAAgBxO,EAAY0G,GAA7B,OAAyCxpB,EAASqxB,GAAUC,EAAgBxO,EAAY0G,OAExFpY,CAA6C4kB,IACtD7vB,GAAS,CACXwN,YAAa,CACTrF,MAAO,OAEXvI,KAAM,CACF+M,QAAS,SAIX+S,GAAS,CACX,OACA,UACA,QACA,QACA,UCvVE6R,8MAEF10B,kBAAoB,WAChBjG,EAAKpB,MAAMg8B,qBAGfj0B,OAAS,WAAM,IACL4nB,EAAevuB,EAAKpB,MAApB2vB,WACN,OACI3nB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAG,iBACLhG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYZ,MAAM,WAAlC,kBAGRsE,MAAM,iBACN0kB,UAAW,0BAEf9qB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACMykB,GAAcA,EAAW3e,OAAS,GAClC2e,EAAW9hB,IAAI,SAACqH,EAAMpH,GACpB,OACI9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAUoc,SAAS,EAAO9kB,IAAKsL,GAC3B9F,EAAA3B,EAAA4B,cAAC4rB,GAAAxtB,EAAD,CAAgBkE,MAAO,CAACoI,MAAM,SAC1B3K,EAAA3B,EAAA4B,cAAC6rB,GAAAztB,EAAD,CAAuB0tB,WAAY/rB,EAAA3B,EAAA4B,cAAC+rB,GAAA3tB,EAAD,OACnC2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,MAAMwK,EAAK+E,WAEnCjS,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,aAAcwK,EAAKgF,QAE3ClS,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClBpN,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,aACfwK,EAAK2b,gBADV,UACkC3b,EAAK0kB,iBADvC,cAMR5xB,EAAA3B,EAAA4B,cAACgsB,GAAA5tB,EAAD,KACI2B,EAAA3B,EAAA4B,cAAA,OAAKsC,MAAOC,GAAOwN,aACd9C,EAAKoD,aACFtQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,aAApB,qBAOhB1C,EAAA3B,EAAA4B,cAAC0sB,GAAAtuB,EAAD,KACA2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,WAAWwG,KAAK,QAAQpH,MAAM,WAA9C,8CArDZzB,aA+EtBmC,IADSiL,YAVS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMi5B,mBAEc,SAAAp1B,GAAQ,MAAK,CACpC23B,gBAAiB,kBAAM33B,EJ2BW,SAAAA,GAClC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,mBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAnGuB,0BAoGvBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAxGoB,uBAyGpBC,QAAS7C,SItCrBykB,cAAe,kBAAM9hB,EJyFU,SAAAA,GAC/BA,EAAS,CACLC,KA3JsB,sBIiE1BiiB,aAAc,kBAAMliB,EJ6FU,SAAAA,GAC9BA,EAAS,CACLC,KA/JqB,qBIiEzBokB,YAAa,kBAAMrkB,EJiBU,SAAAA,GAC7BA,EAAS,CACLC,KArG8B,gCIqFvBmR,CAA6CsmB,IAC7C,CACX/jB,YAAa,CACTrF,MAAO,SCpFTspB,8MAEF50B,kBAAoB,WAChBjG,EAAKjB,YAGT2nB,0BAA4B,SAACC,EAAUC,GACH,KAA7BD,EAASF,iBAA0BE,EAASF,gBAGnB,QAAzBE,EAASmU,aACR96B,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAW,cAKvBH,OAAS,WACLiB,EAAKpB,MAAMm8B,sBAGfp0B,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC3BrN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIkD,MAAK,gBAAA7N,OAAkBa,EAAKpB,MAAMgc,YAAc5a,EAAKpB,MAAMgc,YAAYhL,OAAS,YAA3E,OACThJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAAC6nB,GAAD,CACI9T,YAAa5a,EAAKpB,MAAMgc,YACxBe,gBAAiB,SAAClO,GAAD,OAAgBzN,EAAKpB,MAAMqa,gBAAgBxL,wCA/BvDzG,IAAMC,WAgD5BoN,eATS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM47B,uBAEc,SAAA/3B,GAAQ,MAAK,CACpC8hB,cAAe,kBAAM9hB,EzBoMU,SAAAA,GAC/BA,EAAS,CACLC,KA7OsB,sByBwC1BiiB,aAAc,kBAAMliB,EzBwMU,SAAAA,GAC9BA,EAAS,CACLC,KAjPqB,qByBwCzB63B,iBAAkB,kBAAM93B,ExD3CU,SAAAA,GAClCA,EAAS,CACLC,KAX2B,wBAa/B,IAAInD,EAAMN,EAAOqC,SAASb,qBAAuB,gBAEjDmB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACHM,QAAQC,IAAI,mBAEZwF,EAAS,CACLC,KAnBqB,wBAoBrBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KA5Bc,qBA6BdC,QAAS7C,SwDsBzB2Y,gBAAiB,SAACxL,GAAD,OAAgBxK,EAASgW,GAAgBxL,OAE/C4G,CAA6CwmB,ICsB7CI,GApEQ,SAACr8B,GAAU,IACxBmuB,EAA4BnuB,EAA5BmuB,YAAamO,EAAet8B,EAAfs8B,WAEnB,OACIt0B,EAAA3B,EAAA4B,cAAA,WACQD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,gBACHqL,MAAM,iBACNP,MAAOqmB,EAAaA,EAAWj9B,KAAO,GACtCoX,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,SACrDU,OAAO,SACPjM,QAAQ,WACR6xB,WAAW,gCAGnBv0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,iBACHqL,MAAM,kBACNP,MAAOqmB,EAAaA,EAAWE,QAAU,GACzC/lB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,YACrDU,OAAO,SACPjM,QAAQ,WACR6xB,WAAW,2BAGnBv0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,mBACHqL,MAAM,UACNP,MAAOqmB,EAAaA,EAAWjM,aAAe,GAC9C5Z,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,iBACrDU,OAAO,SACPjM,QAAQ,cAGZ1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,sCAEA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYpB,MAAM,aAAlB,IAAgCqkB,EAAYtT,UAAUC,UAFtD,qCAOA9S,EAAA3B,EAAA4B,cAAA,OAAKsC,MAAOC,GAAOiyB,WACnBz0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,SAAS2J,MAAM,UAAnC,aACW8Z,EAAYtT,UAAUG,SADjC,QAEAhT,EAAA3B,EAAA4B,cAAA,WAASD,EAAA3B,EAAA4B,cAAA,WACTD,EAAA3B,EAAA4B,cAAA,KAAGrG,KAAK,IAAI2I,MAAOC,GAAOiyB,WAC1Bz0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAY2J,MAAM,SAASnD,KAAK,QAAQpH,MAAM,aAA9D,sBAMA9B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAASX,MAAOC,GAAOiyB,YACvBz0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYkJ,cAAY,EAACC,MAAM,SAAS3J,QAAQ,YAAYH,MAAOC,GAAOiyB,WAA1E,wEAGAz0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYkJ,cAAY,EAACC,MAAM,SAAS3J,QAAQ,YAAYH,MAAOC,GAAOiyB,WAA1E,0FAGAz0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYkJ,cAAY,EAACC,MAAM,SAAS3J,QAAQ,YAAYH,MAAOC,GAAOiyB,WAA1E,8CAC+Cz0B,EAAA3B,EAAA4B,cAAA,KAAGrG,KAAK,KAAR,OAD/C,gDAOd4I,GAAQ,CACV2J,UAAW,CACPtI,WAAY,OAEhBmM,YAAa,CACTrF,MAAO,MACP6Q,aAAc,KACd3X,WAAY,OAEhB4wB,UAAW,CACPla,UAAW,MAGfvH,SAAU,CACNuH,UAAW,MAEfma,cAAe,CACX9pB,OAAQ,SCzFV+pB,eAEF,SAAAA,EAAY38B,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA41B,IACfv7B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA81B,GAAAz1B,KAAAH,KAAM/G,KAOVqH,kBAAoB,WAChBjG,EAAKjB,UATUiB,EAYnBjB,OAAS,WAAM,IACLK,EAAUY,EAAKpB,MAAME,SAArBM,MACN5B,QAAQC,IAAI,0BACZD,QAAQC,IAAI2B,GACTA,GACIA,EAAMgc,QACLpb,EAAKpB,MAAMmrB,UAAU3qB,EAAMgc,SAlBpBpb,EAuBnBw7B,aAAe,WAAM,IAAAje,EAiBkBvd,EAAKpB,MAAlCiyB,EAjBWtT,EAiBXsT,aAAcqK,EAjBH3d,EAiBG2d,WAChBx4B,EAAQ,CACR0Y,OAAQyV,EAAa9mB,GACrB0jB,SAAU,IAEVC,EAAU,CACVjZ,QAASymB,EAAWE,QACpBn9B,KAAMi9B,EAAWj9B,MAErByE,EAAM+qB,SAASxuB,KAAKyuB,GAGpB1tB,EAAKpB,MAAMsa,WAAWxW,GAAOtC,KAAK,SAAClD,GAC/B8C,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,iCAElBhiB,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,eAAgBE,MAAO,CAAEgc,OAAQyV,EAAa9mB,GAAIimB,iBAAkB,QA1DvEhwB,EA+DnB2G,OAAS,WAAM,IAAAimB,EACqC5sB,EAAKpB,MAA/CiyB,EADKjE,EACLiE,aAAcqK,EADTtO,EACSsO,WADTtO,EACqBkO,YAEhC,OADAt9B,QAAQC,IAAI,8BAA+BozB,GAEvCjqB,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7B4c,GAAgBjqB,EAAA3B,EAAA4B,cAACsP,GAAD,MACjB0a,GAAgBA,EAAapX,WAC9B7S,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OAKA5P,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMjE,MAAM,UAAUkE,GAAG,gBAAzB,gBAIAI,MAAM,oBACN0kB,UAAWb,EAAapX,UAAUC,WAEtC9S,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAAC40B,GAAD,CAEI5c,aAAcgS,EAAapX,UAAUoF,aACrCkO,YAAa8D,EACbqK,WAAYA,EACZnkB,cAAe,SAACwC,EAAKC,GAAN,OAAgBxZ,EAAKpB,MAAM88B,sBAAsBniB,EAAKC,EAAO0hB,OAGpFt0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaX,MAAOC,GAAOgO,cACvBxQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACvCG,QAAS,kBAAM7I,EAAKw7B,iBAD5B,iBAQR50B,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKZ,MAAM8xB,UAAWvZ,YAAa,kBAAM3X,EAAKoG,SAAS,CAAC8qB,WAAW,KAC9ElP,aAAchiB,EAAKZ,MAAM4iB,kBAvGrChiB,EAAKZ,MAAQ,CACT8xB,WAAW,EACXlP,aAAc,IAJHhiB,6BAFOgH,IAAMC,WA8HrBoN,eAXS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM47B,qBACN57B,EAAMyyB,qBAEc,SAAA5uB,GAAQ,MAAK,CACpCiW,WAAY,SAACgiB,EAAYlhB,GAAb,OAA2B/W,EAASiW,GAAWgiB,KAC3DnR,UAAW,SAAC3O,GAAD,OAAYnY,EAAS8mB,GAAU3O,KAC1C2J,cAAe,kBAAM9hB,E3BsHU,SAAAA,GAC/BA,EAAS,CACLC,KA7OsB,sB2BsH1BiiB,aAAc,kBAAMliB,E3B0HU,SAAAA,GAC9BA,EAAS,CACLC,KAjPqB,qB2BsHzBw4B,sBAAuB,SAACniB,EAAKC,EAAO0hB,GAAb,OAA4Bj4B,E1DhClB,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAIxD,OAHIP,IACAA,EAAQ,IAEL8W,GAEH,IAAK,OAED9W,EAAMzE,KAAOsb,EACbtW,EAAS,CACLC,KAvGwB,2BAwGxBC,QAAST,IAEb,MAEJ,IAAK,UAEDA,EAAM04B,QAAU7hB,EAChBtW,EAAS,CACLC,KAhHwB,2BAiHxBC,QAAST,IAEb,MAEJ,IAAK,eAEDA,EAAMusB,aAAe1V,EACrBtW,EAAS,CACLC,KAzHwB,2BA0HxBC,QAAST,M0DGuCg5B,CAAsBniB,EAAKC,EAAO0hB,OAEnF7mB,CAA6CknB,IACtDnyB,GAAS,CACXgO,aAAc,CACV3M,WAAY,QC5CLkxB,GAlFE,SAAC/8B,GACdpB,QAAQC,IAAI,UAAWmB,GADC,IAEhB8D,EAA2B9D,EAA3B8D,MAA2B9D,EAApBg9B,gBACf,OACIh1B,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAEhB1C,EAAA3B,EAAA4B,cAAA,OACIujB,wBAAyB,CACrBC,OAAQtN,GAAwBra,EAAMmoB,IAAIO,SAASlU,iBAI/DtQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaoR,UAAU,YACnBtU,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAWoR,UAAU,UAArB,WACCxY,EAAMmoB,IAAIO,SAASlB,SAAWxnB,EAAMmoB,IAAIO,SAASlB,QAAQta,OAAS,GACnEhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACVpE,EAAMmoB,IAAIO,SAASlB,QAAQzd,IAAI,SAACovB,EAAYC,GACzC,OACIl1B,EAAA3B,EAAA4B,cAAA,OACIgC,QAAS,SAAAa,GAAK,OAAI9K,EAAMm9B,iBAAiBF,EAAWz6B,MACpD0F,UAAS,+DAAA3H,OAAiEuD,EAAMs5B,kBAAkBC,aAAax7B,QAAQo7B,EAAWz6B,MAAQ,EAAI,aAAe,KAEzJwF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACPF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQhD,UAAU,cACb+0B,EAAWz6B,MAIxBwF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAEXF,EAAA3B,EAAA4B,cAAA,OACIujB,wBAAyB,CACrBC,OAAQtN,GAAwB8e,EAAWvR,oBCwC5E4R,eA7EX,SAAAA,EAAYt9B,GAAO,IAAAoB,EAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAu2B,IACfl8B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAy2B,GAAAp2B,KAAAH,KAAM/G,KASV+H,OAAS,WAAM,IAAA4W,EAC+Bvd,EAAKpB,MAAzC8D,EADK6a,EACL7a,MAAOy5B,EADF5e,EACE4e,gBAAiBh1B,EADnBoW,EACmBpW,QAE1Bi1B,GADsBp8B,EAAKZ,MAAzBw8B,gBACQ,IACVS,EAAqB,GACrBC,EAAuB,EACvBC,EAAiB,EACjBC,EAAc,GAWlB,OAVG95B,GAASy5B,IACRC,EAAUD,EACPz5B,EAAM+5B,eAAiB/5B,EAAM+5B,cAActQ,OAG1CkQ,EAAqB,MAFrBC,EAAwBF,EAAQ/Q,mBAAmB,GAEA,QADnDkR,EAAiB75B,EAAM+5B,cAActQ,KAAKvc,QAE1C4sB,EAAc95B,EAAM+5B,cAAc7iB,SAClCpc,QAAQC,IAAI,cAAe0+B,KAG/BC,EAOIx1B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACQ0M,OACI5P,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAC61B,GAAD,CACI31B,aAAc,kBAAM/G,EAAKpB,MAAM+9B,iBAC/Bp2B,QAASi2B,KAEjB51B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACfF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,YAAYoH,KAAK,QAAQxG,QAAQ,YACvCT,QAAS,kBAAM7I,EAAKpB,MAAM+9B,kBADlC,YAOR3vB,MAAOovB,EAAQvR,IAAIO,SAASE,SAC5BoG,UAAW9qB,EAAA3B,EAAA4B,cAAA,QAAM+1B,KAAK,aAAaP,KAE3Cz1B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACg2B,GAAD,CACI11B,QAASA,EACTzE,MAAS05B,EACTL,iBAAoB,SAACe,GAAD,OAAe98B,EAAKpB,MAAMm9B,iBAAiBe,OAGvEl2B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KAC8B,IAAzBwyB,GACD11B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYwG,KAAK,QACzBjH,QAAS,kBAAM7I,EAAKpB,MAAMm+B,iBADlC,YAGCT,IAAyBC,GAC1B31B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACvCG,QAAS,kBAAM7I,EAAKpB,MAAMo+B,aADlC,UAtCRp2B,EAAA3B,EAAA4B,cAACsP,GAAD,OA5BR,IAAItY,EAAWb,EAAWY,cAFX,OAGfJ,QAAQC,IAAI,WAAYI,GACxBmC,EAAKZ,MAAQ,CACTyrB,IAAK,GACL+Q,gBAAkB,IANP57B,6BADyBgH,IAAMC,WCGhDg2B,eAEF,SAAAA,EAAYr+B,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAs3B,IACfj9B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAw3B,GAAAn3B,KAAAH,KAAM/G,KAMVqH,kBAAoB,WAChBxG,EAAOqC,SAASpC,aADM,IAAAw9B,EAEal9B,EAAKpB,MAAM+U,MAAMC,OAA9CF,EAFgBwpB,EAEhBxpB,SAAU6L,EAFM2d,EAEN3d,eAChB/hB,QAAQC,IAAI,sBAAuBuC,EAAKpB,MAAME,WAC9BkB,EAAKpB,MAAME,UAAYkB,EAAKpB,MAAME,SAASI,SAAYc,EAAKpB,MAAME,SAASI,SAAW,IAC1FuB,QAAQ,wBAA0B,EAC1CT,EAAKpB,MAAMu+B,4BAA4B5d,GAGvCvf,EAAKpB,MAAMw+B,kBAAkB1pB,EAAU6L,IAhB5Bvf,EAoBnB28B,cAAgB,SAACU,GACb7/B,QAAQC,IAAI,sBAAuBuC,EAAKpB,MAAME,WAC9BkB,EAAKpB,MAAME,UAAYkB,EAAKpB,MAAME,SAASI,SAAYc,EAAKpB,MAAME,SAASI,SAAW,IAC1FuB,QAAQ,wBAA0B,EAC1CT,EAAKpB,MAAM0+B,4BAA4BD,GAGvCr9B,EAAKpB,MAAM2+B,cAAcF,IA3Bdr9B,EA+BnBw9B,gBAAkB,SAACC,GACfz9B,EAAKoG,SAAS,CACVs3B,aAAcD,KAjCHz9B,EAsCnB2G,OAAS,WAAM,IAAA4W,EACqDvd,EAAKpB,MAA/Dy+B,EADK9f,EACL8f,oBAAqBlB,EADhB5e,EACgB4e,gBAAiBh6B,EADjCob,EACiCpb,OAAQgF,EADzCoW,EACyCpW,QAC9Cu2B,EAAiB19B,EAAKZ,MAAtBs+B,aAKN,OAHAlgC,QAAQC,IAAI,WAAYuC,EAAKpB,OAC7BpB,QAAQC,IAAI,eAAgBigC,GAExBL,EA6BJz2B,EAAA3B,EAAA4B,cAAA,WAEQw2B,GACAA,EAAoBZ,eACpBY,EAAoBZ,cAAc7M,yBAClChpB,EAAA3B,EAAA4B,cAAC82B,GAAD,CACIlwB,WAAY4vB,EAAoBtzB,GAChCqE,gBAAiB,SAACqvB,GAAD,OAAYz9B,EAAKw9B,gBAAgBC,OAIxC,YAAjBC,GACDL,GACIA,EAAoBZ,gBACnBY,EAAoBZ,cAAc7M,0BACvChpB,EAAA3B,EAAA4B,cAAC+2B,GAAD,CACIz2B,QAASA,EACTzE,MAAO26B,EACPlB,gBAAiBA,EACjBJ,iBAAmB,SAACe,GAAD,OAAe98B,EAAKpB,MAAMi/B,eAAef,EAAWX,EAAiBkB,EAAoBZ,cAActQ,OAC1H4Q,aAAc,kBAAM/8B,EAAKpB,MAAMk/B,aAAa3B,EAAiBkB,EAAoBZ,cAActQ,OAC/F6Q,SAAU,kBAAMh9B,EAAKpB,MAAMm/B,SAAS5B,EAAiBkB,EAAoBZ,cAActQ,OACvFwQ,cAAe,kBAAM38B,EAAK28B,cAAcU,OAlDzCl7B,EAEKyE,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACV3E,EAAOK,SAEZoE,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,KAAGrG,KAAK,IAAIqI,QAAS,kBAAMhK,OAAOm/B,SAClCl3B,UAAU,qBADV,oCAMTF,EAAA3B,EAAA4B,cAACsP,GAAD,OAzDXnW,EAAKZ,MAAQ,CACTs+B,aAAc,UAHH19B,6BAFiBgH,IAAMC,WAuH/BoN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM6+B,kCAEc,SAAAh7B,GAAQ,MAAK,CACpCi7B,cAAe,SAAC3qB,GAAD,OAAkBtQ,ECnFU,SAAAA,GAC3C,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASb,qBAAuB,YAIjDmB,EAAWC,QAAQtC,GACNK,KAAK,SAAClD,GACHF,EAAWC,MAAMC,GACjB,IAAIW,EAAWb,EAAWY,cAC1BqF,EAAS,CACLC,KA1CM,qBA2CNC,QAAStF,IAEb+B,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhDW,0BAiDXC,QAAS7C,IAEbT,EAAOS,UD+D3B88B,kBAAmB,SAAC7pB,GAAD,OAAkBtQ,ECzDR,SAACsQ,GAAD,OAAkB,SAAAtQ,GAChCjG,EAAWY,cAA1B,IACImC,EAAMN,EAAOqC,SAASb,qBAAuB,YAC7Ck9B,EAAkB,CAClB5qB,aAAcA,GAElBnR,EAAWK,SAAS1C,EAAKo+B,GAChB/9B,KAAK,SAAClD,GACHM,QAAQC,IAAI,oBAAqBP,GAC9BA,GAAOA,EAAIG,MAAQH,EAAIG,KAAKmF,SAC3BS,EAAS,CACLC,KAtEc,yBAuEdC,QAASjG,EAAIG,OAEjBL,EAAWqB,UAGX4E,EAAS,CACLC,KAjFmB,8BAkFnBC,QAASjG,EAAIG,UDsCa+/B,CAAkB7pB,KAChE4pB,4BAA6B,SAAC5d,GAAD,OAAoBtc,ECjCV,SAACsc,GAAD,OAAoB,SAAAtc,GAC5CjG,EAAWY,cAA1B,IACImC,EAAMN,EAAOqC,SAASb,qBAAuB,sBAC7CyB,EAAQ,CACR6c,eAAgBA,GAEpBnd,EAAWK,SAAS1C,EAAK2C,GAChBtC,KAAK,SAAClD,GACHM,QAAQC,IAAI,8BAA+BP,GACxCA,GAAOA,EAAIG,MAAQH,EAAIG,KAAKmF,SAC3BS,EAAS,CACLC,KA/Fc,yBAgGdC,QAASjG,EAAIG,OAEjBL,EAAWqB,UAGX4E,EAAS,CACLC,KA1GmB,8BA2GnBC,QAASjG,EAAIG,UDcyB8/B,CAA4B5d,KACtFse,eAAgB,SAACf,EAAWX,EAAiB1P,GAA7B,OAAyCxpB,ECjH/B,SAACm7B,EAAajC,EAAiB1P,GAA/B,OAA2C,SAAAxpB,GACrEzF,QAAQC,IAAI,mBAAoB0+B,GAGrBA,EAAgBpyB,GAE3B0iB,EAAQhgB,IAAI,SAACse,EAASre,GAClB,GAAIqe,EAAQiH,QAAUmK,EAAgBnK,OAC/BjH,EAAQiR,mBACPjR,EAAQiR,kBAAkBC,aAAc,CACpC,IAAIoC,EAAiBtT,EAAQiR,kBAAkBC,aAAax7B,QAAQ29B,GACjEC,GAAkB,EACjBtT,EAAQiR,kBAAkBC,aAAahK,OAAOoM,EAAgB,GAG9DtT,EAAQiR,kBAAkBC,aAAah9B,KAAKm/B,GAGhDn7B,EAAS,CACLC,KAzBkB,6BA0BlBC,QAAS4nB,QD6FqC8S,CAAef,EAAWX,EAAiB1P,KAC7GqR,aAAc,SAAC3B,EAAiBhQ,GAAlB,OAA2BlpB,ECVjB,SAACk5B,EAAiB1P,GAAlB,OAA8B,SAAAxpB,GACtD,GAAGwpB,GAAWA,EAAQ7c,OAAS,EAAE,CAC7B,IAAIyb,EAAqB8Q,EAAgB9Q,mBACzC,GAAGA,GAAsB,EAAG,OAI5BpoB,EAAS,CACLC,KAxHkB,iBAyHlBC,QALcspB,EAAQ6R,KAAK,SAACxqB,GAC5B,OAAOA,EAAKuX,qBAAuBA,EAAqB,QDKdyS,CAAa3B,EAAiBhQ,KAChF4R,SAAU,SAAC5B,EAAiBhQ,GAAlB,OAA2BlpB,ECGjB,SAACk5B,EAAiB1P,GAAlB,OAA8B,SAAAxpB,GAClD,GAAGwpB,GAAWA,EAAQ7c,OAAS,EAAE,CAC7B,IAAIyb,EAAqB8Q,EAAgB9Q,mBACzC,GAAGA,GAAsBoB,EAAQ7c,OAAO,EAAG,OAI3C3M,EAAS,CACLC,KArIc,aAsIdC,QALcspB,EAAQ6R,KAAK,SAACxqB,GAC5B,OAAOA,EAAKuX,qBAAuBA,EAAqB,QDRlB0S,CAAS5B,EAAiBhQ,KACxEoR,cAAe,SAACF,GAAD,OAAyBp6B,ECgBf,SAACo6B,GAAD,OAAyB,SAAAp6B,GAClD,IAAIlD,EAAMN,EAAOqC,SAASb,qBAAuB,gBAEjDmB,EAAWK,SAAS1C,EAAKs9B,GAChBj9B,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA/IkB,yBAgJlBC,QAASjG,EAAIG,SAGpB+C,KAAK,WACFpD,EAAWqB,YD3B0Bk/B,CAAcF,KAC/DC,4BAA6B,SAACD,GAAD,OAAyBp6B,EC8Bf,SAACo6B,GAAD,OAAyB,SAAAp6B,GAChE,IAAIlD,EAAMN,EAAOqC,SAASb,qBAAuB,uBAEjDmB,EAAWK,SAAS1C,EAAKs9B,GAChBj9B,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA9JkB,yBA+JlBC,QAASjG,EAAIG,SAGpB+C,KAAK,WACFpD,EAAWqB,YDzCwCi/B,CAA4BD,OAEhFhpB,CAA6C4oB,IE1C7CsB,GAhFY,SAAC3/B,GAAU,IAC5B8D,EAAU9D,EAAV8D,MAGN,OACIkE,EAAA3B,EAAA4B,cAAA,WACKnE,GACLkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIkD,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,sBAEX1C,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACQ2B,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAE/BrO,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAO+Z,WAC1Cvc,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,gBACNP,MAAOnS,EAAM87B,aAAe97B,EAAM87B,aAAe,GACjDnpB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,iBACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAO+Z,WAC1Cvc,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,UACNP,MAAOnS,EAAM+7B,QAAU/7B,EAAM+7B,QAAU,GACvCppB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,YACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOs1B,SAC1C93B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,eACHqL,MAAM,MACNP,MAAOnS,EAAMi8B,UAAYj8B,EAAMi8B,UAAY,GAC3CtpB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,cACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOs1B,SAC1C93B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,eACHqL,MAAM,MACNP,MAAOnS,EAAMk8B,IAAMl8B,EAAMk8B,IAAM,GAC/BvpB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOs1B,SAC1C93B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,iBACHqL,MAAM,QACNP,MAAOnS,EAAMoW,MAAQpW,EAAMoW,MAAQ,GACnCzD,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,UACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOs1B,SAC1C93B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,iBACNP,MAAOnS,EAAMm8B,cAAgBn8B,EAAMm8B,cAAgB,GACnDxpB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,kBACrDU,OAAO,SACPjM,QAAQ,mBAW9BF,GAAO,CACT+Z,UAAW,CACP5R,MAAO,OACPlI,YAAa,MAGjBq1B,QAAS,CACLntB,MAAO,MACPlI,YAAa,KACby1B,aAAc,MAElB1nB,aAAc,CACV3M,WAAY,OAEhB2L,OAAQ,CACJiB,gBAAiB,SC/FnB0nB,eAEF,SAAAA,EAAYngC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAo5B,IACf/+B,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAs5B,GAAAj5B,KAAAH,KAAM/G,KAMV8Y,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KARP9H,EAWnB2X,YAAc,WACV3X,EAAKoG,SAAS,CAAE0B,MAAM,KAZP9H,EAenB4X,aAAe,WACb5X,EAAKpB,MAAMsW,SAASlV,EAAKpB,MAAM8D,OAC/B1C,EAAK2X,eAjBY3X,EAoBnB2G,OAAS,WAAM,IACLjE,EAAU1C,EAAKpB,MAAf8D,MAEN,OACIkE,EAAA3B,EAAA4B,cAAA,WACCnE,GACDkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,KACI2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYZ,MAAM,UAAUG,QAAS7I,EAAK0X,iBAAiB9Q,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,OAC3EzX,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAqZ,WAAS,EACT6b,SAAS,KACTl3B,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aAA3B,sBACA/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAC5BtP,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,WACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMu8B,QAAUv8B,EAAMu8B,QAAU,GACvC5pB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,YAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,gBACHqL,MAAM,cACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMwU,YAAcxU,EAAMwU,YAAc,GAC/C7B,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,gBAC1DU,OAAO,SACPjM,QAAQ,eAIhB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC/BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,eACHqL,MAAM,MACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMw8B,SAAWx8B,EAAMw8B,SAAW,EACzC7pB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,aAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,WACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMy8B,UAAYz8B,EAAMy8B,UAAY,GAC3C9pB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,cAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,6BACHqL,MAAM,oBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM08B,kBAAoB18B,EAAM08B,kBAAoB,GAC3D/pB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,sBAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,oBACHqL,MAAM,UACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM28B,SAAW38B,EAAM28B,SAAW,GACzChqB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,aAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,6BACHqL,MAAM,0BACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM48B,kBAAoB58B,EAAM48B,kBAAoB,GAC3DjqB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,sBAC1DU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAID,GAAI,GAAIE,GAAI,GAC3BrN,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,8BACHqL,MAAM,sBACN4B,WAAS,EACTC,KAAK,IACLnQ,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM68B,mBAAqB78B,EAAM68B,mBAAqB,GAC7DlqB,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,uBAC1DU,OAAO,SACPjM,QAAQ,kBAO5B1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC/BG,QAAU,kBAAM7I,EAAK4X,aAAa5X,EAAKpB,MAAM8D,SAD7D,oBApJhB1C,EAAKZ,MAAQ,CACT0I,MAAM,GAHK9H,6BAFKiH,aAoKtBmC,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAGV0nB,MC1HT5kB,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,GAINI,KAAM,CACJrH,SAAU,MANQgH,CAQpBM,MACW8kB,GA7DQ,SAAC5gC,GACpB,OACIgI,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAC44B,GAAD,CACIvqB,SAAW,SAACwqB,GAAD,OAAa9gC,EAAM+gC,gBAAgBD,IAC9Ch9B,MAAO9D,EAAMghC,gBACb7oB,cAAgB,SAACwC,EAAKC,GAAN,OAAgB5a,EAAMihC,qBAAqBtmB,EAAKC,MAG5ExM,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,YAAAnK,OAA6CP,EAAMkhC,YAAc,IAAIlhC,EAAMkhC,YAAYlwB,OAAO,IAAM,OAE3GhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACA2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACk5B,GAAD,kBACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,oBACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,YACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,iBACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,0BACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,gBACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,mDACAn5B,EAAA3B,EAAA4B,cAACk5B,GAAD,8BAGJn5B,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACCrG,EAAMkhC,YAAYrzB,IAAI,SAACizB,EAAShzB,GAAV,OACnB9F,EAAA3B,EAAA4B,cAACgc,EAAA,SAAD,CAAUzhB,IAAKsL,GACf9F,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQT,SAC1Br4B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQxoB,aAC1BtQ,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQR,UAC1Bt4B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQP,WAC1Bv4B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQN,mBAC1Bx4B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQL,UAC1Bz4B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQJ,mBAC1B14B,EAAA3B,EAAA4B,cAACk5B,GAAD,KAAkBL,EAAQH,4BAMvC3gC,EAAMkhC,aAA4C,IAA7BlhC,EAAMkhC,YAAYlwB,SAC1ChJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,YAAY2J,MAAM,UAAtC,iCCMG+sB,GApDU,SAACphC,GAAU,IAC1B8D,EAAU9D,EAAV8D,MACN,OACIkE,EAAA3B,EAAA4B,cAAA,WACKnE,GACLkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIkD,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,oFAEX1C,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACQ2B,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OACnCrO,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAO62B,WAC1Cr5B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,wBACHqL,MAAM,mBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMw9B,aAAex9B,EAAMw9B,aAAe,GACjD7qB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,iBACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAO62B,WAC1Cr5B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,sBACHqL,MAAM,yBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAMy9B,WAAaz9B,EAAMy9B,WAAa,GAC7C9qB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,eACrDU,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,qBACN4B,WAAS,EACTC,KAAK,IACLnQ,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+7B,QAAU/7B,EAAM+7B,QAAU,GACvCppB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,YACrDU,OAAO,SACPjM,QAAQ,mBAW1BF,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP9G,WAAY,MAEhBw1B,UAAW,CACP1uB,MAAO,MACP9G,WAAY,MAEhB2L,OAAQ,CACJiB,gBAAiB,SC7DV+oB,GAVe,SAACxhC,GAC3B,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,gBACfF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,2IACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,wEACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,qEACA1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,6GCMO+2B,GAZO,SAACzhC,GACnB,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,gBACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,WAApB,sCACmC1C,EAAA3B,EAAA4B,cAAA,WADnC,iCAGAD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,kDAC+C1C,EAAA3B,EAAA4B,cAAA,WAD/C,kDAE2DD,EAAA3B,EAAA4B,cAAA,kCCkExDy5B,GA1DgB,SAAC1hC,GAAU,IAChC8D,EAAU9D,EAAV8D,MACNA,EAAM69B,gBAAmB79B,EAAM69B,gBAAuB79B,EAAM69B,gBAAX,GACjD79B,EAAMo9B,YAAep9B,EAAMo9B,YAAmBp9B,EAAMo9B,YAAX,GACzCp9B,EAAMk9B,gBAAmBl9B,EAAMk9B,gBAAuBl9B,EAAMk9B,gBAAX,GACjDl9B,EAAM89B,cAAiB99B,EAAM89B,cAAqB99B,EAAM89B,cAAX,GAG7C,OACI55B,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACXtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAAC45B,GAAAx7B,EAAD,OAGJ+H,MAAM,uBAElBpG,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC65B,GAAD,CACIh+B,MAAOA,EAAM69B,gBACbxpB,cAAe,SAACwC,EAAKC,GAAN,OAAgB5a,EAAMmY,cAAcwC,EAAKC,EAAO9W,MAEnEkE,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAC85B,GAAD,CACIf,gBAAiBl9B,EAAMk9B,gBACvBE,YAAap9B,EAAMo9B,YACnBD,qBAAsB,SAACtmB,EAAKC,GAAN,OAAgB5a,EAAMihC,qBAAqBtmB,EAAKC,EAAO9W,IAC7Ei9B,gBAAiB,SAACiB,GAAD,OAAiBhiC,EAAM+gC,gBAAgBiB,EAAal+B,MAEzEkE,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAACg6B,GAAD,CACIn+B,MAAOA,EAAM89B,cACbzpB,cAAe,SAACwC,EAAKC,GAAN,OAAgB5a,EAAMkiC,2BAA2BvnB,EAAKC,EAAO9W,MAEhFkE,EAAA3B,EAAA4B,cAACk6B,GAAD,MACAn6B,EAAA3B,EAAA4B,cAACm6B,GAAD,MAEAp6B,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOs1B,SAC1C93B,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,YACNP,MAAOnS,EAAM04B,QAAU14B,EAAM04B,QAAU,GACvC/lB,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,UAAWnS,IAChE6S,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAACsQ,GAAAlS,EAAD,CAAakE,MAAOC,GAAOgO,cACvBxQ,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UACnCG,QAAU,kBAAMjK,EAAMsW,SAASxS,KAD3C,aASd0G,GAAO,CACT+Z,UAAW,CACP5R,MAAO,OACPlI,YAAa,MAGjBq1B,QAAS,CACLntB,MAAO,MACPlI,YAAa,KACby1B,aAAc,MAElB1nB,aAAc,GAGdhB,OAAQ,CACJiB,gBAAiB,SC7BnB8C,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,GAINI,KAAM,CACJrH,SAAU,MANQgH,CAQpBM,MACWumB,GA9DQ,SAACriC,GAAU,IACxBsiC,EAAgBtiC,EAAhBsiC,YACFC,EAAcD,EAIlB,OAHGA,GAAeA,EAAYtxB,OAAS,IACnCuxB,EAAcD,EAAYE,WAG1Bx6B,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OACI5P,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAE1N,SAAU,eACnB0H,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQR,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,WAA/C,uBAKZsE,MAAOpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAApB,gBAAAnK,OAAiDP,EAAMsiC,YAAc,IAAItiC,EAAMsiC,YAAYtxB,OAAO,IAAM,OAE/GhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACA2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACw6B,GAAD,sBACAz6B,EAAA3B,EAAA4B,cAACw6B,GAAD,cACAz6B,EAAA3B,EAAA4B,cAACw6B,GAAD,uBACAz6B,EAAA3B,EAAA4B,cAACw6B,GAAD,kBACAz6B,EAAA3B,EAAA4B,cAACw6B,GAAD,QAGJz6B,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACCk8B,GAAeA,EAAY10B,IAAI,SAAC60B,EAAY50B,GAAb,OAC5B9F,EAAA3B,EAAA4B,cAACgc,EAAA,SAAD,CAAUzhB,IAAKsL,GACf9F,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACw6B,GAAD,KAAkBC,EAAWf,gBAAgB/B,cAC7C53B,EAAA3B,EAAA4B,cAACw6B,GAAD,KAAkBC,EAAWf,gBAAgBznB,OAC7ClS,EAAA3B,EAAA4B,cAACw6B,GAAD,KAAkBC,EAAWf,gBAAgB1B,eAC7Cj4B,EAAA3B,EAAA4B,cAACw6B,GAAD,KAAkBC,EAAWf,gBAAgB5B,WAC7C/3B,EAAA3B,EAAA4B,cAACw6B,GAAD,CAAiBpuB,MAAM,QAAQkI,MAAM,MAAMD,UAAU,MACjDtU,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUG,QAAS,kBAAMjK,EAAM2iC,UAAUD,KAAvD,iBAOjB1iC,EAAMsiC,aAA4C,IAA7BtiC,EAAMsiC,YAAYtxB,SAC1ChJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,YAAY2J,MAAM,UAAtC,4BCvCNuuB,8MAEFv7B,kBAAoB,WAChBjG,EAAKjB,YAGTA,OAAS,WACLiB,EAAKpB,MAAM6iC,yBAGfjb,oBAAsB,WAClBhpB,QAAQC,IAAI,qBACTuC,EAAKpB,MAAM6nB,kBACVjpB,QAAQC,IAAI,8BACZuC,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,qBAKtBwnB,0BAA4B,WACxBlpB,QAAQC,IAAI,gCACTuC,EAAKpB,MAAM6nB,iBACVjpB,QAAQC,IAAI,+CAIpBkJ,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAA,WACK7G,EAAKpB,MAAM8iC,qBACR96B,EAAA3B,EAAA4B,cAAC86B,GAAD,CACIzsB,SAAW,SAACxS,GAAD,OAAW1C,EAAKpB,MAAMgjC,cAAcl/B,IAC/CA,MAAO1C,EAAKpB,MAAM8iC,oBAClB3qB,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMijC,6BAA6BtoB,EAAKC,EAAO9W,IAC3Fo+B,2BAA6B,SAACvnB,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMkjC,yBAAyBvoB,EAAKC,EAAO9W,IACpGi9B,gBAAiB,SAACiB,EAAal+B,GAAd,OAAwB1C,EAAKpB,MAAMmjC,gBAAgBnB,EAAal+B,IACjFm9B,qBAAsB,SAACtmB,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAMojC,mBAAmBzoB,EAAKC,EAAO9W,MAG9F1C,EAAKpB,MAAM6nB,kBAAoBzmB,EAAKpB,MAAMqjC,QACvCr7B,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,WAAW,EAAMhK,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAC/C/C,aAAc,oCAErBhiB,EAAKpB,MAAMqjC,QACRr7B,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,WAAW,EAAMhK,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAC/C/C,aAAc,6CAhDDhb,IAAMC,WAmE5BoN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM8iC,aAEc,SAAAj/B,GAAQ,MAAK,CACpC2+B,cAAe,SAACl/B,GAAD,OAAWO,GCJAk/B,EDIuBz/B,ECJH,SAAAO,GAC9CA,EAAS,CACLC,KArE6B,0BAuEjC,IAAInD,EAAMN,EAAO2iC,aAAe,aAChC5kC,QAAQC,IAAI,gBACZD,QAAQC,IAAI0kC,GAEZ//B,EAAWK,SAAS1C,EAAKoiC,GACpB/hC,KAAK,SAAClD,GACHM,QAAQC,IAAI,sBAAwBP,GACpC+F,EAAS,CACLC,KA9EuB,0BA+EvBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAnFoB,uBAoFpBC,QAAS7C,SAnBI,IAAC6hC,GDK1Bpd,cAAe,kBAAM9hB,EC2FU,SAAAA,GAC/BA,EAAS,CACLC,KAtJsB,sBD0D1BiiB,aAAc,kBAAMliB,EC+FU,SAAAA,GAC9BA,EAAS,CACLC,KA1JqB,qBD0DzB2+B,6BAA8B,SAACtoB,EAAKC,EAAO9W,GAAb,OAAuBO,EClDb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAClD,YAAVuW,EACC9W,EAAM04B,QAAU7hB,GAGZ7W,EAAM69B,kBAAiB79B,EAAM69B,gBAAkB,IACnD79B,EAAM69B,gBAAgB/mB,GAASD,EAC/B7W,EAAM2/B,cAAgB3/B,EAAM2/B,iBAEhCp/B,EAAS,CACLC,KArBwC,mCAsBxCC,QAAST,KDuCiDm/B,CAA6BtoB,EAAKC,EAAO9W,KACvGs/B,mBAAoB,SAACzoB,EAAKC,EAAO9W,GAAb,OAAuBO,ECjBb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GACjDP,EAAMk9B,kBAAiBl9B,EAAMk9B,gBAAkB,IACnDl9B,EAAMk9B,gBAAgBpmB,GAASD,EAC/BtW,EAAS,CACLC,KAjDwC,mCAkDxCC,QAAST,KDYuCs/B,CAAmBzoB,EAAKC,EAAO9W,KACnFo/B,yBAA0B,SAACvoB,EAAKC,EAAO9W,GAAb,OAAuBO,EC3Bb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GACvDP,EAAM89B,gBAAe99B,EAAM89B,cAAgB,IAC/C99B,EAAM89B,cAAchnB,GAASD,EAC7BtW,EAAS,CACLC,KAxCwC,mCAyCxCC,QAAST,KDsB6Co/B,CAAyBvoB,EAAKC,EAAO9W,KAC/Fq/B,gBAAiB,SAACnB,EAAal+B,GAAd,OAAwBO,ECtCd,SAAC29B,EAAal+B,GAAd,OAAwB,SAAAO,GAC/CP,EAAMo9B,cAAap9B,EAAMo9B,YAAc,IAC3Cp9B,EAAMo9B,YAAY7gC,KAAK2hC,GACvBpjC,QAAQC,IAAI,oBAAqBiF,EAAMo9B,YAAYlwB,QACnD3M,EAAS,CACLC,KA/BwC,mCAgCxCC,QAAST,KDgCqCq/B,CAAgBnB,EAAal+B,KAC/E++B,oBAAqB,kBAAMx+B,EC5DU,SAAAA,GACrCA,EAAS,CACLC,KArB6B,+BDiFtBmR,CAA6CmtB,IEa7Cc,8MA1FXC,sBAAwB,SAAChC,GACrB,OACI35B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,GAAI1K,MAAOC,GAAOo5B,OAC/B57B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,iBAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS05B,EAAgB/B,eAE7B53B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,kBAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS05B,EAAgB1B,gBAE7Bj4B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,aAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS05B,EAAgB5B,YAE7B/3B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,SAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS05B,EAAgBznB,YAOjD2pB,oBAAsB,SAACjC,GACnB,OACI55B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,GAAI1K,MAAOC,GAAOo5B,OAC3C57B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,iBAGJpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS25B,EAAcN,eAE3Bt5B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,eAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS25B,EAAcL,aAE3Bv5B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAAf,YAGApN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GACXpN,EAAA3B,EAAA4B,cAAA,cAAS25B,EAAc/B,cAM/B93B,OAAS,WAAM,IACLjE,EAAU1C,EAAKpB,MAAf8D,MAEN,OADAlF,QAAQC,IAAI,WAAYiF,GAEpBkE,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACI0M,OAEQ5P,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQpB,MAAM,UAAUoH,KAAK,QACzBjH,QAAS,kBAAM7I,EAAKpB,MAAM8jC,wBAD9B,wBAMR11B,MAAK,iBAAA7N,OAAmBuD,EAAK,SAEjCkE,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMiJ,WAAS,EAACc,QAAS,IACpB7T,EAAKuiC,sBAAsB7/B,EAAM69B,iBAClC35B,EAAA3B,EAAA4B,cAAA,WACC7G,EAAKyiC,oBAAoB//B,EAAM89B,eAChC55B,EAAA3B,EAAA4B,cAAC85B,GAAD,CACIb,YAAap9B,EAAMo9B,cAEtBp9B,EAAM04B,SAAWx0B,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMgK,MAAI,EAACE,GAAI,GAC7BpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMsL,MAAK,gBAAAjW,OAAkBuD,EAAM04B,6CApFlCp0B,IAAMC,WA6F7BmC,GAAS,CACXo5B,MAAO,CACHtsB,QAAS,OCzFXysB,8MAEF18B,kBAAoB,WAChBzI,QAAQC,IAAI,aACZuC,EAAKjB,YAGTynB,oBAAsB,WACgB,KAA/BxmB,EAAKpB,MAAM6nB,iBACVzmB,EAAKpB,MAAMgkC,sBAInB7jC,OAAS,WACLiB,EAAKpB,MAAMgkC,sBAGfj8B,OAAS,WACL,IAAIu6B,EAGJ,OAFAA,EAAclhC,EAAKpB,MAAMsiC,cACV1jC,QAAQC,IAAI,qBAAsByjC,EAAYtxB,QAEzDhJ,EAAA3B,EAAA4B,cAAA,WAC4C,OAAvC7G,EAAKpB,MAAMikC,yBACZj8B,EAAA3B,EAAA4B,cAACi8B,GAAD,CACI5B,YAAaA,EACbK,UAAW,SAACD,GAAD,OAAgBthC,EAAKpB,MAAMmkC,iBAAiBzB,MAE1DthC,EAAKpB,MAAMikC,yBACZj8B,EAAA3B,EAAA4B,cAACm8B,GAAD,CACItgC,MAAO1C,EAAKpB,MAAMikC,wBAClBH,oBAAqB,kBAAM1iC,EAAKpB,MAAMqkC,yBAE1Cr8B,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,8DAnCIhb,IAAMC,WAkD7BoN,eAVS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM8iC,aAEc,SAAAj/B,GAAQ,MAAK,CACpC2/B,iBAAkB,kBAAM3/B,EF2DU,SAAAA,GAClCA,EAAS,CACLC,KA7G+B,4BA+GnC,IAAInD,EAAMN,EAAO2iC,aAAe,cAChChgC,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACHM,QAAQC,IAAI,wBACZwF,EAAS,CACLC,KAnHyB,4BAoHzBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KApHsB,yBAqHtBC,QAAS7C,SE1ErByiC,iBAAkB,SAACzB,GAAD,OAAgBr+B,EFkGN,SAACq+B,GAAD,OAAgB,SAAAr+B,GAC5CA,EAAS,CACLC,KAjJ0B,qBAkJ1BC,QAASm+B,KErG8ByB,CAAiBzB,KAC5D2B,oBAAqB,kBAAMhgC,EFwGU,SAAAA,GACrCA,EAAS,CACLC,KAvJ8B,8BE8ClC6hB,cAAe,kBAAM9hB,EF6GU,SAAAA,GAC/BA,EAAS,CACLC,KAtJsB,sBEwC1BiiB,aAAc,kBAAMliB,EFiHU,SAAAA,GAC9BA,EAAS,CACLC,KA1JqB,uBEyCdmR,CAA6CsuB,aC1CtDO,GAAe,WAEjB,QADYxlC,aAAaI,QAAQ,eAyHtBqlC,GAtIM,SAAAl0B,GAA8C,IAAhChI,EAAgCgI,EAA3CiM,UAAiCkoB,GAAUn0B,EAArBo0B,OAAqB59B,OAAA69B,GAAA,EAAA79B,CAAAwJ,EAAA,yBAE/D,OADAzR,QAAQC,IAAI,SAAUylC,MAElBt8B,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD99B,OAAAglB,OAAA,GACQ2Y,EADR,CAEIz8B,OAAQ,SAAC/H,GAAD,OAA8B,IAAnBskC,KACbt8B,EAAA3B,EAAA4B,cAACI,EAADxB,OAAAglB,OAAA,GAAe2Y,EAAUxkC,IACzBgI,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAU32B,GAAI,CAAC1N,SAAU,iBCErCskC,8MAEFv9B,kBAAoB,WAChBzI,QAAQC,IAAI,yBAA0BuC,EAAKpB,MAAM6c,aACjDje,QAAQC,IAAI,wBAAyBuC,EAAKpB,MAAM6O,YAChDzN,EAAKpB,MAAM6kC,6BAA6BzjC,EAAKpB,MAAM6O,WAAYzN,EAAKpB,MAAM6c,gBAQ9E9U,OAAS,WAAM,IAAAsI,EACkBjP,EAAKpB,MAA5B8kC,oBAE4C,GAD5CjH,EAFKxtB,EAELwtB,cAAekH,EAFV10B,EAEU00B,gBAAiBC,EAF3B30B,EAE2B20B,gBAChCC,EAHK50B,EAGL40B,kBACA1X,GAASsQ,GAAiB,IAA1BtQ,KAEF2X,EAAU,CACVvH,eAAiBpQ,EAAOA,EAAKvc,OAAS,EACtCm0B,oBAAqB,EACrBC,WAAY,KACZC,eAAgB,KAChBzwB,OAAQ,KACRgI,YAAa,MAEb0oB,EAAoB,GA+CxB,OA9CG/X,GAAQA,EAAKvc,OAAS,GACrBuc,EAAK1f,IAAI,SAACse,EAASre,GACf,IAAIme,EAAME,EAAQF,IAAIO,SAClB4Q,EAAoBjR,EAAQiR,kBAAoBjR,EAAQiR,kBAAkBC,aAAaj3B,OAAOq1B,KAAK,IAAM,GACzG8J,EAAkBN,EAAkBlc,OAAO,SAAC7T,GAC5C,OAAOA,EAAKke,QAAUjH,EAAQF,IAAI9gB,KAElCq6B,EAAgB,GACjBD,GAAmBA,EAAgBv0B,OAAS,IAC3Cw0B,EAAgBD,EAAgB,GAAGC,eAEnCA,GACAvZ,EAAIX,QAAQpM,QAAQ,SAAC+d,IACW,IAAzBA,EAAWtR,YACV6Z,GAAiBvI,EAAWz6B,OAIrC46B,IAAsBoI,GACrBN,EAAQC,sBAEZG,EAAkBjlC,KAAK,CACnB4rB,MACAmR,oBACAoI,gBACA7Z,UAAWyR,IAAsBoI,MAI1C3H,GAAiBA,EAAc4H,iBAC9BP,EAAQG,eAAiBx/B,EAAiBg4B,EAAc4H,gBAAiB,GACzEP,EAAQE,WAAavH,EAAcuH,WACnCF,EAAQtwB,OAASipB,EAAcjpB,QAE3BowB,GAAmBA,EAAgBS,kBACvCP,EAAQG,eAAiBx/B,EAAiBm/B,EAAgBS,gBAAiB,GAC3EP,EAAQE,WAAaJ,EAAgBI,WACrCF,EAAQtwB,OAASowB,EAAgBpwB,QAElCmwB,GAAmBA,EAAgBnoB,YAClCsoB,EAAQtoB,YAAchY,EAAYmgC,EAAgBnoB,aAE9CooB,GAAmBA,EAAgBpoB,cACvCsoB,EAAQtoB,YAAchY,EAAYogC,EAAgBpoB,cAIlD5U,EAAA3B,EAAA4B,cAAA,YACMslB,GAAQvlB,EAAA3B,EAAA4B,cAACsP,GAAD,MACTgW,GAAwB,IAAhBA,EAAKvc,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,uBAC7B6iB,GAAQA,EAAKvc,OAAS,GACvBhJ,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACC7S,EAAKskC,cAAcR,GACpBl9B,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAvB,UACArM,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAvB,SACArM,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAvB,YACArM,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAvB,WACArM,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAvB,cAIRrM,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACKi/B,EAAkBz3B,IAAI,SAAC+3B,EAAc93B,GAqBtC,OACI9F,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,CAAU7D,IAAKsL,EACX5F,UAAW09B,EAAaja,UAAY,aAAe,wBAEnD3jB,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,UAAUuxB,EAAa3Z,IAAIQ,mBAAmB,GACrEzkB,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,QAAQuxB,EAAa3Z,IAAIS,UAEhD1kB,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,OACnBmX,wBAAyB,CACrBC,OAAQtN,GAAwBynB,EAAa3Z,IAAI3T,gBAIzDtQ,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,UAAUuxB,EAAaJ,eAC9Cx9B,EAAA3B,EAAA4B,cAAC09B,GAAD,CAAiBtxB,MAAM,UAAUuxB,EAAaxI,6BAW1EsI,cAAgB,SAACR,GACb,OACIl9B,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,gCACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAAf,qBACuBg9B,EAAQC,oBAD/B,MACuDD,EAAQvH,kBAIvE31B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAAf,UACQg9B,EAAQG,eADhB,QAKRr9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAAf,WACSg9B,EAAQtwB,WAM7B5M,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAAf,iBACeg9B,EAAQtoB,+CA1KbvU,aAmLhCkT,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CACF3R,MAAOkD,EAAM0O,QAAQC,OAAOC,MAC5BpH,SAAU,GACVqxB,WAAY,KAEhBhqB,KAAM,CACFrH,SAAU,MAPMgH,CASpBM,MACW8oB,MCiEAkB,8MApQXz+B,kBAAoB,WAChBjG,EAAKpB,MAAM+lC,sBAAsB3kC,EAAKpB,MAAM6c,gBAGhD9U,OAAS,WAAM,IAAA4W,EACwBvd,EAAKpB,MAAzBgmC,GADJrnB,EACLpW,QADKoW,EACIqnB,kBAEf,OADApnC,QAAQC,IAAI,mBAAoBmnC,GAC7BA,GAAoBA,EAAiBh1B,OAAS,GAAKg1B,EAAiB,GAAGC,aAC/D7kC,EAAK8kC,iCAAiCF,GAGtC5kC,EAAK+kC,uBAAuBH,MAK3CE,iCAAmC,SAACF,GAChC,IAAII,EAAgBJ,GAAsC,GACtDK,EAAgBL,GAAoBA,EAAiBh1B,OAAS,EAAKg1B,EAAiB,GAAGM,eAAiB,GACxGC,EAAuB,GAAIC,EAAyB,GAaxD,OAZAJ,EAAclnB,QAAQ,SAACunB,GACnB7nC,QAAQC,IAAI,sBAAuB4nC,EAAaljC,QACrB,cAAxBkjC,EAAaljC,OACZijC,EAAuBnmC,KAAKomC,GAG5BF,EAAqBlmC,KAAKomC,KAGlC7nC,QAAQC,IAAI,yBAA0B2nC,GAIlCx+B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACfF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YADlB,IACgCu8B,EAAahnC,OAGjD2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACXF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAO3V,MAAM,YADjB,IACgCu8B,EAAansB,QAGjDlS,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACfF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAM3V,MAAM,YADZ,IAC2Bu8B,EAAaK,WAAaL,EAAaK,WAAa,SAIvF1+B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,sCAEHu+B,GAA0BA,EAAuBx1B,OAAS,GAC3Dw1B,EAAuB34B,IAAI,SAAC44B,EAAc34B,GACtC,OACQ9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdu+B,EAAa5rB,UAAUC,WAG5B9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVu+B,EAAa5rB,UAAUE,OAE5B/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVu+B,EAAa5rB,UAAUI,OAE5BjT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,GAAA3H,OAC4B,cAAxBkmC,EAAaljC,OACT,gBAAkB,GAF1B,0DAAAhD,OAGUqE,EAAY6hC,EAAaE,aAAa,GAHhD,yDAOJ3+B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACdu+B,EAAazB,iBAAb,UAAAzkC,OAA0CsF,EAAiB4gC,EAAazB,gBAAgBS,gBAAiB,GAAzG,aAS7Bz9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,2BAEHs+B,GAAwD,IAAhCA,EAAqBv1B,QAClChJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,6BAGXq+B,GAAwBA,EAAqBv1B,OAAS,GACvDu1B,EAAqB14B,IAAI,SAAC44B,EAAc34B,GACpC,OACQ9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdu+B,EAAa5rB,UAAUC,WAG5B9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVu+B,EAAa5rB,UAAUE,OAE5B/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVu+B,EAAa5rB,UAAUI,OAE5BjT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACdu+B,EAAazB,iBAAmBn/B,EAAiB4gC,EAAazB,gBAAgBS,gBAAiB,KAGpGz9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,GAAA3H,OACIkmC,EAAaG,WACT,iBAAmB,GAF3B,0DAAArmC,OAGUqE,EAAY6hC,EAAaG,YAAY,GAH/C,kEAoBxCT,uBAAyB,SAACH,GACtB,IAAIhqB,EAAcgqB,GAAsC,GACpDK,EAAgBL,GAAoBA,EAAiBh1B,OAAS,EAAKg1B,EAAiB,GAAGM,eAAiB,GACxGO,EAAqB,GAAIC,EAAuB,GAapD,OAZA9qB,EAAYkD,QAAQ,SAAC7C,GACjBzd,QAAQC,IAAI,oCAAqCwd,EAAW0oB,gBAAgBxhC,QACnC,cAAtC8Y,EAAW0oB,gBAAgBxhC,OAC1BujC,EAAqBzmC,KAAKgc,GAG1BwqB,EAAmBxmC,KAAKgc,KAGhCzd,QAAQC,IAAI,uBAAwBioC,GAIhC9+B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACfF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAY3V,MAAM,YADlB,IACgCu8B,EAAahnC,OAGjD2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACXF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAO3V,MAAM,YADjB,IACgCu8B,EAAansB,QAGjDlS,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACfF,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,CAAM3V,MAAM,YADZ,IAC2Bu8B,EAAaK,WAAaL,EAAaK,WAAa,SAIvF1+B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,sCAEH6+B,GAAwBA,EAAqB91B,OAAS,GACvD81B,EAAqBj5B,IAAI,SAACwO,EAAYvO,GAClC,OACQ9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdmU,EAAWxB,UAAUC,WAG1B9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVmU,EAAWxB,UAAUE,OAE1B/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,GAAA3H,OACI8b,EAAW0oB,gBAAgBnoB,YACvB,gBAAkB,GAF1B,0DAAArc,OAGUqE,EAAYyX,EAAW0oB,gBAAgBnoB,aAAa,GAH9D,yDAOJ5U,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBACdmU,EAAWwhB,eAAX,UAAAt9B,OAAsCsF,EAAiBwW,EAAWwhB,cAAc4H,gBAAiB,GAAjG,aAS7Bz9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,2BAEH4+B,GAAoD,IAA9BA,EAAmB71B,QAC9BhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,2BAGX2+B,GAAsBA,EAAmB71B,OAAS,GACnD61B,EAAmBh5B,IAAI,SAACwO,EAAYvO,GAChC,OACQ9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdmU,EAAWxB,UAAUC,WAG1B9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVmU,EAAWxB,UAAUE,OAE1B/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cACdmU,EAAWwhB,eAAiBh4B,EAAiBwW,EAAWwhB,cAAc4H,gBAAiB,KAG5Fz9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,GAAA3H,OACI8b,EAAW0oB,gBAAgBpoB,UACvB,gBAAkB,GAF1B,0DAAApc,OAGUqE,EAAYyX,EAAW0oB,gBAAgBpoB,WAAW,GAH5D,6FAlPNtU,aC6CvB0+B,8MA1CX1/B,kBAAoB,WAChBjG,EAAKpB,MAAMgnC,gBAAgB5lC,EAAKpB,MAAM6O,eAG1C9G,OAAS,WAAM,IAAA4W,EACsCvd,EAAKpB,MAAvC6O,GADJ8P,EACLpW,QADKoW,EACI9P,YAAYo4B,EADhBtoB,EACgBsoB,mBAC3BroC,QAAQC,IAAI,qBAAsBooC,GAClC,IAAIC,EAAU,GAAA3mC,OAAMM,EAAOqC,SAASb,qBAAtB,iBAEd,OAAG4kC,GAAoD,IAA9BA,EAAmBj2B,OAEpChJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,uBAOJF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACd++B,GAAsBA,EAAmBj2B,OAAS,GACnDi2B,EAAmBp5B,IAAI,SAACs5B,EAAer5B,GAEnC,OACI9F,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAOzF,IAAKsL,EAAO6E,MAAM,MAAMC,OAAO,MAAMw0B,UAAQ,GAChDp/B,EAAA3B,EAAA4B,cAAA,UAAQo/B,IAAG,GAAA9mC,OAAK2mC,EAAL,aAAA3mC,OAA2B4mC,EAA3B,gBAAA5mC,OAAuDsO,GAC9DvK,KAAK,gBAEb0D,EAAA3B,EAAA4B,cAAA,KAAGinB,MAAM,aACRiY,uCAjCA9+B,aCD3Bi/B,eACF,SAAAA,EAAYtnC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAugC,IACflmC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAygC,GAAApgC,KAAAH,KAAM/G,KAMV6Y,aAAe,SAAC/N,EAAOmL,GACnB7U,EAAKoG,SAAS,CAAEyO,WARD7U,EAWnB2G,OAAS,WAAM,IACLkO,EAAU7U,EAAKZ,MAAfyV,MACNA,EAAQ7U,EAAKpB,MAAMoxB,kBAAoBnb,EAF5B,IAAA0I,EAGiEvd,EAAKpB,MAA3EgmC,EAHKrnB,EAGLqnB,iBAAkBlB,EAHbnmB,EAGammB,mBAAoBmC,EAHjCtoB,EAGiCsoB,mBAAoB1+B,EAHrDoW,EAGqDpW,QAChE,OACAP,EAAA3B,EAAA4B,cAAA,WAIID,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAQ7B,SAAS,UACbrB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMR,QAAQ,YAAYuL,MAAOA,EAAOQ,SAAUrV,EAAKyX,cACnD7Q,EAAA3B,EAAA4B,cAACs/B,GAAD,CAAS/wB,MAAM,4BAA4B5U,KAAK,UAChDoG,EAAA3B,EAAA4B,cAACs/B,GAAD,CAAS/wB,MAAM,oBAAoB5U,KAAK,UACxCoG,EAAA3B,EAAA4B,cAACs/B,GAAD,CAAS/wB,MAAM,YAAY5U,KAAK,YAG7B,IAAVqU,GACDjO,EAAA3B,EAAA4B,cAACu/B,GAAD,KACIx/B,EAAA3B,EAAA4B,cAACw/B,GAAD,CACIl/B,QAASA,EACTsG,WAAYzN,EAAKpB,MAAM6O,WACvBgO,YAAazb,EAAKpB,MAAM6c,YACxBgoB,6BAA8B,SAACh2B,EAAYgO,GAAb,OAA6Bzb,EAAKpB,MAAM0nC,6BAA6B74B,EAAYgO,IAC/GioB,mBAAoBA,KAGjB,IAAV7uB,GACDjO,EAAA3B,EAAA4B,cAACu/B,GAAD,KACIx/B,EAAA3B,EAAA4B,cAAC0/B,GAAD,CACIp/B,QAASA,EACTsU,YAAazb,EAAKpB,MAAM6c,YACxBkpB,sBAAuB3kC,EAAKpB,MAAM4nC,sBAClC5B,iBAAkBA,KAGf,IAAV/vB,GACDjO,EAAA3B,EAAA4B,cAACu/B,GAAD,KACIx/B,EAAA3B,EAAA4B,cAAC4/B,GAAD,CACIt/B,QAASA,EACTsG,WAAYzN,EAAKpB,MAAM6O,WACvBm4B,gBAAiB5lC,EAAKpB,MAAM8nC,gBAC5Bb,mBAAoBA,OAlDhC7lC,EAAKZ,MAAQ,CACTyV,MAAOjW,EAAMoxB,kBAAoB,GAHtBhwB,6BADYiH,aA6D7BupB,GAAe,SAAC5xB,GAClB,OACEgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYoR,UAAU,MAAM/R,MAAO,CAAE+M,QAAS,KAC3CtX,EAAM6xB,WAKTC,GAAU,SAAC9xB,GACb,OAAOgI,EAAA3B,EAAA4B,cAACiD,EAAA,EAADrE,OAAAglB,OAAA,CAAKvP,UAAU,IAAIrS,QAAS,SAAAa,GAAK,OAAIA,EAAM8K,mBAAsB5V,KAE7DsnC,MClETS,8MAEF1gC,kBAAoB,WAChBjG,EAAKjB,YAGTA,OAAS,eAIT6nC,yBAA2B,SAAClkC,OAO5BiE,OAAS,WAAM,IAAA4W,EAC6Cvd,EAAKpB,MAAjBuI,GADjCoW,EACLqnB,iBADKrnB,EACammB,mBADbnmB,EACiCpW,SACtC/H,EAAUY,EAAKpB,MAAME,SAArBM,MACFqO,EAAarO,EAAQA,EAAMqO,WAAa,EACxCgO,EAAcrc,EAAQA,EAAMqc,YAAc,EAC1CC,EAAWtc,EAAQA,EAAMsc,SAAW,eAGxC,OAFAle,QAAQC,IAAR,eAAA0B,OAA2BsO,EAA3B,mBAAAtO,OAAuDsc,IAGnD7U,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,IACnBpN,EAAA3B,EAAA4B,cAACggC,GAADphC,OAAAglB,OAAA,CACItjB,QAASA,EACTuU,SAAUA,EACVjO,WAAYA,EACZgO,YAAaA,GACTzb,EAAKpB,wCAjCOoI,IAAMC,WAqD/BoN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM0nC,0BAEc,SAAA7jC,GAAQ,MAAK,CACpCqjC,6BAA8B,SAAC74B,EAAYgO,GAAb,OAA6BxY,ECjDnB,SAACwK,EAAYgO,GAAb,OAA6B,SAAAxY,GACrE,IAAIlD,EAAG,GAAAZ,OAAMM,EAAOqC,SAASf,iBAAtB,0CAAA5B,OAA+EsO,EAA/E,iBAAAtO,OAAyGsc,GAChHrZ,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAZuC,0CAavCC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjBoC,uCAkBpCC,QAAS7C,ODqC+CgmC,CAA6B74B,EAAYgO,KAC7G+qB,sBAAuB,SAAC/qB,GAAD,OAAiBxY,ECjCP,SAACwY,GAAD,OAAiB,SAAAxY,GAClD,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,mCAA0C0a,EACvFrZ,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3B+B,kCA4B/BC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAhC4B,+BAiC5BC,QAAS7C,ODqB4BkmC,CAAsB/qB,KACvEirB,gBAAiB,SAACj5B,GAAD,OAAgBxK,ECjBN,SAACwK,GAAD,OAAgB,SAAAxK,GAC3C,IAAIlD,EAAMN,EAAOqC,SAASb,qBAAuB,oCAA2CwM,EAC5FrL,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA1CwB,2BA2CxBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KA/CqB,wBAgDrBC,QAAS7C,ODKqBomC,CAAgBj5B,OAO/C4G,CAA6CsyB,IE4F7CI,GAtJG,WAAM,IAAAC,EACIz/B,mBAAS,IADb0/B,EAAAxhC,OAAAgC,EAAA,EAAAhC,CAAAuhC,EAAA,GACb/oC,EADagpC,EAAA,GACPC,EADOD,EAAA,GAAAE,EAEM5/B,mBAAS,IAFf6/B,EAAA3hC,OAAAgC,EAAA,EAAAhC,CAAA0hC,EAAA,GAEbruB,EAFasuB,EAAA,GAENC,EAFMD,EAAA,GAAAE,EAGY//B,mBAAS,IAHrBggC,EAAA9hC,OAAAgC,EAAA,EAAAhC,CAAA6hC,EAAA,GAGb5yB,EAHa6yB,EAAA,GAGHC,EAHGD,EAAA,GAAAE,EAIYlgC,mBAAS,IAJrBmgC,EAAAjiC,OAAAgC,EAAA,EAAAhC,CAAAgiC,EAAA,GAIbE,EAJaD,EAAA,GAIHE,EAJGF,EAAA,GAAAG,EAK4BtgC,mBAAS,WALrCugC,EAAAriC,OAAAgC,EAAA,EAAAhC,CAAAoiC,EAAA,GAKbE,EALaD,EAAA,GAKKE,EALLF,EAAA,GAAAG,EAMoB1gC,mBAAS,IAN7B2gC,EAAAziC,OAAAgC,EAAA,EAAAhC,CAAAwiC,EAAA,GAMbE,EANaD,EAAA,GAMCE,EANDF,EAAA,GAAAG,EAOoB9gC,mBAAS,IAP7B+gC,EAAA7iC,OAAAgC,EAAA,EAAAhC,CAAA4iC,EAAA,GAOb50B,EAPa60B,EAAA,GAOCC,EAPDD,EAAA,GASpBE,oBAAU,WACN/oC,EAAOqC,SAASpC,cACjB,IAEH,IA0BM4T,EAAe,SAAC5J,GAClBA,EAAM8K,iBACN,IAAIi0B,EA5Be,WACnB,IAAIA,EAAS,GAsBb,OArBIxqC,GACAwqC,EAAOxpC,KAAK,oBAEZ6Z,GACA2vB,EAAOxpC,KAAK,qBAEZyV,GACA+zB,EAAOxpC,KAAK,wBAEZ0oC,GACAc,EAAOxpC,KAAK,yCAEbhB,GAAQA,EAAK2R,OAAS,GACrB64B,EAAOxpC,KAAK,2BAEb6Z,IAAU,eAAe6f,KAAK7f,IAC7B2vB,EAAOxpC,KAAK,+BAEbyV,GAAYA,EAAS9E,OAAS,GAC7B64B,EAAOxpC,KAAK,wCAETwpC,EAKMC,GACb,GAAGD,GAAUA,EAAO74B,OAAS,EACzB24B,EAAgBE,EAAOpO,KAAK,WADhC,CAIA,IAAIh9B,EAAO,CACPY,KAAMA,EACNwW,QAASqE,EACTpE,SAAUA,EACVpK,KAAMq9B,GAEVK,EAAoB,aACpB,IAAItlC,EAAO,CACPoc,UAAWzhB,GAEX0C,EAAMN,EAAOqC,SAASb,qBAAuB,OACjDmB,EAAWK,SAAS1C,EAAK2C,GAChBtC,KAAK,SAAClD,GACHkrC,EAAgB,aAEnB/nC,MAAM,SAACC,GACJ8nC,EAAgB9nC,GAChB0nC,EAAoB,eAKhC,OACIphC,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdqhC,GAAiC,YAAjBA,GACbvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uBAAf,qFAIc,KAAjBqhC,GAAwC,YAAjBA,GACpBvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,sBAAf,oDAIc,YAAjBqhC,GACGvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,QAAMmO,YAAU,EAACC,aAAa,MAAMC,SAAU,SAACC,GAAD,OAAO7B,EAAa6B,KAI9DvO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWxC,UAAU,aACtCF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,gBACHqL,MAAM,YACNP,MAAO5W,EACPoX,SAAU,SAACF,GAAD,OAAO+xB,EAAQ/xB,EAAEG,OAAOT,QAClCU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNP,MAAOiE,EACPzD,SAAU,SAACF,GAAD,OAAOkyB,EAASlyB,EAAEG,OAAOT,QACnCU,OAAO,SACPjM,QAAQ,WACRxC,UAAU,cAItBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNlS,KAAK,WACL2R,MAAOH,EACPW,SAAU,SAACF,GAAD,OAAOqyB,EAAYryB,EAAEG,OAAOT,QACtCU,OAAO,SACPjM,QAAQ,eAGpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YAEvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYlB,aAAW,OAAO3K,KAAK,OAAO4W,MAAO8yB,EACrCtyB,SAAU,SAACF,GAAD,OAAOyyB,EAAYzyB,EAAEG,OAAOT,SAC9CjO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAkB+K,MAAM,UAAUwe,QAASzsB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MAAWsL,MAAM,YAC5DxO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAkB+K,MAAM,YAAYwe,QAASzsB,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MAAWsL,MAAM,oBAI1ExO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,4BAA4B5D,KAAK,UAC9C6kC,MAKjBnhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,yBAAyB2M,QC7I1Dk1B,eACF,SAAAA,EAAY/pC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAgjC,IACf3oC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkjC,GAAA7iC,KAAAH,KAAM/G,KASVqH,kBAAoB,WAChBxG,EAAOqC,SAASpC,cAXDM,EAcnBsT,aAAe,SAAC5J,GACZA,EAAM8K,iBAEN,IAAIzU,EAAMN,EAAOqC,SAASf,iBAAmB,aACzC1D,EAAO,CACPoX,QAASzU,EAAKZ,MAAMqV,QACpBC,SAAU1U,EAAKZ,MAAMsV,UAEzB1U,EAAKoG,SAAS,CACVuO,gBAAiB,eAErBzU,IAAMyC,KAAK5C,EAAK1C,GAAM+C,KAAK,SAAClD,GACxB,IAAMC,EAAQD,EAAIE,QAAQ,gBAC1BI,QAAQC,IAAI,cAAeN,GACvBA,EACA6C,EAAKpB,MAAM0E,YAAYpG,GAAKkD,KAAK,SAAClD,GAC9B,IAAIsxB,EAAW3R,KACfrf,QAAQC,IAAI,YAAa+wB,GACT,UAAbA,GAAqC,aAAbA,EACpBxuB,EAAKpB,MAAM7B,SACViD,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,eAIdsvB,IAAa/uB,EAAOqC,SAASJ,MAAMG,QACvC7B,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,YAGVsvB,IAAa/uB,EAAOqC,SAASJ,MAAME,QACvC5B,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,eAIdc,EAAKpB,MAAM7B,QAAQkC,KAAK,CACpBC,SAAU,cAKtBc,EAAKoG,SAAS,CACVuO,gBAAiB,SACjBlB,aAAc,2CAGvBpT,MAAM,SAACC,GACNN,EAAKoG,SAAS,CACNuO,gBAAiB,SACjBlB,aAAc,mFAhEXzT,EAqEnB4U,gBAAkB,SAACC,GACf7U,EAAKoG,SAAS,CACVqO,QAASI,KAvEE7U,EA2EnB8U,iBAAmB,SAACD,GAChB7U,EAAKoG,SAAS,CACVsO,SAAUG,KA7EC7U,EAiFnB2G,OAAS,WAAM,IAAAoO,EAC6B/U,EAAKZ,MAAvCqU,EADKsB,EACLtB,aAAckB,EADTI,EACSJ,gBACpB,OACI/N,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OAIXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,QAAMmO,YAAU,EAACC,aAAa,MAAMC,SAAU,SAACC,GAAD,OAAOnV,EAAKsT,aAAa6B,KACnEvO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAIXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNP,MAAO7U,EAAKZ,MAAMqV,QAClBY,SAAU,SAACF,GAAD,OAAOnV,EAAK4U,gBAAgBO,EAAEG,OAAOT,QAC/CU,OAAO,SACPjM,QAAQ,WACRxC,UAAU,cAItBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNlS,KAAK,WACL2R,MAAO7U,EAAKZ,MAAMsV,SAClBW,SAAU,SAACF,GAAD,OAAOnV,EAAK8U,iBAAiBK,EAAEG,OAAOT,QAChDU,OAAO,SACPjM,QAAQ,eAGpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,4BAA4B5D,KAAK,UAC9CyR,QAQrB/N,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,qCAAqC2M,MA/H9DzT,EAAKZ,MAAQ,CACTqV,QAAS,GACTC,SAAU,GACVjB,aAAc,GACdkB,gBAAiB,UANN3U,6BADDiH,aA8IPoN,eANS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,OAErCwW,CAA6Cs0B,8CCpC7CC,GA3GY,WAAM,IAAA5B,EACLz/B,mBAAS,IADJ0/B,EAAAxhC,OAAAgC,EAAA,EAAAhC,CAAAuhC,EAAA,GACtB/oC,EADsBgpC,EAAA,GAChBC,EADgBD,EAAA,GAAAE,EAEH5/B,mBAAS,IAFN6/B,EAAA3hC,OAAAgC,EAAA,EAAAhC,CAAA0hC,EAAA,GAEtBruB,EAFsBsuB,EAAA,GAEfC,EAFeD,EAAA,GAAAE,EAGG//B,mBAAS,IAHZggC,EAAA9hC,OAAAgC,EAAA,EAAAhC,CAAA6hC,EAAA,GAGtB5yB,EAHsB6yB,EAAA,GAGZC,EAHYD,EAAA,GAAAE,EAImBlgC,mBAAS,WAJ5BmgC,EAAAjiC,OAAAgC,EAAA,EAAAhC,CAAAgiC,EAAA,GAItBM,EAJsBL,EAAA,GAIJM,EAJIN,EAAA,GAAAG,EAKWtgC,mBAAS,IALpBugC,EAAAriC,OAAAgC,EAAA,EAAAhC,CAAAoiC,EAAA,GAKtBM,EALsBL,EAAA,GAKRM,EALQN,EAAA,GAO7BU,oBAAU,WACN/oC,EAAOqC,SAASpC,cACjB,IA2BC,OACIkH,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACdqhC,GAAiC,YAAjBA,GACbvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uBAAf,qFAIc,KAAjBqhC,GAAwC,YAAjBA,GACpBvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,sBAAf,oDAIc,YAAjBqhC,GACGvhC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,QAAMmO,YAAU,EAACC,aAAa,MAAMC,SAAU,SAACC,GAAD,OA1CjD,SAACzL,GAClBA,EAAM8K,iBAEN,IAAInX,EAAO,CACPY,KAAMA,EACNwW,QAASqE,EACTpE,SAAUA,EACVpK,KAAM7K,EAAOqC,SAASJ,MAAME,SAEhComC,EAAoB,aACpB,IAAItlC,EAAO,CACPoc,UAAWzhB,GAEX0C,EAAMN,EAAOqC,SAASb,qBAAuB,OACjDmB,EAAWK,SAAS1C,EAAK2C,GAChBtC,KAAK,SAAClD,GACHkrC,EAAgB,aAEnB/nC,MAAM,SAACC,GACJ8nC,EAAgB9nC,GAChB0nC,EAAoB,aAsByC10B,CAAa6B,KAI9DvO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaR,QAAQ,WAAWxC,UAAU,aACtCF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIC,GAAG,gBACHqL,MAAM,6BACNP,MAAO5W,EACPoX,SAAU,SAACF,GAAD,OAAO+xB,EAAQ/xB,EAAEG,OAAOT,QAClCU,OAAO,SACPjM,QAAQ,eAIpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNP,MAAOiE,EACPzD,SAAU,SAACF,GAAD,OAAOkyB,EAASlyB,EAAEG,OAAOT,QACnCU,OAAO,SACPjM,QAAQ,WACRxC,UAAU,cAItBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,WACNlS,KAAK,WACL2R,MAAOH,EACPW,SAAU,SAACF,GAAD,OAAOqyB,EAAYryB,EAAEG,OAAOT,QACtCU,OAAO,SACPjM,QAAQ,eAGpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,4BAA4B5D,KAAK,UAC9C6kC,WCjD1B,SAASc,GAAcjqC,GAAO,IAAA0I,EAGjBN,IAAMO,SAAS,GAHEC,EAAA/B,OAAAgC,EAAA,EAAAhC,CAAA6B,EAAA,GAGpCuN,EAHoCrN,EAAA,GAG7BshC,EAH6BthC,EAAA,GAa3C,OAEEZ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,4DACXF,EAAA3B,EAAA4B,cAACmB,EAAA/C,EAAD,CAAQyD,MAAM,UAAUT,SAAS,UAC7BrB,EAAA3B,EAAA4B,cAACkiC,GAAA9jC,EAAD,CAAMqE,QAAQ,YAAYuL,MAAOA,EACzBQ,SAAU,SAACF,EAAG6zB,GAAJ,OAAeF,EAASE,KACtCpiC,EAAA3B,EAAA4B,cAACoiC,GAAD,CAAS7zB,MAAM,SAAS5U,KAAK,UAC7BoG,EAAA3B,EAAA4B,cAACoiC,GAAD,CAASpV,UAAU,EAAOze,MAAM,UAAU5U,KAAK,YAI5C,IAAVqU,GACDjO,EAAA3B,EAAA4B,cAACqiC,GAAD,KACItiC,EAAA3B,EAAA4B,cAACsiC,GAAYvqC,IAEN,IAAViW,GACDjO,EAAA3B,EAAA4B,cAACqiC,GAAD,KACItiC,EAAA3B,EAAA4B,cAACuiC,GAAD,OAEO,IAAVv0B,GACDjO,EAAA3B,EAAA4B,cAACqiC,GAAD,KACItiC,EAAA3B,EAAA4B,cAACwiC,GAAD,QAIRziC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAO3B,IAAM0pB,GAAe,SAAC5xB,GAClB,OACEgI,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYiW,UAAU,MAAM/R,MAAO,CAAE+M,QAAS,KAC3CtX,EAAM6xB,WAKTC,GAAU,SAAC9xB,GACb,OAAOgI,EAAA3B,EAAA4B,cAACyiC,GAAArkC,EAADQ,OAAAglB,OAAA,CAAK5hB,QAAS,SAAAa,GAAK,OAAIA,EAAM8K,mBAAsB5V,KCpD/C2qC,eAlDX,SAAAA,EAAY3qC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4jC,IACfvpC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8jC,GAAAzjC,KAAAH,KAAM/G,KAOVqH,kBAAoB,WAAM,IAAAi3B,EACQl9B,EAAKpB,MAAM+U,MAAMC,OAAzC41B,EADgBtM,EAChBsM,OAAQC,EADQvM,EACRuM,YACdjsC,QAAQC,IAAI,0BAA2BuC,EAAKpB,MAAM+U,MAAMC,QACxD,IAAI7T,EAAMN,EAAOqC,SAASb,qBAAhB,qBAAA9B,OAA4DqqC,EAA5D,iBAAArqC,OAAkFsqC,GAC5FrnC,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACHM,QAAQC,IAAI,sBAAuBP,GACnC8C,EAAKoG,SAAS,CACVsjC,aAAcxsC,EAAIG,SAGzBgD,MAAM,SAACC,GACJ9C,QAAQC,IAAI,sBAAuB6C,GACnCN,EAAKoG,SAAS,CACVsjC,aAAcppC,EAAIjD,KAClBssC,SAAS,OAvBN3pC,EA4BnB2G,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAA,WAIID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAS,qBAAA3H,OAAuBa,EAAKZ,MAAMuqC,QAAU,eAAiB,kBACtE3pC,EAAKZ,MAAMsqC,cAGhB9iC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMpB,MAAM,UAAUlI,KAAK,SAASqI,QAAS,kBAAM7L,EAAWqB,WAA9D,GAAAc,OACQa,EAAKZ,MAAMuqC,QAAU,UAAY,eAvCzD3pC,EAAKZ,MAAQ,CACTsqC,aAAc,YACdC,SAAS,GAJE3pC,6BAFciH,aCuCtB2iC,GA7CI,SAAChrC,GAAU,IAGtBirC,EADYjrC,EAAV+f,MAGN,OACI/X,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACV+iC,GAAiBA,EAAcj6B,OAAS,GACrCi6B,EAAcp9B,IAAI,SAACq9B,GACf,OACJljC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,uCACXF,EAAA3B,EAAA4B,cAAA,UAAKijC,EAAarwB,UAAUC,WAEhC9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,SAAIijC,EAAarwB,UAAUE,OAC3B/S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACXF,EAAA3B,EAAA4B,cAAA,UACIgC,QAAS,SAACsM,GAAD,OAAOvW,EAAMmrC,gBAAgB50B,EAAG20B,EAAa1uB,SACtDtU,UAAU,2BAFd,cAORF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kCACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,SAASgjC,EAAarwB,UAAUuwB,WAEpDpjC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,SAAhB,aADJ,IAC6CF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,SAASgjC,EAAarwB,UAAUG,UAD7F,kBClBlCqwB,eAEF,SAAAA,EAAYrrC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAskC,IACfjqC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwkC,GAAAnkC,KAAAH,KAAM/G,KAOV8Y,gBAAkB,WACd1X,EAAKoG,SAAS,CAAE0B,MAAM,KATP9H,EAYnB2X,YAAc,WACVna,QAAQC,IAAI,gBACZuC,EAAKoG,SAAS,CAAE0B,MAAM,KAdP9H,EAiBnB4X,aAAe,WACbpa,QAAQC,IAAI,iBACZuC,EAAKpB,MAAMsW,SAASlV,EAAKpB,MAAM8D,OAC/B1C,EAAK2X,eApBY3X,EAuBnB2G,OAAS,WAAM,IACLjE,EAAU1C,EAAKpB,MAAf8D,MACAwnC,EAAWlqC,EAAKZ,MAAhB8qC,OAIN,OAFA1sC,QAAQC,IAAI,gBACZD,QAAQC,IAAIiF,GAERkE,EAAA3B,EAAA4B,cAAA,YACEnE,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACDkE,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,KACI2B,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYZ,MAAM,UAAUG,QAAS7I,EAAK0X,iBAA1D,eAEA9Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAqZ,WAAW,EACXrb,KAAM9H,EAAKZ,MAAM0I,KACjBuC,QAASrK,EAAK2X,aAEd/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAaO,QAASrK,EAAK2X,aAA3B,qBACA/Q,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAeX,MAAO,CAAC+M,QAAS,OAC5BtP,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OACvBrO,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYuO,QAAQ,kBAApB,SAGAzR,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIuL,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,QAAS7U,EAAKpB,MAAM8D,QAC9EmS,MAAOnS,EAAM+W,UAAUI,MACvBtB,MACA3R,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsZ,WAAY,GACZnlB,KAAK,QACL8L,GAAG,oBAGPnD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU+K,MAAM,IAChBjO,EAAA3B,EAAA4B,cAAA,mBAECqjC,GAAUA,EAAOt6B,OAAS,GACvBs6B,EAAOz9B,IAAI,SAAC09B,EAAWz9B,GACvB,OACI9F,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAU1I,IAAKsL,EAAOmI,MAAOs1B,GAAYA,OAKzDvjC,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,oBACHqL,MAAM,YACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+W,UAAUC,SACvBrE,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAY7U,EAAKpB,MAAM8D,QACjF6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,mBACHqL,MAAM,UACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+W,UAAUK,QACvBzE,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,UAAW7U,EAAKpB,MAAM8D,QAChF6S,OAAO,SACPjM,QAAQ,cAGhB1C,EAAA3B,EAAA4B,cAAC8P,GAAA1R,EAAD,CAAaqE,QAAQ,WAAWH,MAAOC,GAAOwN,aAC1ChQ,EAAA3B,EAAA4B,cAACgQ,GAAA5R,EAAD,CACI8E,GAAG,oBACHqL,MAAM,uBACNtO,UAAWsC,GAAOwP,MAClB/D,MAAOnS,EAAM+W,UAAUG,SACvBvE,SAAU,SAACF,GAAD,OAAOnV,EAAKpB,MAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,WAAY7U,EAAKpB,MAAM8D,QACjF6S,OAAO,SACPjM,QAAQ,gBAKxB1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,MACAlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACuN,GAAAnP,EAAD,CAAQqE,QAAQ,YAAYwG,KAAK,QAAQpH,MAAM,UAC/BG,QAAU,kBAAM7I,EAAK4X,aAAa5X,EAAKpB,MAAM8D,SAD7D,oBAzGhB1C,EAAKZ,MAAQ,CACT0I,MAAM,EACNoiC,OAAQzqC,EAAOqC,SAASR,QAJbtB,6BAFCiH,aAyHlBmC,GAAS,CACXwN,YAAa,CACTrF,MAAO,MACP6Q,aAAc,MAElBhM,OAAQ,CACJiB,gBAAiB,SAGV4yB,MCtFT9vB,GAAkBC,qBAAW,SAAAxO,GAAK,MAAK,CACzCyO,KAAM,CACJ3R,MAAOkD,EAAM0O,QAAQC,OAAOC,MAC5BpH,SAAU,IAEZqH,KAAM,CACJrH,SAAU,MANQgH,CAQpBM,MACW0vB,GAtDG,SAACxrC,GAAU,IACnB+f,EAAU/f,EAAV+f,MACN,OACI/X,EAAA3B,EAAA4B,cAAA,YACE8X,GAAS/X,EAAA3B,EAAA4B,cAACsP,GAAD,MACVwI,GAA0B,IAAjBA,EAAM/O,QAAgBhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYmJ,MAAM,SAAS3J,QAAQ,aAAnC,mBAC/BqV,GAASA,EAAM/O,OAAS,GACzBhJ,EAAA3B,EAAA4B,cAACgU,GAAA5V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACiU,GAAA7V,EAAD,KACA2B,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,KACI2B,EAAA3B,EAAA4B,cAACwjC,GAAD,aACAzjC,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAvB,UACArM,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAvB,cACArM,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAvB,SACArM,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAvB,WACArM,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,YAG3BrM,EAAA3B,EAAA4B,cAACmU,GAAA/V,EAAD,KACC0Z,EAAMlS,IAAI,SAACksB,EAAMjsB,GAAP,OACP9F,EAAA3B,EAAA4B,cAACkU,GAAA9V,EAAD,CAAU7D,IAAKsL,GACf9F,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBnvB,UAAU,KAAKC,MAAM,OAClCvU,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAC1N,SAAU,iBAAkBE,MAAO,CAAEgc,OAAQud,EAAK5uB,MACzD4uB,EAAKlf,UAAUC,WAGxB9S,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAOrM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAYR,QAAQ,aAAcqvB,EAAKlf,UAAUtX,OAAO2a,gBACtFlW,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAQ0lB,EAAKlf,UAAUiW,WAC9C9oB,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAQ0lB,EAAKlf,UAAUI,OAC9CjT,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAQ0lB,EAAKlf,UAAUK,SAC9ClT,EAAA3B,EAAA4B,cAACwjC,GAAD,CAAiBp3B,MAAM,QAAQkI,MAAM,MAAMD,UAAU,MAChDyB,GAAcgc,EAAKlf,UAAUtX,SAC9ByE,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,CAAMC,GAAK,CAAC1N,SAAU,iBAAkBE,MAAO,CAAEgc,OAAQud,EAAK5uB,MAC1DnD,EAAA3B,EAAA4B,cAACwX,GAAA,EAAD,eC9BTisB,GAZE,SAAC1rC,GACd,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,IACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAS,OAAA3H,OAASP,EAAM2rC,iBAAiBC,GAAcC,YAAc,cAAgB,iBACrF5hC,QAAS,kBAAMjK,EAAM8rC,oBAD7B,aAEA9jC,EAAA3B,EAAA4B,cAAA,UAAQC,UAAS,OAAA3H,OAASP,EAAM2rC,iBAAiBC,GAAcG,QAAU,cAAgB,iBACrF9hC,QAAS,kBAAMjK,EAAMgsC,gBADzB,eCOHJ,GAAgB,CACzBC,YAAa,eACbE,QAAS,WACTE,iBAAkB,sBAGhBC,eAEF,SAAAA,EAAYlsC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAmlC,IACf9qC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqlC,GAAAhlC,KAAAH,KAAM/G,KAMVqH,kBAAoB,WAChBjG,EAAKjB,UARUiB,EAWnBjB,OAAS,WAELiB,EAAKpB,MAAMmsC,gBAbI/qC,EAgBnB0qC,gBAAkB,WACd1qC,EAAKpB,MAAMqb,mBACXja,EAAKoG,SAAS,CACVmkC,eAAgBC,GAAcC,eAnBnBzqC,EAuBnB4qC,YAAc,WACV5qC,EAAKpB,MAAMmsC,eACX/qC,EAAKoG,SAAS,CACVmkC,eAAgBC,GAAcG,WA1BnB3qC,EA8BnBgxB,UAAY,SAACtuB,GACTA,EAAM+W,UAAUyV,SAAW,CACvBC,eAAgB1vB,EAAOqC,SAASP,eAAeE,QAEnDiB,EAAMujB,SAAW,WACjBvjB,EAAMmX,MAAQnX,EAAM+W,UAAUI,MAC9BnX,EAAMoX,QAAUpX,EAAM+W,UAAUK,QAEhC9Z,EAAKpB,MAAMmb,QAAQrX,EAAO1C,EAAKpB,MAAMoX,SAAUhW,EAAKpB,MAAM7B,SACjDqD,KAAK,SAAClD,GACH8C,EAAK4qC,iBAxCF5qC,EA4CnB2G,OAAS,WACL,OACIC,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM8N,WAAS,EAACc,QAAS,IACrBjN,EAAA3B,EAAA4B,cAAC4d,GAAAxf,EAAD,CAAM6O,MAAI,EAACC,GAAI,GAAIC,GAAI,IAInBpN,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAY0M,OACR5P,EAAA3B,EAAA4B,cAACmkC,GAAD,CACI91B,SAAW,SAACxS,GAAD,OAAW1C,EAAKgxB,UAAUtuB,IACrCA,MAAO1C,EAAKpB,MAAMiyB,aAClB/H,OAAQ9oB,EAAKpB,MAAMkqB,OACnB9S,SAAUhW,EAAKpB,MAAMoX,SACrBe,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM0a,uBAAuBC,EAAKC,EAAO9W,MAGzFsK,MAAM,UACVpG,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KAEQ9J,EAAKZ,MAAMmrC,iBAAmBC,GAAcC,aAC5C7jC,EAAA3B,EAAA4B,cAACokC,GAAD,CAAYtsB,MAAO3e,EAAKpB,MAAM+f,QAG9B3e,EAAKZ,MAAMmrC,iBAAmBC,GAAcG,SAC5C/jC,EAAA3B,EAAA4B,cAACqkC,GAAD,CAAWvsB,MAAO3e,EAAKpB,MAAM+f,aAnErD3e,EAAKZ,MAAQ,CACTmrC,eAAgBC,GAAcG,SAHnB3qC,6BAFOgH,IAAMC,WA6FrBoN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAMoiB,iBACNpiB,EAAMkV,cAEc,SAAArR,GAAQ,MAAK,CACpC8W,QAAS,SAACrX,EAAOsT,GAAR,OAAqB/S,EAAS8W,GAAQrX,KAC/CsnB,YAAa,SAACtnB,GAAD,OAAWO,EAAS+mB,GAAYtnB,KAC7CuX,iBAAkB,kBAAMhX,EAASgX,OACjC8wB,aAAc,kBAAM9nC,ExF5DU,SAAAA,GAC9B,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,aAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KDnCmB,sBCoCnBC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KD5CY,mBC6CZC,QAAS7C,EAAI+C,kBwF+C7BiW,uBAAwB,SAACC,EAAKC,EAAO9W,GAAb,OAAuBO,EAASqW,GAAuBC,EAAKC,EAAO9W,OAEhF2R,CAA6Cy2B,IClE7CK,GA9CG,SAACvsC,GAEf,OACIgI,EAAA3B,EAAA4B,cAACukC,GAAoBxsC,IC+BdysC,8MAjCXC,cAAgB,SAAC53B,GACb,IAAI3T,EAAG,GAAAZ,OAAMM,EAAOqC,SAASlB,aAAtB,oBAAAzB,OAAqDuU,GAG5D7U,OAAOiJ,KAAK/H,EAAK,aAGrB4G,OAAS,WAAM,IACL+M,EAAa1T,EAAKpB,MAAM+U,MAAMC,OAA9BF,SAEN,OAAGA,EAEK9M,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,4IAIAD,EAAA3B,EAAA4B,cAAA,UAAQsC,MAAOC,GAAOmiC,IAAK1iC,QAAS,kBAAM7I,EAAKsrC,cAAc53B,KAA7D,UASA9M,EAAA3B,EAAA4B,cAAA,4HA5BUI,aAoCxBmC,GAAO,CACTmiC,IAAK,CACD1c,WAAY,OACZnmB,MAAO,OACPwT,aAAc,OACdhG,QAAS,MACTs1B,OAAQ,QCSDC,YAlDA,SAAC7sC,GAEZ,IAAI8sC,EAAY,GAEhB,OADe7uB,MAEX,KAAKpd,EAAOqC,SAASJ,MAAME,QAEvB8pC,EAAYC,GACZ,MAEJ,KAAKlsC,EAAOqC,SAASJ,MAAMC,UAEvB+pC,EAAYE,GACZ,MAEJ,KAAKnsC,EAAOqC,SAASJ,MAAMG,QAEvB6pC,EAAYG,GAIpB,OACIjlC,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,2BACT4kC,GAAaA,EAAU97B,OAAS,GAC7B87B,EAAUj/B,IAAI,SAACjB,EAAUkB,GACrB,OACI9F,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,WAAW1F,IAAKsL,GAC1B9F,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,kBAAkBtG,KAAMgL,EAASsgC,MAAOtgC,EAASugC,gBAwBxFH,GAAgB,CAClB,CACIG,QAAS,OACTD,KAAM,WAEV,CACIC,QAAS,QACTD,KAAM,YAEV,CACIC,QAAS,aACTD,KAAM,eAGRH,GAAc,CAChB,CACII,QAAS,OACTD,KAAM,cAEV,CACIC,QAAS,QACTD,KAAM,YAEV,CACIC,QAAS,cACTD,KAAM,UAGRD,GAAc,CAChB,CACIE,QAAS,OACTD,KAAM,WAMV,CACIC,QAAS,WACTD,KAAM,YAEV,CACIC,QAAS,aACTD,KAAM,eCjFCE,GAVC,WAEZ,OACIplC,EAAA3B,EAAA4B,cAAA,WAGID,EAAA3B,EAAA4B,cAAColC,GAAD,QCMGC,GAfO,SAACttC,GAEnB,OACIgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KAKIjM,EAAA3B,EAAA4B,cAACslC,GAAD1mC,OAAAglB,OAAA,GACQ7rB,EADR,CAEIwtC,oBAAoB,OCuCrBC,GA1CW,SAACztC,GAAU,IAC3B8D,EAAU9D,EAAV8D,MACS9D,GAASA,EAAMoX,SAC9B,OACIpP,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,MACEvC,GAASkE,EAAA3B,EAAA4B,cAACsP,GAAD,MACVzT,GACGkE,EAAA3B,EAAA4B,cAAA,QAAOmO,YAAU,EAACC,aAAa,OAC3BrO,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACAsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACvCxP,EAAA3B,EAAA4B,cAACyP,GAAArR,EAAD,OAGH+H,MAAM,sBAEVpG,EAAA3B,EAAA4B,cAAC6P,GAAAzR,EAAD,KACI2B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACXF,EAAA3B,EAAA4B,cAAA,SAAOC,UAAU,2BAAjB,cACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL4D,UAAU,eACV+N,MAAOnS,EAAMzE,KACboX,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,OAAQjW,EAAM8D,aAKvFkE,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAASC,UAAU,kBAAkB5D,KAAK,SAC9B2F,QAAU,kBAAMjK,EAAMsW,SAAStW,EAAM8D,SADjD,gBAYtB0G,GAAO,CACTwN,YAAa,CACTrF,MAAO,OAEX6F,aAAc,CACV3M,WAAY,OAEhB2L,OAAQ,CACJiB,gBAAiB,SCFnBjO,GAAS,CACX+f,KAAM,CACF5T,OAAQ,KAGD+2B,GA/DG,SAAC1tC,GAGf,OADApB,QAAQC,IAAI,wBAAyBmB,EAAM2tC,iBAEvC3lC,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,mBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eACVlI,EAAM4tC,YAAc5tC,EAAM4tC,WAAWvuC,MACnC2I,EAAA3B,EAAA4B,cAAA,SAAGD,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,oBAAhB,SAA0ClI,EAAM4tC,WAAWvuC,MAA9D,cAEDW,EAAM4tC,YAAc5lC,EAAA3B,EAAA4B,cAAA,+CAE1BD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAEHF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBAEXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,SAAQ3D,KAAK,OACL2wB,WAAYj1B,EAAM4tC,YAAc5tC,EAAM4tC,WAAWvuC,MACjD6I,UAAU,eACV+N,MAAOjW,EAAM2tC,iBAAmB3tC,EAAM2tC,gBAAgBzyB,QAClDlb,EAAM2tC,gBAAgBzyB,QAAU,GACpCzE,SAAU,SAACF,GAAD,OAAOvW,EAAMmY,cAAc5B,EAAEG,OAAOT,MAAO,eAGjEjO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAASC,UAAU,yBAAyB5D,KAAK,SACrC2F,QAAU,kBAAMjK,EAAM6tC,aAAa7tC,EAAM2tC,mBADrD,SAMhB3lC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACVlI,EAAM4tC,YAAc5tC,EAAM4tC,WAAWE,UAAiD,IAArC9tC,EAAM4tC,WAAWE,SAAS98B,QAC5EhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,oBAAf,wCAEClI,EAAM4tC,YAAc5tC,EAAM4tC,WAAWE,UAAY9tC,EAAM4tC,WAAWE,SAAS98B,OAAS,GACrFhR,EAAM4tC,WAAWE,SAASjgC,IAAI,SAACkgC,EAAajgC,GACxC,OACI9F,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAMsL,MAAOu3B,EAAavrC,IAAKsL,EAC3BvD,MAAOC,GAAO+f,KACd/S,OACIxP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACK6iC,EAAcA,EAAY,GAAK,eCoCjEC,eAlEX,SAAAA,EAAahuC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAAinC,IAChB5sC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmnC,GAAA9mC,KAAAH,KAAM/G,KAMViuC,uBAAyB,SAACtzB,EAAKC,EAAO9W,GAClC1C,EAAKpB,MAAMmY,cAAcwC,EAAKC,EAAOxZ,EAAKpB,MAAMkuC,eAChDtvC,QAAQC,IAAI,oBACZuC,EAAKpB,MAAMiuC,uBAAuBtzB,EAAKvZ,EAAKpB,MAAM2tC,kBAVlCvsC,EAapB2G,OAAS,WAEL,OACIC,EAAA3B,EAAA4B,cAACoP,GAAAhR,EAAD,CAAMkE,MAAO,CAAC+M,QAAS,OACnBtP,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsM,OACIxP,EAAA3B,EAAA4B,cAACwP,GAAApR,EAAD,CAAQ2D,aAAW,SAASO,MAAOC,GAAOgN,QACtCxP,EAAA3B,EAAA4B,cAAC0e,GAAAtgB,EAAD,OAGR+H,MAAK,UAAA7N,OAAYa,EAAKpB,MAAMmuC,UAAY,IAAI/sC,EAAKpB,MAAMmuC,UAAUn9B,OAAO,IAAM,MAElFhJ,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,KACIlD,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACd9G,EAAKpB,MAAMmuC,WAAa/sC,EAAKpB,MAAMmuC,UAAUn9B,OAAS,GACpD5P,EAAKpB,MAAMmuC,UAAUtgC,IAAI,SAAC09B,EAAWz9B,GACpC,IAAIoH,EAAOq2B,EAAUqC,WACrB,OAEY5lC,EAAA3B,EAAA4B,cAAA,OAEAC,UAAS,GAAA3H,OAAKa,EAAKpB,MAAMkuC,eAAiB9sC,EAAKpB,MAAMkuC,cAAc/iC,IAAMogC,EAAUpgC,GAAK,kBAAoB,QACxGlB,QAAS,kBAAM7I,EAAKpB,MAAMouC,cAAc7C,KAExCvjC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,MAAIC,UAAU,0BAA0BgN,EAAK7V,WAMrE2I,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAComC,GAADxnC,OAAAglB,OAAA,GACQzqB,EAAKpB,MAAMkuC,cADnB,CAEIP,gBAAiBvsC,EAAKpB,MAAM2tC,gBAC5BE,aAAc,SAAC/pC,GAAD,OAAW1C,EAAKpB,MAAM6tC,aAAa/pC,IAEjDqU,cAAgB,SAACwC,EAAKC,GAAN,OAAgBxZ,EAAK6sC,uBAAuBtzB,EAAKC,EAAOxZ,EAAKpB,MAAMkuC,uBAKhG9sC,EAAKpB,MAAMmuC,WAA6C,IAAhC/sC,EAAKpB,MAAMmuC,UAAUn9B,SAChDhJ,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,0CAvDRjT,EAAKZ,MAAQ,CACT8tC,cAAe,IAHHltC,6BAFAgH,IAAMC,WAsExBmC,GAAS,CACXgN,OAAQ,CACJiB,gBAAiB,QAErBT,YAAa,CACTrF,MAAO,OAEX4X,KAAM,CACF5T,OAAQ,KCjFV43B,8MAEFlnC,kBAAoB,WAChBjG,EAAKjB,YAGTA,OAAS,WACLiB,EAAKpB,MAAMwuC,cACNhtC,KAAK,SAACitC,GACH7vC,QAAQC,IAAI,aAAc4vC,GAC1BrtC,EAAKpB,MAAM0uC,mBAAmBD,QAI1CE,eAAiB,SAAC7qC,GACd1C,EAAKpB,MAAM4uC,SAAS9qC,GACftC,KAAK,WACFJ,EAAKjB,cAIjB4H,OAAS,WACLnJ,QAAQC,IAAI,iBAAiBuC,EAAKpB,OADvB,IAAA2e,EAEyCvd,EAAKpB,MAAnDmuC,EAFKxvB,EAELwvB,UAAWD,EAFNvvB,EAEMuvB,cAAeP,EAFrBhvB,EAEqBgvB,gBAEhC,OADA/uC,QAAQC,IAAI,kBAAmB8uC,GAE3B3lC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,qBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAC4mC,GAAD,CACIv4B,SAAW,SAACxS,GAAD,OAAW1C,EAAKutC,eAAe7qC,IAC1CA,MAAO1C,EAAKpB,MAAMkuC,cAClBr2B,MAAO,kBAAMzW,EAAKjB,UAClBgY,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM8uC,wBAAwBn0B,EAAKC,EAAO9W,QAG9FkE,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAC8mC,GAAD,CACIZ,UAAWA,EACXD,cAAeA,EACfP,gBAAiBA,EACjBS,cAAe,SAACtqC,GAAD,OAAW1C,EAAKpB,MAAM0uC,mBAAmB5qC,IACxDmqC,uBAAyB,SAACtzB,EAAK7W,GAAN,OAAgB1C,EAAKpB,MAAMgvC,qBAAqBr0B,EAAK7W,IAC9EqU,cAAgB,SAACwC,EAAKC,EAAO9W,GAAb,OAAuB1C,EAAKpB,MAAM8uC,wBAAwBn0B,EAAKC,EAAO9W,IACtF+pC,aAAc,SAAC/pC,GAAW1C,EAAKpB,MAAMivC,YAAYnrC,EAAO1C,EAAKpB,MAAMkuC,eAAgB9sC,EAAKjB,cAIpG6H,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKpB,MAAMkmB,WAAYnN,YAAa,kBAAM3X,EAAKpB,MAAMmmB,iBAChE/C,aAAc,4DAnDLhb,IAAMC,WAsEpBoN,eAbS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM0uC,eAEc,SAAA7qC,GAAQ,MAAK,CACpCuqC,SAAU,SAAC9qC,GAAD,OAAWO,GCAA8qC,EDAkBrrC,ECAH,SAAAO,GACpC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,QAC7CqB,EAAWK,SAAS1C,EAAKguC,GACpB3tC,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3Ea,oBA4EbC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjFU,iBAkFVC,QAAS7C,IAEbT,EAAOS,UAhBC,IAACytC,GDCrBX,YAAa,kBAAMnqC,ECsDU,SAAAA,GAC7B,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,eAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA7HgB,uBA8HhBC,QAASjG,EAAIG,OAEjBuC,EAAQ1C,EAAIG,KAAK,MAEpBgD,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAnIa,oBAoIbC,QAAS7C,IAEbT,EAAOS,UDrEnBykB,cAAe,kBAAM9hB,EC2EU,SAAAA,GAC/BA,EAAS,CACLC,KA3IsB,sBD+D1BiiB,aAAc,kBAAMliB,EC+EU,SAAAA,GAC9BA,EAAS,CACLC,KA/IqB,qBD+DzBwqC,wBAAyB,SAACn0B,EAAKC,EAAO9W,GAAb,OAAuBO,EC5Cb,SAACsW,EAAKC,EAAO9W,GAAb,OAAuB,SAAAO,GAK1D,OAHIP,EAAM8pC,aACN9pC,EAAM8pC,WAAa,IAEhBhzB,GAEH,IAAK,OAED9W,EAAM8pC,WAAWvuC,KAAOsb,EACxBtW,EAAS,CACLC,KApC0B,6BAqC1BC,QAAST,IAEb,MAEJ,IAAK,aAED,GAAIA,EAAM8pC,WAAWE,SAGhB,CACD,IAAIsB,EAAsBtrC,EAAM8pC,WAAWE,SAAS/kB,OAAO,SAACsmB,GACxD,OAAOA,IAAQ10B,IAEdy0B,GAAuBA,EAAoBp+B,OAAS,GACrDlN,EAAM8pC,WAAWE,SAASztC,KAAKsa,QAPnC7W,EAAM8pC,WAAWE,SAAW,GAUhChqC,EAAMoX,QAAUP,EAChB/b,QAAQC,IAAI,cAAeiF,GAC3BO,EAAS,CACLC,KAzD0B,6BA0D1BC,QAAST,MDWoCgrC,CAAwBn0B,EAAKC,EAAO9W,KAC7F4qC,mBAAoB,SAAC5qC,GAAD,OAAWO,GC9DA6pC,ED8D4BpqC,EC9DV,SAAAO,GACjDzF,QAAQC,IAAI,eAAgBqvC,GAC5B7pC,EAAS,CACLC,KAR4B,uBAS5BC,QAAS2pC,OAJiB,IAACA,GD+D/Bc,qBAAsB,SAACr0B,EAAK7W,GAAN,OAAgBO,ECvDN,SAACsW,EAAK7W,GAAN,OAAgB,SAAAO,GAChDP,EAAMoX,QAAUP,EAChBtW,EAAS,CACLC,KAf8B,yBAgB9BC,QAAST,IAEblF,QAAQC,IAAI,gBAAiBiF,IDiDkBkrC,CAAqBr0B,EAAK7W,KACzEmrC,YAAa,SAACnrC,EAAOmX,GAAR,OAAkB5W,GCcPirC,EDd4BxrC,ECcdyrC,EDdqBt0B,ECcN,SAAA5W,GACrD,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASf,iBAAmB,QAE7C,GAAIotC,EAAW3B,WAAWE,SAGrB,CACD,IAAIsB,EAAsBG,EAAW3B,WAAWE,SAAS/kB,OAAO,SAACsmB,GAC7D,OAAOA,IAAQC,EAAap0B,UAE3Bk0B,GAAuBA,EAAoBp+B,OAAS,GACrDu+B,EAAW3B,WAAWE,SAASztC,KAAKivC,EAAap0B,cAPrDq0B,EAAW3B,WAAWE,SAAW,GAWrCtqC,EAAWQ,WAAW7C,EAAKouC,GACtB/tC,KAAK,SAAClD,GACH+F,EAAS,CACLC,KA3GgB,uBA4GhBC,QAASjG,EAAIG,OAEjBuC,GAAQ,KAEXS,MAAM,SAACC,GACJ2C,EAAS,CACLC,KAjHa,oBAkHbC,QAAS7C,IAEbT,EAAOS,UA7BI,IAAC4tC,EAAcC,KDZ3B95B,CAA6C84B,IElB7CiB,GA9CQ,SAACxvC,GAEhB,OADApB,QAAQC,IAAI,gBAAgBmB,EAAMyvC,gBAC9BzvC,EAAMyvC,gBAAkD,IAAhCzvC,EAAMyvC,eAAez+B,OAU7ChJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAEVlI,EAAMyvC,gBAAkBzvC,EAAMyvC,eAAez+B,OAAS,GACpDhR,EAAMyvC,eAAe5hC,IAAI,SAAC6hC,EAAgB5hC,GAGzC,IAAI6hC,EAAiBD,EAAe1K,gBACpC,OACAh9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,0BACVwnC,EAAe50B,UAEpB9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAYrC,EAAiB8pC,EAAelK,gBAAgB,GAA3E,MAERz9B,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAYtD,EAAY8qC,EAAe9uB,cAE9D5Y,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,sBACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,UACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAYynC,EAAe/6B,cA/BlE5M,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACfF,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,mCCgDV8L,GAAqB,SAACH,EAAUO,GAClC,IAAIE,EAAK,IAAIxb,KAAJ,GAAA1E,OAAYyf,EAASU,iBAC1B,OACI1Y,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,+BAAA1H,OACsBkgB,EAAGnb,UADzB,KAAA/E,OACsCkgB,EAAGrb,WAAa,EADtD,KAAA7E,OAC2DkgB,EAAGlb,cAD9D,KAAAhF,OAC+EkgB,EAAGhb,WADlF,QAGAuC,EAAA3B,EAAA4B,cAAA,WACAD,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,kBACd+B,QAAS,kBACLsW,EAAiBP,EAASW,kBAFlC,YAWLivB,GAzEa,SAAC5vC,GAErB,OADApB,QAAQC,IAAI,kBAAkBmB,EAAMif,cACjCjf,EAAMif,cAA8C,IAA9Bjf,EAAMif,aAAajO,OAEpChJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,kBACfF,EAAA3B,EAAA4B,cAACqC,EAAAjE,EAAD,CAAYqE,QAAQ,KAAK2J,MAAM,UAA/B,wBAOJrM,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACPF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACVlI,EAAMif,cAAgBjf,EAAMif,aAAapR,IAAI,SAACmS,GAE3C,OADAphB,QAAQC,IAAI,aAAcmhB,GAEtBhY,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,0BACV8X,EAASnF,UAAUC,UAExB9S,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,SACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUI,QAElDjT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,WACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUK,UAElDlT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,aACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUoF,aAAajP,SAE/DhJ,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,8BAAf,YACAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YAAY8X,EAASnF,UAAUG,SAA9C,aAKJhT,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACViY,GAAmBH,EAAUhgB,EAAMqgB,4BCD7DwvB,GArCW,SAAC7vC,GACvB,OACIgI,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACIjM,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,eAAe/jB,GAAG,UAAUO,KAAK,WACxC1D,EAAA3B,EAAA4B,cAAA,KAAIinB,MAAM,2BAA2B/jB,GAAG,mBACpCgkB,cAAY,MAAMvtB,KAAK,gBAAgB8J,KAAK,MAAM4jB,gBAAc,eAAewgB,gBAAc,QADjG,YAIA9nC,EAAA3B,EAAA4B,cAAA,KAAIinB,MAAM,oBAAoB/jB,GAAG,eAC7BgkB,cAAY,MAAMvtB,KAAK,YAAY8J,KAAK,MAAM4jB,gBAAc,WAAWwgB,gBAAc,QADzF,UAIA9nC,EAAA3B,EAAA4B,cAAA,KAAIinB,MAAM,oBAAoB/jB,GAAG,kBAC7BgkB,cAAY,MAAMvtB,KAAK,eAAe8J,KAAK,MAAM4jB,gBAAc,cAC/DwgB,gBAAc,SAFlB,eAOR9nC,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,cAAc/jB,GAAG,kBACxBnD,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,4BAA4B/jB,GAAG,eAAeO,KAAK,WACzDqkC,kBAAgB,oBACjB/nC,EAAA3B,EAAA4B,cAAC+nC,GAAqBhwC,IAE1BgI,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,qBAAqB/jB,GAAG,WAAWO,KAAK,WAC9CqkC,kBAAgB,gBACjB/nC,EAAA3B,EAAA4B,cAACgoC,GAAwBjwC,IAE7BgI,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,gBAAgB/jB,GAAG,cAAcO,KAAK,WAAWqkC,kBAAgB,mBACxE/nC,EAAA3B,EAAA4B,cAACioC,GAAmBlwC,OCvClCmwC,8MAEF9oC,kBAAoB,WAChBjG,EAAKjB,YAGTA,OAAS,WACLiB,EAAKpB,MAAMowC,yBACXhvC,EAAKpB,MAAMqb,sBAGf+E,gBAAkB,SAACtc,GACf1C,EAAKpB,MAAMsb,gBAAgBxX,GACtBtC,KAAK,WACFJ,EAAKjB,cAIjBkgB,oBAAsB,SAACM,GACnB,IAAIxf,EAAG,GAAAZ,OAAMM,EAAOqC,SAASlB,aAAtB,yBAAAzB,OAA0DogB,GACjE1gB,OAAOiJ,KAAK/H,EAAK,aAIrB4G,OAAS,WAAM,IAAA4W,EAC8Bvd,EAAKpB,MAAxCshB,EADK3C,EACL2C,cAAe+uB,EADV1xB,EACU0xB,gBAErB,GADAzxC,QAAQC,IAAI,kBAAmBwxC,GAC5BA,EAAiB,CAChB,IAAIZ,EAAiBY,EAAgBtnB,OAAO,SAAC7T,GACzC,MAAuB,cAAhBA,EAAK3R,SAEZ0b,EAAeoxB,EAAgBtnB,OAAO,SAAC7T,GACvC,MAAuB,eAAhBA,EAAK3R,QAA2C,eAAhB2R,EAAK3R,SAGhD,OACIyE,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,KACAjM,EAAA3B,EAAA4B,cAACqoC,GAAD,CACYhvB,cAAeA,EACfmuB,eAAgBA,EAChBxwB,aAAcA,EACdmB,gBAAiB,SAACtc,GAAD,OAAW1C,EAAKgf,gBAAgBtc,IACjDuc,oBAAqB,SAACM,GAAD,OAAoBvf,EAAKif,oBAAoBM,OAYtF,OACI3Y,EAAA3B,EAAA4B,cAACsP,GAAD,oCAvDsBnP,IAAMC,WAmEzBoN,eARS,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACtBrG,EAAM+vC,wBAEc,SAAAlsC,GAAQ,MAAK,CACpC+rC,uBAAwB,kBAAM/rC,ECjEU,SAAAA,GACxC,OAAO,IAAItD,QAAQ,SAACC,EAASC,GACzB,IAAIE,EAAMN,EAAOqC,SAASb,qBAAuB,qBACjDmB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAX6B,oCAY7BC,QAASjG,EAAIG,OAEjBuC,EAAQ1C,EAAIG,QAEfgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KArBsB,iCAsBtBC,QAAS7C,IAGjBT,EAAOS,UD6CnB2Z,iBAAkB,kBAAMhX,ECvCU,SAAAA,GAClC,IAAIlD,EAAMN,EAAOqC,SAASf,iBAAmB,sBAC7CqB,EAAWC,QAAQtC,GACdK,KAAK,SAAClD,GACH+F,EAAS,CACLC,KAnCoC,uCAoCpCC,QAASjG,EAAIG,SAGpBgD,MAAM,SAACC,GACDA,EAAIjD,MAA6B,mBAArBiD,EAAIjD,KAAKmF,QACpBS,EAASM,KAGTN,EAAS,CACLC,KA5C6B,oCA6C7BC,QAAS7C,EAAI+C,kBDwB7B6W,gBAAiB,SAACxX,GAAD,OAAWO,EAASiX,GAAgBxX,OAE1C2R,CAA6C06B,IEjE7CK,8MAVXzoC,OAAS,WAEL,OACIC,EAAA3B,EAAA4B,cAAAD,EAAA3B,EAAA4N,SAAA,iDALY7L,IAAMC,WCgIfooC,eA1HX,SAAAA,EAAYzwC,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA0pC,IACfrvC,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4pC,GAAAvpC,KAAAH,KAAM/G,KAWV0wC,YAAc,WACVtvC,EAAKoG,SAAS,CACVmpC,gBAAiB,GACjB76B,SAAU,GACVjB,aAAc,GACd+7B,iBAAkB,YAjBPxvC,EAqBnBsT,aAAe,SAAC5J,GACZA,EAAM8K,iBAEN,IAAIzU,EAAMN,EAAOqC,SAASf,iBAAmB,iBACzC1D,EAAO,CACPkyC,gBAAiBvvC,EAAKZ,MAAMmwC,gBAC5B76B,SAAU1U,EAAKZ,MAAMsV,UAEzB1U,EAAKoG,SAAS,CACVopC,iBAAkB,eAEtBptC,EAAWK,SAAS1C,EAAK1C,GAExB+C,KAAK,SAAClD,GACHM,QAAQC,IAAI,yBAA0BP,GAClCA,GACA8C,EAAKsvC,cACLtvC,EAAKoG,SAAS,CACV8qB,WAAW,EACXlP,aAAc,mCAGlBhiB,EAAKoG,SAAS,CACVopC,iBAAkB,SAClB/7B,aAAc,2CAGvBpT,MAAM,SAACC,GACNN,EAAKoG,SAAS,CACNopC,iBAAkB,SAClB/7B,aAAcnT,EAAIjD,UAnDf2C,EAwDnByvC,wBAA0B,SAAC56B,GACvB7U,EAAKoG,SAAS,CACVmpC,gBAAiB16B,KA1DN7U,EA8DnB8U,iBAAmB,SAACD,GAChB7U,EAAKoG,SAAS,CACVsO,SAAUG,KAhEC7U,EAoEnB2G,OAAS,WAAM,IAAAoO,EAC8B/U,EAAKZ,MAAxCqU,EADKsB,EACLtB,aAAc+7B,EADTz6B,EACSy6B,iBACpB,OACI5oC,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,QAAMmO,YAAU,EAACC,aAAa,MAAMC,SAAU,SAACC,GAAD,OAAOnV,EAAKsT,aAAa6B,KACnEvO,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,QACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,mBACNlS,KAAK,WACL2R,MAAO7U,EAAKZ,MAAMmwC,gBAClBl6B,SAAU,SAACF,GAAD,OAAOnV,EAAKyvC,wBAAwBt6B,EAAEG,OAAOT,QACvDU,OAAO,SACPjM,QAAQ,WACRxC,UAAU,cAItBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CAAahD,UAAU,YAAYwC,QAAQ,YACvC1C,EAAA3B,EAAA4B,cAACiD,EAAA,EAAD,CACIsL,MAAM,eACNlS,KAAK,WACL2R,MAAO7U,EAAKZ,MAAMsV,SAClBW,SAAU,SAACF,GAAD,OAAOnV,EAAK8U,iBAAiBK,EAAEG,OAAOT,QAChDU,OAAO,SACPjM,QAAQ,eAGpB1C,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACXF,EAAA3B,EAAA4B,cAAA,UAAQC,UAAU,4BAA4B5D,KAAK,UAC9CssC,QAQrB5oC,EAAA3B,EAAA4B,cAAA,KAAGC,UAAU,qCAAqC2M,IAEtD7M,EAAA3B,EAAA4B,cAACge,GAAD,CACIlD,UAAW3hB,EAAKZ,MAAM8xB,UAAWvZ,YAAa,kBAAM3X,EAAKoG,SAAS,CAAC8qB,WAAW,KAC9ElP,aAAchiB,EAAKZ,MAAM4iB,iBAjHrChiB,EAAKZ,MAAQ,CACTmwC,gBAAiB,GACjB76B,SAAU,GACVjB,aAAc,GACd+7B,iBAAkB,SAClBte,WAAW,EACXlP,aAAc,IARHhiB,6BAFMgH,IAAMC,WCD7ByoC,8MAEFzpC,kBAAoB,eAGpBU,OAAS,WACL,IAAI/H,EAAQoB,EAAKpB,MACjB,OACIgI,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,eAAe/jB,GAAG,UAAUO,KAAK,WACxC1D,EAAA3B,EAAA4B,cAAA,KAAIinB,MAAM,2BAA2B/jB,GAAG,mBACpCgkB,cAAY,MAAMvtB,KAAK,gBAAgB8J,KAAK,MAAM4jB,gBAAc,eAAewgB,gBAAc,QADjG,WAIA9nC,EAAA3B,EAAA4B,cAAA,KAAIinB,MAAM,oBAAoB/jB,GAAG,eAC7BgkB,cAAY,MAAMvtB,KAAK,YAAY8J,KAAK,MAAM4jB,gBAAc,WAAWwgB,gBAAc,QADzF,qBAMR9nC,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,cAAc/jB,GAAG,kBACxBnD,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,4BAA4B/jB,GAAG,eAAeO,KAAK,WACzDqkC,kBAAgB,oBACjB/nC,EAAA3B,EAAA4B,cAAC8oC,GAAc/wC,IAEnBgI,EAAA3B,EAAA4B,cAAA,OAAKinB,MAAM,qBAAqB/jB,GAAG,WAAWO,KAAK,WAC9CqkC,kBAAgB,gBACjB/nC,EAAA3B,EAAA4B,cAAC+oC,GAAmBhxC,oCA5BPoI,IAAMC,WAwCxBoN,eALS,SAAAjV,GAAK,MAAK,IAGP,SAAA6D,GAAQ,MAAK,IAEzBoR,CAA6Cq7B,ICsD7CG,GArDA,SAACjxC,GACZ,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACipC,GAAD,CAAcC,OAAK,EAACjE,KAAK,IAAI5wB,UAAW80B,KAExCppC,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,SAAS5wB,UAAW2tB,KAChCjiC,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,oBAAoB5wB,UAAW6I,KAC3Cnd,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,iBAAiB5wB,UAAWkK,KACxCxe,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,YAAY5wB,UAAWmK,KACnCze,EAAA3B,EAAA4B,cAACipC,GAADrqC,OAAAglB,OAAA,GAAkB7rB,EAAlB,CAAyBktC,KAAK,aAAa5wB,UAAW80B,MACtDppC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,SAAS5wB,UAAW0d,KACvChyB,EAAA3B,EAAA4B,cAACipC,GAADrqC,OAAAglB,OAAA,GAAkB7rB,EAAlB,CAAyBktC,KAAK,eAAe5wB,UAAWyV,MACxD/pB,EAAA3B,EAAA4B,cAACipC,GAADrqC,OAAAglB,OAAA,GAAkB7rB,EAAlB,CAAyBktC,KAAK,oBAAoB5wB,UAAWyrB,MAC7D//B,EAAA3B,EAAA4B,cAACipC,GAADrqC,OAAAglB,OAAA,GAAkB7rB,EAAlB,CAAyBktC,KAAK,iBAAiB5wB,UAAWqgB,MAC1D30B,EAAA3B,EAAA4B,cAACipC,GAADrqC,OAAAglB,OAAA,GAAkB7rB,EAAlB,CAAyBktC,KAAK,eAAe5wB,UAAW2f,MACxDj0B,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,QAAQ5wB,UAAW+d,KACtCryB,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,UAAU5wB,UAAW8Z,KACxCpuB,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,WAAW5wB,UAAW+0B,KACzCrpC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,cAAc5wB,UAAWg1B,KAC5CtpC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,QAAQ5wB,UAAWgN,KACtCthB,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,UAAU5wB,UAAWi1B,KACxCvpC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,eAAe5wB,UAAWpF,KAC7ClP,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,SAAS5wB,UAAWk1B,KAIvCxpC,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,uBAAuB5wB,UAAW+hB,KAC9Cr2B,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,uCAAuC5wB,UAAW+hB,KAC9Dr2B,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,yBAAyB5wB,UAAWmwB,KAChDzkC,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,4BAA4B5wB,UAAW7H,KAKnDzM,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,mCAAmC5wB,UAAWquB,KAC1D3iC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,aAAa5wB,UAAWiwB,KAC3CvkC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,UAAU5wB,UAAW6zB,KACxCnoC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,WAAW5wB,UAAW4vB,KACzClkC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,iBAAiB5wB,UAAWgxB,KAC/CtlC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,UAAU5wB,UAAWiyB,KACxCvmC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,WAAW5wB,UAAW6zB,KACzCnoC,EAAA3B,EAAA4B,cAACipC,GAAD,CAAchE,KAAK,aAAa5wB,UAAWw0B,KAI3C9oC,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,eAAe5wB,UAAW+lB,KACtCr6B,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,aAAa5wB,UAAW0mB,KACpCh7B,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAOuI,KAAK,WAAW5wB,UAAWonB,OCwLxC+N,8MACJjxC,MAAQ,CACN0I,MAAM,EACNrI,OAAQ,GACR6wC,iBAAiB,KAGnBC,iBAAmB,WACjBvwC,EAAKoG,SAAS,CAAE0B,MAAM,OAGxB0oC,kBAAoB,WAClBxwC,EAAKoG,SAAS,CAAE0B,MAAM,OAGxB7B,kBAAoB,WAChBzI,QAAQC,IAAI,iBAAkBgC,EAAOqC,SAASf,kBAC1CtB,EAAOqC,SAASpB,gBAClBjB,EAAOqC,SAASpC,aACbU,KAAK,SAAClD,GACLM,QAAQC,IAAI,MAAOP,GACdA,GACD8C,EAAKoG,SAAS,CACZ3G,OAAQvC,MAIfmD,MAAM,SAACC,SAShBmwC,OAAS,WACPzwC,EAAKpB,MAAM2E,uBAGbmtC,eAAiB,WACf,OACA9pC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,yBACbF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,wBACbF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,eAAf,6DAGAF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aAAf,mBACkBF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAU,eAAhB,iCADlB,qGAQG,IAAA6pC,EAAAhrC,KAAA4X,EACwC5X,KAAK/G,MAAxCuI,EADLoW,EACKpW,QAASyE,EADd2R,EACc3R,MAAOvE,EADrBkW,EACqBlW,eACpBtJ,EAAOf,EAAWY,cAFnBmX,EAI+BpP,KAAKvG,MAAjCK,EAJHsV,EAIGtV,OAAQ6wC,EAJXv7B,EAIWu7B,gBACd,OAAI7wC,EAAOkB,YAUR5C,GAAuB,cAAdA,EAAKuM,MACQ,YAAdvM,EAAKuM,KAmCbvM,GAAuB,YAAdA,EAAKuM,KAEb1D,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ8U,MACpBrV,EAAA3B,EAAA4B,cAAC+pC,EAAA3rC,EAAD,MACA2B,EAAA3B,EAAA4B,cAACgqC,GAAD,CAAQ1pC,QAASA,EACXC,UAAWzB,KAAKvG,MAAM0I,KACtByC,SAAU,kBAAMomC,EAAKF,UACrBjoC,kBAAkB,EAClBgB,wBAAwB,EACxBnC,eAAgBA,IAEpBT,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,KACE/F,EAAA3B,EAAA4B,cAAA,QAAMC,UAAWK,EAAQmjB,SACvB1jB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ+E,UACtBtF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACbF,EAAA3B,EAAA4B,cAACiqC,GAAD,OAEFlqC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cAEnBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACbF,EAAA3B,EAAA4B,cAACkqC,GAAD,OAEFnqC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBAQjCF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ8U,MACtBrV,EAAA3B,EAAA4B,cAAC+pC,EAAA3rC,EAAD,MACA2B,EAAA3B,EAAA4B,cAACgqC,GAAD,CAAQ1pC,QAASA,EACTC,UAAWzB,KAAKvG,MAAM0I,KACtBgB,aAAcnD,KAAK4qC,iBACnBhmC,SAAU,kBAAMomC,EAAKF,UAErBjoC,kBAAkB,EAClBgB,wBAAwB,EACxBnC,eAAgBA,IAExBT,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,KACE/F,EAAA3B,EAAA4B,cAACmqC,GAAD,CAAY7pC,QAASA,EACbC,UAAWzB,KAAKvG,MAAM0I,KACtBqE,cAAexG,KAAK6qC,kBACpB5kC,MAAOA,IAEfhF,EAAA3B,EAAA4B,cAAA,QAAMC,UAAWK,EAAQmjB,SACrB1jB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ+E,UACpBtF,EAAA3B,EAAA4B,cAACkqC,GAAD,CAAQ5pC,QAASA,OAtFzBP,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ8U,MACpBrV,EAAA3B,EAAA4B,cAAC+pC,EAAA3rC,EAAD,MACA2B,EAAA3B,EAAA4B,cAACgqC,GAAD,CAAQ1pC,QAASA,EACXC,UAAWzB,KAAKvG,MAAM0I,KACtByC,SAAU,kBAAMomC,EAAKF,UAErBjoC,kBAAkB,EAClBgB,wBAAwB,EACxBnC,eAAgBA,IAEpBT,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,KACE/F,EAAA3B,EAAA4B,cAAA,QAAMC,UAAWK,EAAQmjB,SACvB1jB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ+E,UACtBtF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACbF,EAAA3B,EAAA4B,cAACiqC,GAAD,OAEFlqC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,cAEnBF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,OACXF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,aACfF,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,YACbF,EAAA3B,EAAA4B,cAACkqC,GAAD,OAEFnqC,EAAA3B,EAAA4B,cAAA,OAAKC,UAAU,iBArChCwpC,EACM3qC,KAAK+qC,iBAIZ9pC,EAAA3B,EAAA4B,cAACsP,GAAD,aAlEQnP,IAAMC,WAoLXmT,wBAnbA,SAAAxO,GAAK,IAAAqlC,EAAA,OAAIC,0BAAcD,EAAA,CACpCh1B,KAAM,CACJlG,QAAS,QAEX/M,KAAM,CACJ+M,QAAS,QAEXgL,eAAgB,CACd7N,WAAY,OAEdoO,gBAAiB,CAEf7C,UAAW,QACX0yB,UAAW,QAEb/5B,aAAc,CACV3M,WAAY,OAEhBuW,cAAe,CACb3J,gBAAiBuE,IAEnBw1B,cAAe,CACb/5B,gBAAiBuE,IAEnBy1B,eAAgB,CACdh6B,gBAAiBuE,IAEnB01B,cAAe,CACbj6B,gBAAiBlK,GACjBzE,MAAO,OACP+7B,WAAY,OAEd8M,cAAe,CACbl6B,gBAAiBlK,IAEnBqkC,eAAgB,CACdn6B,gBAAiBlK,IAEnBskC,cAAe,CACbp6B,gBAAiByE,IAEnB41B,cAAe,CACbr6B,gBAAiByE,IAEnB61B,eAAgB,CACdt6B,gBAAiByE,IAEnB81B,WAAY,CACVv6B,gBAAiB0E,IAEnB81B,WAAY,CACVx6B,gBAAiB0E,IAEnB+1B,YAAa,CACXz6B,gBAAiB0E,IAEnBg2B,gBAAiB,CACf16B,gBAAiBwE,IAEnBm2B,gBAAiB,CACf36B,gBAAiBwE,IAEnBo2B,iBAAkB,CAChB56B,gBAAiBwE,IAEnBiF,6BAA8B,CAC5BoxB,WAAU,aAAA/yC,OAAeyc,KAE3Bu2B,8BAA+B,CAC7BD,WAAU,aAAA/yC,OAAeyc,KAE3Bw2B,6BAA8B,CAC5BF,WAAU,aAAA/yC,OAAeyc,KAE3BqF,6BAA8B,CAC5BixB,WAAU,aAAA/yC,OAAegO,KAE3BklC,8BAA+B,CAC7BH,WAAU,aAAA/yC,OAAegO,KAE3BmlC,6BAA8B,CAC5BJ,WAAU,aAAA/yC,OAAegO,KAE3B+T,+BAAgC,CAC9BgxB,WAAU,aAAA/yC,OAAe0c,KAE3B02B,gCAAiC,CAC/BL,WAAU,aAAA/yC,OAAe0c,KAE3B22B,+BAAgC,CAC9BN,WAAU,aAAA/yC,OAAe0c,KAE3B42B,+BAAgC,CAC9BC,aAAY,aAAAvzC,OAAeyc,KAE7ByF,gCAAiC,CAC/BqxB,aAAY,aAAAvzC,OAAeyc,KAE7B+2B,+BAAgC,CAC9BD,aAAY,aAAAvzC,OAAeyc,KAE7Bg3B,+BAAgC,CAC9BF,aAAY,aAAAvzC,OAAegO,IAC3BqE,OAAQ,SAEVqhC,gCAAiC,CAC/BH,aAAY,aAAAvzC,OAAegO,KAE7B2lC,+BAAgC,CAC9BJ,aAAY,aAAAvzC,OAAegO,KAE7B4lC,iCAAkC,CAChCL,aAAY,aAAAvzC,OAAe0c,KAE7Bm3B,kCAAmC,CACjCN,aAAY,aAAAvzC,OAAe0c,KAE7Bo3B,iCAAkC,CAChCP,aAAY,aAAAvzC,OAAe0c,KAE7Bq3B,4BAA6B,CAC3BR,aAAY,qBAEdS,oBAAqB,CACnB97B,gBAAiB,WAEnB+7B,mBAAoB,CAClB/7B,gBAAiBlK,GACjBzE,MAAO,OACPwT,aAAc,QAEhBm3B,mBAAoB,CAElBh8B,gBAAiB,UACjBi8B,UAAW,UAKbC,2BAA4B,CAC1Bl8B,gBAAiB,OACjB3O,MAAO,QAET8qC,sBAAuB,CACrBn8B,gBAAiB,WAEnBo8B,qBAAsB,CACpBp8B,gBAAiB,WAEnBq8B,qBAAsB,CACpBr8B,gBAAiB,WAEnBs8B,6BAA8B,CAC5Bt8B,gBAAiB,QAEnB+J,oBAAqB,CAEnB3C,UAAW,QACX+sB,OAAQ,qBAEVoI,iBAAkB,CAChBpI,OAAQ,oBACRt1B,QAAS,KACTgG,aAAc,QAEhB23B,WAAY,CACVp1B,UAAW,QACXvC,aAAc,QAEhB43B,SAAU,CACR1gC,SAAU,OACVqxB,WAAY,OAEdsP,eAAgB,CACd3gC,SAAU,OACVqxB,WAAY,OAEduP,mBAAoB,CAClBtrC,MAAO,QAETurC,iBAAkB,CAChBvrC,MAAO,UACP+7B,WAAY,OAEdyP,mBAAoB,CAClBxrC,MAAO,WAETyrC,WAAY,CACV5iC,MAAO,OACPC,OAAQ,OAER0K,aAAc,QAGhB/T,OAAQ,CACNisC,OAAQxoC,EAAMwoC,OAAOtoC,OAAS,EAC9BuoC,WAAYzoC,EAAM0oC,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS86B,iBAGzCrsC,YAAa,CACXoC,WA5MgB,IA6MhB8G,MAAK,eAAApS,OA7MW,IA6MX,OACLk1C,WAAYzoC,EAAM0oC,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS+6B,kBAGzC5rC,WAAY,CACV0B,WAAY,GACZmqC,YAAa,KAnNqBnvC,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,OAqN9B,CACJl7B,QAAS,SAtNyBtQ,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,SAwN5B,CACN1/B,MA3NgB,IA4NhBsjC,WAAY,EACZC,WAAY,WA3NsBrvC,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,aA6NxB,CACV1/B,MAhOgB,IAiOhB8iC,WAAYzoC,EAAM0oC,YAAYC,OAAO,QAAS,CAC5CC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS+6B,mBAjOLlvC,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,cAAAxrC,OAAA2C,EAAA,EAAA3C,CAAA,CAqOlC4uC,WAAYzoC,EAAM0oC,YAAYC,OAAO,QAAS,CAC5CC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS86B,gBAEvCK,UAAW,SACXxjC,MAA4B,EAArB3F,EAAMiI,QAAQmhC,KAAW,GAC/BppC,EAAMqpC,YAAYC,GAAG,MAAQ,CAC5B3jC,MAA4B,EAArB3F,EAAMiI,QAAQmhC,KAAW,KA5OAvvC,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,UAAAxrC,OAAAY,EAAA,EAAAZ,CAAA,CAgPlCsQ,QAAS,OACTo/B,WAAY,SACZC,eAAgB,WAChBl/B,QAAS,SACNtK,EAAMypC,OAAOnpC,UApPkBzG,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,UAsP3B,CACPqE,SAAU,EACVp/B,QAA8B,EAArBtK,EAAMiI,QAAQmhC,OAxPWvvC,OAAA2C,EAAA,EAAA3C,CAAAwrC,EAAA,gBA0PrB,CACbsE,cAAe,OA3PmBtE,KAmbJ,CAAEuE,WAAW,GAAhCp7B,CAAwC/F,YAP/B,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACxBrG,EAAMkV,cAEgB,SAAArR,GAAQ,MAAK,CACtCK,YAAa,SAACzF,GAAD,OAAcoF,EAASK,EAAYzF,KAChD0F,kBAAmB,kBAAMN,EAASM,QAEmB8Q,CAA6Cg8B,yBC9b9FoF,GAA2B,CAC7B1rC,GAAI,EAAG+M,cAAe,CAAC9J,MAAM,GAAGkK,YAAY,KCJ1Cw+B,GAAsB,CAC5B3rC,GAAI,EAAGiZ,SAAU,CAAC/kB,KAAK,GAAG+pB,KAAK,KCKzB2tB,GAAgB,CAClBpV,gBAAiB,GACjBT,YAAa,GACbF,gBAAiB,GACjBY,cAAe,GACfpF,QAAS,GACTiH,cAAe,GCFbuT,GAAaC,aAAgB,CAC/BnuB,gBHJW,WAAwB,IAAvBtoB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACnC,OAAOvb,EAAOtT,MACV,I/Gb4B,uB+GexB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPglB,iBAAkB,CAACla,MAAM,GAAGkK,YAAY,IACxCuP,gBAAiB,gCAGzB,I/Gb4B,uB+Gc5B,I/GtByB,oB+GwBrB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,I/GpBuB,kB+GsBnB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACVkR,iBAAkB1Q,EAAOrT,UAGjC,I/G/B+B,0B+GiC3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVkR,iBAAkB,CAACla,MAAM,GAAGkK,YAAY,IACxCuP,gBAAiB,kCAGzB,I/GrCqC,gC+GwCjC,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACf5uB,iBAAkB1Q,EAAOrT,UAGjC,I/G7CyC,oC+G+CrC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,I/GlDgC,2B+GoD5B,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP8T,UAAU,EACVkR,iBAAkB,CAACnd,GAAI,EAAG+M,cAAe,CAAC9J,MAAM,GAAGkK,YAAY,KAC/DuP,gBAAiB,GACjBI,gBAAgB,EAChBE,aAAcvQ,EAAOrT,UAG7B,I/GvE6B,wB+GyEzB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,GACbV,mBAAoB1nB,EAAM2nB,eAGlC,I/G/E+B,0B+GiF3B,OAAOthB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5Be,mBAAoBtQ,EAAOrT,QAAQ2jB,qBAG3C,I/G9E6B,wB+GgFzB,OAAOrhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8nB,iBAAkBuuB,GAClBvzC,MAAOsU,EAAOrT,UAGtB,I/GpFqB,gB+GsFjB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,I/G5FsB,iB+G8FlB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IGpGfyqB,aCTW,WAAwB,IAAvBzqB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,InIR8B,oBmIU1B,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPunB,cAAe,CAAC9P,MAAM,IACtB8M,gBAAiB,6BAGzB,InIhB2B,iBmIkBvB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,InIpBuC,6BmIsBnC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfrsB,cAAejT,EAAOrT,UAG9B,InI3B2C,iCmI6BvC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,InIhCiC,uBmIkC7B,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPunB,cAAe,CAAC1f,GAAI,EAAGkf,WAAY,CAACtP,MAAM,KAC1C3D,UAAU,EACVyQ,gBAAiB,GACjBI,gBAAgB,EAChByC,UAAW9S,EAAOrT,UAG1B,InIjD+B,qBmImD3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,GACb6B,eAAgBjqB,EAAMkqB,YAG9B,InIzDiC,uBmI2D7B,OAAO7jB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5BsD,eAAgB7S,EAAOrT,QAAQkmB,iBAGvC,InI5D8B,oBmI8DzB,OAAO5jB,OAAAY,EAAA,EAAAZ,CAAA,GACDrG,EADN,CAEGqqB,cAAe,CAAC9P,MAAM,IACtBzX,MAAOsU,EAAOrT,UAGtB,InIlE0B,gBmIoEtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,InI1E2B,iBmI4EvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,ID3EVy2B,WELW,WAAwB,IAAvBz2B,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IvEX4B,kBuEaxB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEK8C,MAAO,KACPmzB,YAAa,CACTtrB,GAAI,EACJqhB,SAAU,CACFE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGrBpF,YAAY,EACZ2B,gBAAiB,2BAG1B,IvEvB4B,kBuEwB5B,IvE1B4B,kBuE2B5B,IvEjCyB,euEmCrB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,IvE/BuB,auEiCnB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACV+/B,YAAav/B,EAAOrT,UAG5B,IvE5C+B,qBuE8C3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVqf,YAAa,CACRtrB,GAAI,EACJqhB,SAAU,CACNE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGlBzD,gBAAiB,6BAGzB,IvE9D+B,qBuEgE3B,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACV8O,YAAY,EACZuQ,YAAa,CACRtrB,GAAI,EACJqhB,SAAU,CACNE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGlBzD,gBAAiB,6BAGzB,IvEhFqC,2BuEmFjC,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfzgB,YAAa7e,EAAOrT,UAG5B,IvExFyC,+BuE0FrC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,IvE9FwC,8BuEgGpC,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB1jB,cAAe5b,EAAOrT,UAG9B,IvElG8B,oBuEoG1B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEK8C,MAAO,KACPmzB,YAAa,CACTtrB,GAAI,EACJqhB,SAAU,CACNE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGjBpF,YAAY,EACZ2B,gBAAiBjQ,EAAOrT,QAAQX,QAChC2pB,KAAM3V,EAAOrT,QAAQ9F,OAG9B,IpIpIiC,uBoIuI5B,OAAOoI,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0pB,OAAQtS,EAAOrT,UAGxB,IpHtIqC,2BoHyIjC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPmzB,YAAa,CACRtrB,GAAI,EACJqhB,SAAU,CACNE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGlBkI,cAAe,CACV9H,QAAS,GACTC,WAAW,GAEhB9D,gBAAiB,GACjBI,gBAAgB,EAChBlB,WAAYnP,EAAOrT,UAG3B,IvE7JgC,sBuE+J5B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtBzgB,YAAa7e,EAAOrT,QACpBivB,cAAe,CACX9H,QAAS,GACTC,WAAW,KAIvB,IvErL6B,mBuE6L7B,IvE9L2B,iBuEgMvB,OAAO9kB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,KAGrB,IvEpM+B,qBuEsM3B,OAAO/hB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5Be,mBAAoBtQ,EAAOrT,QAAQ2jB,qBAG3C,IvE9L2B,iBuEgMvB,OAAOrhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIi2B,YAAa,CACZtrB,GAAI,EACJqhB,SAAU,CACFE,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,KAGlBhoB,MAAOsU,EAAOrT,UAGtB,IvE7M0B,gBuE+MtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,IvErN2B,iBuEuNvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IFnOVi5B,iBGVW,WAAwB,IAAvBj5B,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,InEPkC,wBmES9B,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPi2B,kBAAmB,CACftf,SAAS,GACTC,MAAM,GACNC,UAAW,GACX0W,gBAAiB,EACjB+I,iBAAkB,IAEtB/R,gBAAiB,iCAGzB,InEhBkC,wBmEiBlC,InEtB+B,qBmEwB3B,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,InEvB6B,mBmEyBzB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACVggC,kBAAmBx/B,EAAOrT,UAGlC,InElCqC,2BmEoCjC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVmiB,kBAAmB,CACdtf,SAAS,GACTC,MAAM,GACNC,UAAW,GACXY,MAAO,GACP8V,gBAAiB,EACjB+I,iBAAkB,IAEvB/R,gBAAiB,mCAGzB,InE/C2C,iCmEoDvC,OAHAjpB,QAAQC,IAAI,wBACZD,QAAQC,IAAI+Y,EAAOrT,SAEZsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACf3d,kBAAmB3hB,EAAOrT,UAGlC,InEzD+C,qCmE2D3C,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,InE3DoC,0BmEgEhC,OAHAt4C,QAAQC,IAAI,2BACZD,QAAQC,IAAI+Y,EAAOrT,SAEZsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP8T,UAAU,EACVmiB,kBAAmB,CACdtf,SAAS,GACTC,MAAM,GACNC,UAAW,GACX0W,gBAAiB,EACjB+I,iBAAkB,IAEvB/R,gBAAiB,GACjBI,gBAAgB,EAChB0H,WAAY/X,EAAOrT,UAG3B,IrIzFiC,uBqI8F5B,OAHA3F,QAAQC,IAAI,wBACZD,QAAQC,IAAI+Y,EAAOrT,SAEZsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI+4B,kBAAmB,CACdtf,SAAS,GACTC,MAAM,GACNC,UAAW,GACX0W,gBAAiB,EACjB+I,iBAAkB,IAEvB1P,OAAQtS,EAAOrT,UAGxB,InE7GmC,yBmE+G/B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,GACbyuB,mBAAoB72C,EAAM82C,gBAGlC,InErHqC,2BmEuHjC,OAAOzwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5BkwB,mBAAoBz/B,EAAOrT,QAAQ8yC,qBAG3C,InEjHiC,uBmEmH7B,OAAOxwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI+4B,kBAAmB,CACdtf,SAAS,GACTC,MAAM,GACNC,UAAW,GACX0W,gBAAiB,EACjB+I,iBAAkB,IAEvBt2B,MAAOsU,EAAOrT,UAGtB,InE3H0B,gBmE6HtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,InEnI2B,iBmEqIvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IH7IVoiB,iBIRW,WAAwB,IAAvBpiB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IrHV6B,mBqHYzB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEK8C,MAAO,KACP2uB,aAAc,CACV9mB,GAAI,EACJ0P,UAAW,CACXE,MAAM,GACND,SAAS,GACTE,SAAU,GACV6V,gBAAiB,EACjBttB,OAAQ,QACR0kB,gBAAiBznB,EAAMynB,iBAG3BJ,gBAAiB,0BACjB3B,YAAY,IAGrB,IrHxB6B,mBqHyB7B,IrH9B0B,gBqHgCtB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,IrH/BwB,cqHiCpB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACVmgC,aAAc3/B,EAAOrT,UAG7B,IrH1CgC,sBqH4C5B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVqf,YAAa,CACR/J,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuc,kBAAmB,EACnBC,kBAAmB,GACnBjM,QAAS,IAEdzD,gBAAiB,8BAGzB,IrHxDsC,4BqH2DlC,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfzgB,YAAa7e,EAAOrT,UAG5B,IrHhE0C,gCqHkEtC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,IrHtEwC,8BqHwEpC,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB1jB,cAAe5b,EAAOrT,UAG9B,IrH1EgC,sBqH4E5B,IAAIizC,EAAM,GAMV,OALG5/B,EAAOrT,SAAWqT,EAAOrT,QAAQyM,OAAS,GACzC4G,EAAOrT,QAAQsJ,IAAI,SAACqH,EAAMpH,GACtB0pC,EAAIn3C,KAAK6U,KAGVrO,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP8T,UAAW5W,EAAM4W,SACjB6a,aAAc,CACV9mB,GAAI,EACJ0P,UAAW,CACVE,MAAM,GACND,SAAS,GACTE,SAAU,GACV6V,gBAAiB,EACjBttB,OAAQ,QACR0kB,gBAAiBznB,EAAMynB,iBAG5BJ,gBAAiB,GACjBI,gBAAiBznB,EAAMynB,eACvBlI,MAAOy3B,IAGf,ItI/GiC,uBsIkH5B,OAAO3wC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0pB,OAAQtS,EAAOrT,UAGxB,ItHjHqC,2BsHoHjC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP2uB,aAAc,CACV9mB,GAAI,EACJ0P,UAAW,CACV6R,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACPuQ,QAAS,KAGdkI,cAAe,CACV9H,QAAS,GACTC,WAAW,GAEhB9D,gBAAiB,GACjBI,gBAAgB,EAChBlB,WAAYnP,EAAOrT,UAG3B,IrHzIiC,uBqH2I7B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtBzgB,YAAa7e,EAAOrT,QACpBivB,cAAe,CACX9H,QAAS,GACTC,WAAW,KAIvB,IrH/J8B,oBqHiK1B,OAAO9kB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,GACbV,mBAAoB1nB,EAAM2nB,eAGlC,IrHvKgC,sBqHyK5B,OAAOthB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5Be,mBAAoBtQ,EAAOrT,QAAQ2jB,qBAG3C,IrHnK6B,mBqHqKxB,IAAI3jB,EAAUqT,EAAOrT,QACrB,OAAGA,GAAmC,QAAxBA,EAAQ+hB,YACXzf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIuf,MAAO,GACPmK,OAAQ,GACRutB,eAAgBj3C,EAAMi3C,cACtBn0C,MAAOiB,IAGTsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIi2B,YAAa,CACR/J,SAAS,GACTpU,YAAY,GACZ+O,SAAU,GACVtM,MAAO,GACP28B,SAAU,EACVpsB,QAAS,IAEdhoB,MAAO,OAGf,IrHxL0B,gBqH0LtB,OAAOuD,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,IrHhM2B,iBqHkMvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IJzMVyyB,mBKbW,WAAwB,IAAvBzyB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IzFN+B,qByFS3B,OADWsT,EAAOrT,QACXsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIyxB,aAAcra,EAAOrT,UAG7B,IzFZoC,0ByFe/B,OADWqT,EAAOrT,QACXsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIyf,aAAcrI,EAAOrT,UAG9B,IzFlB0C,gCyFoBtC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEImvB,WAAY/X,EAAOrT,UAG3B,IzFjCiC,uByFoC7B,OADeqT,EAAOrT,QACfsC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEKm3C,UAAWn3C,EAAMm3C,SACjB1lB,aAAcra,EAAOrT,QACrBqzC,UAAW,cAGpB,IzF1CsC,4ByF6ClC,OADehgC,EAAOrT,QACfsC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEKm3C,UAAWn3C,EAAMm3C,SACjB1lB,aAAcra,EAAOrT,QACrBqzC,UAAW,gBAGpB,IzF1CuC,6ByF4ClC,IAAIC,EAASjgC,EAAOrT,QACpB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIyxB,aAAaprB,OAAAY,EAAA,EAAAZ,CAAA,GACNgxC,EADK,CAERh9B,UAAUhU,OAAAY,EAAA,EAAAZ,CAAA,GACHgxC,EAAOh9B,UADL,CAELyV,SAASzpB,OAAAY,EAAA,EAAAZ,CAAA,GACFgxC,EAAOh9B,UAAUyV,gBAMzC,IzFtD0B,gByFwDtB,OAAOzpB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,IzF9D2B,iByFgEvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IL9DV47B,qBMjBW,WAAwB,IAAvB57B,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IzHDqC,2ByHGjC,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEKs3C,YAAa,MACb7lB,aAAcra,EAAOrT,UAG9B,IzHXkC,wByHa7B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACDrG,EADN,CAEGwb,YAAapE,EAAOrT,UAgB5B,IzH3BqC,2ByH8BjC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB5a,WAAY1kB,EAAOrT,UAG3B,IzHnC+B,qByHqC3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIwb,YAAapE,EAAOrT,UAG7B,I1FpC2B,gB0FsCtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,I1F5C2B,iB0F8CvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IN3CVkV,YOVW,WAAwB,IAAvBlV,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IxIX6B,mBwIazB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACCrG,EADR,CAEK8C,MAAO,KACPmiB,aAAc,CACVta,GAAI,EACJ+U,UAAW,CACPrK,QAAS,GACTnK,KAAM,UAGdwa,YAAY,EACZ2B,gBAAiB,4BAG1B,IxIrB6B,mBwIsB7B,IxI3B0B,gBwI6BtB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,IxI5BwB,cwI8BpB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACV2gC,aAAcngC,EAAOrT,UAG7B,IxIvCgC,sBwIyC5B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVqO,aAAc,CACTta,GAAI,EACJ+U,UAAW,CACPrK,QAAS,GACTnK,KAAM,UAGfwa,YAAY,EACZ2B,gBAAiB,8BAGzB,IxIpDsC,4BwIuDlC,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfzxB,aAAc7N,EAAOrT,UAG7B,IxI5D0C,gCwI8DtC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,IxI9D+B,qBwIiE3B,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP8T,UAAU,EACVqO,aAAc,CACVta,GAAI,EACJ+U,UAAW,CACVrK,QAAS,GACTnK,KAAM,UAGXmc,gBAAiB,GACjBI,gBAAgB,EAChBnE,MAAOlM,EAAOrT,UAGtB,IxI7F8B,oBwI+F1B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIynB,gBAAiBznB,EAAMynB,eACvBW,YAAa,GACbyuB,mBAAoB72C,EAAM82C,gBAGlC,IxIrGgC,sBwIuG5B,OAAOzwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIooB,YAAahR,EAAOrT,QAAQ4iB,WAC5BkwB,mBAAoBz/B,EAAOrT,QAAQ8yC,qBAG3C,IxIjG4B,kBwImGxB,OAAOxwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIu3C,aAAc,CACT99B,SAAS,GACTC,MAAM,GACNC,UAAW,GACX0W,gBAAiB,EACjB+I,iBAAkB,IAEvBt2B,MAAOsU,EAAOrT,UAGtB,IxI9GgC,sBwIgH5B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIw3C,iBAAkBpgC,EAAOrT,QACzBkE,gBAAgB,IAGxB,IxIrHgC,sBwIuH5B,OAAO5B,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIw3C,iBAAkB,KAClBvvC,gBAAgB,IAGxB,IxIzH0B,gBwI2HtB,OAAO5B,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,IxIjI2B,iBwImIvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IPzIV6+B,gCQpBW,WAAwB,IAAvB7+B,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACnC,OAAQvb,EAAOtT,MACX,I7DA0B,qB6DElB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIy3C,cAAergC,EAAOrT,UAGlC,I7DZmC,8B6Dc3B,IAAI2zC,EAAatgC,EAAOrT,QACxB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIi+B,oBAAqByZ,EACrB3a,gBAAkB2a,GAAcA,EAAWra,eACvCqa,EAAWra,cAActQ,MACzB2qB,EAAWra,cAActQ,KAAKvc,OAAS,EACvCknC,EAAWra,cAActQ,KAAK,GAAK,KAGnD,I7DrBkC,6B6DuB1B,IAAIgQ,EAAkB3lB,EAAOrT,QAC7B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI+8B,gBAAgB12B,OAAAY,EAAA,EAAAZ,CAAA,GACT02B,EADQ,CAEXH,kBAAkBv2B,OAAAY,EAAA,EAAAZ,CAAA,GACX02B,EAAgBH,kBADN,CAEbC,aAAcE,EAAgBH,kBAAkBC,mBAKpE,I7DlC8B,yB6DoCtB,OAAOx2B,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIi+B,oBAAqB,KACrBl7B,OAAQqU,EAAOrT,UAG3B,I7D7CsB,iB6DoDtB,I7DnDkB,a6DqDV,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI+8B,gBAAiB3lB,EAAOrT,UAGpC,QACI,OAAO/D,IRrCf4lB,WFhBW,WAAwB,IAAvB5lB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IpGV4B,kBoGYxB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPomB,YAAa,CAACrqB,KAAK,GAAG+pB,KAAK,IAC3BvB,gBAAiB,2BAGzB,IpGZ4B,kBoGa5B,IpGnByB,eoGqBrB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,IpGnBuB,aoGqBnB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtB9/B,UAAU,EACVsS,YAAa9R,EAAOrT,UAG5B,IpG9B+B,qBoGgC3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI4W,UAAU,EACVsS,YAAa,CAACrqB,KAAK,GAAG+pB,KAAK,IAC3BvB,gBAAiB,6BAGzB,IpGpCqC,2BoGsCjC,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfxtB,YAAa9R,EAAOrT,UAG5B,IpG3CyC,+BoG6CrC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,IAGvB,IpGhD+B,qBoGkD3B,OAAOrwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP8T,UAAU,EACVsS,YAAa,CAACve,GAAI,EAAGiZ,SAAU,CAAC/kB,KAAK,GAAG+pB,KAAK,KAC7CvB,gBAAiB,GACjBI,gBAAgB,EAChBvC,QAAS9N,EAAOrT,UAGxB,IpG3D4B,kBoG6DxB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIkpB,YAAaotB,GACbxzC,MAAOsU,EAAOrT,UAGtB,QACI,OAAO/D,IExDVmiB,iBSpBW,WAAwB,IAAvBniB,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACnC,OAAQvb,EAAOtT,MACX,IhHJgC,2BgHMxB,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPub,UAAWjH,EAAOrT,UAG9B,IhHRsC,iCgHU9B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPyb,gBAAiBnH,EAAOrT,UAGpC,IhHlB+B,0BgHoBvB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPwb,SAAUlH,EAAOrT,UAGzB,IhHtBkC,iCgHuB9B,IAAIqa,EAAkBhH,EAAOrT,QAC7B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPsb,gBAAiBA,IAI7B,QACI,OAAOpe,ITff0nC,wBUrBW,WAAwB,IAAvB1nC,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACnC,OAAQvb,EAAOtT,MACX,I5CR+C,0C4CUvC,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIskC,mBAAoBltB,EAAOrT,SAAW,KAGlD,I5Cd4C,uC4CgBpC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,GAGX,I5CnBmC,kC4CqB/B,OAAOqG,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIwlC,iBAAkBpuB,EAAOrT,UAGjC,I5CzBgC,+B4C2B5B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,GAGX,I5C9B4B,2B4CgCxB,OAAOqG,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIymC,mBAAoBrvB,EAAOrT,UAGnC,I5CpCyB,wB4CsCrB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,GAGf,QACI,OAAOA,IVpBf0uC,aWlBW,WAAwB,IAAvB1uC,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACX,IzBX8B,oByBa1B,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP4qC,cAAe,CAAC/iC,GAAI,EAAGyiC,WAAY,CAACvuC,KAAK,GAAIyuC,SAAS,KACtDjmB,gBAAiB,6BAGzB,IzBnB2B,iByBqBvB,OAAOhhB,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,IzBvBuC,6ByByBnC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAe,EACfhJ,cAAet2B,EAAOrT,QACtBopC,gBAAiB,KAGzB,IzB5BmC,yByB8B/B,OAAO9mC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtBvJ,gBAAiB/1B,EAAOrT,UAGhC,IzBrCiC,uByBuC7B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI02C,eAAgB12C,EAAM02C,cACtBhJ,cAAet2B,EAAOrT,QACtBopC,gBAAiB,KAGzB,IzBhDiC,uByBkD7B,OAAO9mC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP4qC,cAAe,CAAC/iC,GAAI,EAAGyiC,WAAY,CAACvuC,KAAK,GAAIyuC,SAAS,KACtDH,gBAAiB,GACjB9lB,gBAAiB,GACjBsmB,UAAWv2B,EAAOrT,UAG1B,IzB1D8B,oByB4DzB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACDrG,EADN,CAEG23C,cAAe,CAAC94C,KAAK,IACrBiE,MAAOsU,EAAOrT,UAGtB,IzB9D0B,gByBgEtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,IzBtE2B,iByBwEvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,IX3DV+vC,sBY3BW,WAAwB,IAAvB/vC,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACnC,OAAQvb,EAAOtT,MACX,IrBFyC,oCqBIjC,OAAOuC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP+sC,gBAAiBz4B,EAAOrT,UAGpC,IrBTsC,iCqBW9B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAG1B,IrBf4C,uCqBiBpC,IAAIizC,EAAM,GAMV,OALI5/B,EAAOrT,SAAWqT,EAAOrT,QAAQyM,OAAS,GAC1C4G,EAAOrT,QAAQsJ,IAAI,SAACqH,EAAMpH,GACtB0pC,EAAIn3C,KAAK6U,KAGVrO,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPge,cAAek2B,IAG3B,IrB5ByC,oCqB8BjC,OAAO3wC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAI1B,QACI,OAAO/D,IZZf8iC,WDVW,WAAwB,IAAvB9iC,EAAuBgR,UAAAR,OAAA,QAAAmiB,IAAA3hB,UAAA,GAAAA,UAAA,GAAf,GAAIoG,EAAWpG,UAAAR,OAAA,EAAAQ,UAAA,QAAA2hB,EACvC,OAAOvb,EAAOtT,MACV,I1CrBiC,wB0CuB7B,MAAO,CACHw+B,oBAAqBiU,IAG7B,I1C1BiC,wB0C4B7B,OAAOlwC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACP+/B,QAAQ,IAGjB,I1CjCoC,0B0CmChC,OAAOx8B,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPw/B,oBAAqB,GACrBjb,gBAAiB,qCACjBwb,QAAQ,IAGhB,I1ChCoC,0B0CiCpC,I1C3CiC,uB0C6C7B,OAAOx8B,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,I1CzCuC,6B0C2CnC,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIqnB,gBAAiB,kCAGzB,I1C9C6C,mC0CkDzC,IAAIuwB,EAAWxgC,EAAOrT,QAEtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIsiC,oBAAoBj8B,OAAAY,EAAA,EAAAZ,CAAA,GACbrG,EAAMsiC,oBADM,CAEfnB,gBAAiByW,EAASzW,gBAC1BT,YAAakX,EAASlX,YACtBF,gBAAiBoX,EAASpX,gBAC1BY,cAAewW,EAASxW,kBASpC,I1C7EsC,4B0CkFlC,OAHAhjC,QAAQC,IAAI,8BACZD,QAAQC,IAAI+Y,EAAOrT,SAEZsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPukB,gBAAiB,GACjBoc,wBAAyB,KACzB3B,YAAa1qB,EAAOrT,UAG5B,I1CvF+B,qB0CyF3B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIyjC,wBAAyBrsB,EAAOrT,UAGxC,I1C7FmC,yB0C+F/B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEIyjC,wBAAyB,OAGjC,I1CvGqC,2B0C4GhC,OAHJrlC,QAAQC,IAAI,qCACZD,QAAQC,IAAI+Y,EAAOrT,SAERsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAO,KACPukB,gBAAiB,GACjBwwB,oBAAqBzgC,EAAOrT,UAGrC,I1C/GmC,yB0CiH/B,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI8C,MAAOsU,EAAOrT,UAGtB,I1C/G0B,gB0CiHtB,OAAOsC,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,I1CvH2B,iB0CyHvB,OAAOrf,OAAAY,EAAA,EAAAZ,CAAA,GACArG,EADP,CAEI0lB,YAAY,IAGpB,QACI,OAAO1lB,MCvGC83C,GARK,SAAC93C,EAAOoX,GAKxB,MAJmB,wBAAhBA,EAAOtT,OACN9D,OAAQ2yB,GAGL6jB,GAAWx2C,EAAOoX,IarCd,SAAS2gC,KACpB,OAAOC,aACHF,GACAG,aAAgBC,WC0DTC,eA9Cb,SAAAA,EAAY34C,GAAO,IAAAoB,EAAA,OAAAyF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4xC,IACjBv3C,EAAAyF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8xC,GAAAzxC,KAAAH,KAAM/G,KASR0kB,eAAiB,SAACthB,GACZxE,QAAQC,IAAI,WAAYuE,GACN,IAAI6N,KAAK,CAACvS,KAAKC,UAAU,CAACgmB,aAAcvhB,EAASwhB,aAAc,KAAM,IAAK,CAACtgB,KAAO,qBAApG,IAOInD,EAAMN,EAAOqC,SAASf,iBAAmB,cAC7CvD,QAAQC,IAAI,MAAOsC,GACnBvC,QAAQC,IAAI,eAAgBuE,EAASuhB,cACrCrjB,IAAMC,IAAIJ,EAAK,CACb3C,QAAS,CACPmmB,aAAcvhB,EAASwhB,eAExBpjB,KAAK,SAAClD,GACPM,QAAQC,IAAI,MAAMP,GAClB,IAAMC,EAAQD,EAAIE,QAAQ,gBAC1BM,aAAaC,QAAQ,aAAcR,GACnC6C,EAAKoG,SAAS,CACZoxC,iBAAiB,EACjBz5C,KAAMb,EAAIG,UA9BlB2C,EAAKZ,MAAQ,CACXo4C,iBAAiB,EACjBz5C,KAAM,KACNZ,MAAO,IALQ6C,wEAsCjB,OACE4G,EAAA3B,EAAA4B,cAAC4wC,EAAA,EAAD,CAAUC,MAAOP,MACfvwC,EAAA3B,EAAA4B,cAAC8wC,GAAD,cA1CU1wC,aCFZi8B,GAAe,WAEjB,QADYxlC,aAAaI,QAAQ,eAMtB85C,GAlBkB,SAAA3oC,GAA8C,IAAhChI,EAAgCgI,EAA3CiM,UAAiCkoB,GAAUn0B,EAArBo0B,OAAqB59B,OAAA69B,GAAA,EAAA79B,CAAAwJ,EAAA,yBAE3E,OACIrI,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD99B,OAAAglB,OAAA,GACQ2Y,EADR,CAEIz8B,OAAQ,SAAC/H,GAAD,OAA8B,IAAnBskC,KACbt8B,EAAA3B,EAAA4B,cAACI,EAADxB,OAAAglB,OAAA,GAAe2Y,EAAUxkC,IACzBgI,EAAA3B,EAAA4B,cAAC08B,GAAA,EAAD,CAAU32B,GAAI,CAAC1N,SAAU,oBCG5B24C,GARY,SAACj5C,GACxB,OACIgI,EAAA3B,EAAA4B,cAAA,WACID,EAAA3B,EAAA4B,cAACixC,GAAD,CAA0BhM,KAAK,QAAQ5wB,UAAW68B,OC6CxDC,8MACJ54C,MAAQ,CACNK,OAAQ,MAGVwG,kBAAoB,WAClBxG,EAAOqC,SAASpC,aACXU,KAAK,SAAClD,GACH8C,EAAKoG,SAAS,CACZ3G,OAAQvC,SAMpBuzC,OAAS,WACPzwC,EAAKpB,MAAM2E,6FAGJ,IAAAga,EACwB5X,KAAK/G,MAAxBuI,EADLoW,EACKpW,QADLoW,EACc3R,MAGjB,OADiBjG,KAAKvG,MAAhBK,OACKkB,WAOLiG,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ8U,MACpBrV,EAAA3B,EAAA4B,cAAC+pC,EAAA3rC,EAAD,MACA2B,EAAA3B,EAAA4B,cAACoxC,GAAD,CAAU9wC,QAASA,IACjBP,EAAA3B,EAAA4B,cAAC8F,EAAA,EAAD,KACE/F,EAAA3B,EAAA4B,cAAA,QAAMC,UAAWK,EAAQmjB,SACvB1jB,EAAA3B,EAAA4B,cAAA,OAAKC,UAAWK,EAAQ+E,UACpBtF,EAAA3B,EAAA4B,cAACqxC,GAAD,SAXhBtxC,EAAA3B,EAAA4B,cAACsP,GAAD,aAzBoBnP,IAAMC,WAwDvBmT,wBA/FA,SAAAxO,GAAK,OAAIslC,yBAAe,CACrCj1B,KAAM,CACJlG,QAAS,QAEX5N,OAAQ,CACNisC,OAAQxoC,EAAMwoC,OAAOtoC,OAAS,EAC9BuoC,WAAYzoC,EAAM0oC,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS86B,iBAGzCrsC,YAAa,CACXoC,WAdgB,IAehB8G,MAAK,eAAApS,OAfW,IAeX,OACLk1C,WAAYzoC,EAAM0oC,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ5oC,EAAM0oC,YAAYE,OAAOC,MACjC76B,SAAUhO,EAAM0oC,YAAY16B,SAAS+6B,kBAGzC5rC,WAAY,CACV0B,WAAY,GACZmqC,YAAa,IAEf1oC,QAAQzG,OAAAY,EAAA,EAAAZ,CAAA,CACNsQ,QAAS,OACTo/B,WAAY,SACZC,eAAgB,WAChBl/B,QAAS,SACNtK,EAAMypC,OAAOnpC,SAElBoe,QAAS,CACPgrB,SAAU,EACVp/B,QAA8B,EAArBtK,EAAMiI,QAAQmhC,MAEzBO,cAAe,CACbA,cAAe,SA4De,CAAEC,WAAW,GAAhCp7B,CAAwC/F,YAN/B,SAAAjV,GAAK,OAAAqG,OAAAY,EAAA,EAAAZ,CAAA,GACxBrG,EAAMkV,cAEgB,SAAArR,GAAQ,MAAK,IAGeoR,CAA6C2jC,KC5FtE/wC,YCNVc,QACW,cAA7BlJ,OAAOC,SAASq5C,UAEe,UAA7Bt5C,OAAOC,SAASq5C,UAEhBt5C,OAAOC,SAASq5C,SAASxkC,MACvB,0ECNNykC,IAASzxC,OAAOC,EAAA3B,EAAA4B,cAACwxC,GAAD,MAAShnC,SAASC,eAAe,SDqH3C,kBAAmBxD,WACrBA,UAAUwqC,cAAcC,MAAMn4C,KAAK,SAAAilC,GACjCA,EAAamT","file":"static/js/main.0599506a.chunk.js","sourcesContent":["var history = {};\r\nconst AuthHelper = {\r\n    Login: (res) => {\r\n        const token = res.headers['x-auth-token'];\r\n        const data = JSON.stringify(res.data);\r\n        console.log('res.data', data);\r\n        localStorage.setItem(\"auth-token\", token);\r\n        localStorage.setItem(\"user-info\", data);\r\n    },\r\n    GetUserInfo: () => {\r\n        let userInfo = localStorage.getItem(\"user-info\");\r\n        if(userInfo) {\r\n            let user = JSON.parse(userInfo);\r\n            console.log('userinfo', user.name);\r\n            return user;\r\n        } else {\r\n            console.log('userinfo not available');\r\n        }\r\n        return null;\r\n    },\r\n    getToken: () => {\r\n        return localStorage.getItem('auth-token');\r\n    },\r\n    isLoggedIn: () => {\r\n        let token = localStorage.getItem('auth-token');\r\n        // console.log('token', token);\r\n        if(token) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n    UserRoles: () => {\r\n        return [ \"guest\", \"recruiter\", \"candidate\", \"admin\" ];\r\n    },\r\n    LogOut: () => {\r\n        console.log('remove token');\r\n        localStorage.removeItem('auth-token');\r\n        localStorage.removeItem('user-info');\r\n        // let token = localStorage.getItem('auth-token');\r\n        // console.log('token', token);\r\n    },\r\n    SetHistory: (propsHistory) => {\r\n        console.log('set history', propsHistory);\r\n        history = propsHistory;\r\n    },\r\n    GetHistory: () => {\r\n        console.log('get history');\r\n        return history;\r\n    }\r\n}\r\nexport default AuthHelper;\r\n","import AuthHelper from \"../AuthHelper\";\r\n\r\n// import createHistory from 'history/createBrowserHistory';\r\n\r\n\r\nconst RedirectFromAction = (page, props) => {\r\n    if(page === 'login') {\r\n        window.location.reload(); \r\n    }\r\n    let hist = AuthHelper.GetHistory();\r\n    console.log('redirect called', typeof(hist));\r\n    if(typeof(hist.push) === 'function'){\r\n        // hist.push('/' + page);\r\n        hist.push({\r\n            pathname:  `/${page}`,\r\n            state: props\r\n        });\r\n    }\r\n}\r\n// let history = createHistory();\r\n// const RedirectFromAction = (page) => {\r\n//     console.log('redirect to 401 called', history);\r\n//     // history.pop();\r\n//     history.push('/unauthorizedUser');\r\n// }\r\nexport default RedirectFromAction;","import axios from 'axios';\r\nimport RedirectFromAction from './actions/RedirectFromAction';\r\n\r\nvar domain = 'http://localhost:3001';\r\n//domain = '';\r\nvar domainUrl = 'http://localhost:3000';\r\nvar configValues = {};\r\nconst validHeaders = [\r\n    { prop: \"category\", name: \"Category\" },\r\n    { prop: \"skill\", name: \"Skill\" },\r\n    { prop: \"question\", name: \"Title\" },\r\n    { prop: \"description\", name: \"Description\" },\r\n    { prop: \"score\", name: \"Score\" },\r\n    { prop: \"minimumExperience\", name: \"Min\" },\r\n    { prop: \"maximumExperience\", name: \"Max\" },\r\n    { prop: \"correctAnswer\", name: \"Answer\" },\r\n    { prop: \"choiceA\", name: \"A\" },\r\n    { prop: \"choiceB\", name: \"B\" },\r\n    { prop: \"choiceC\", name: \"C\" },\r\n    { prop: \"choiceD\", name: \"D\" },\r\n    { prop: \"choiceE\", name: \"E\" }\r\n];\r\n\r\nconst techAssessment = 'Tech Assessment';\r\nconst hitech = 'Highness Admin';\r\nconst hitechConfig = {\r\n    notifyEmailId: 'encasherr@gmail.com'\r\n}\r\n\r\nexport default class config {\r\n    static instance = config.instance || new config();\r\n\r\n    initialize = () => {\r\n        return new Promise((resolve, reject) => {\r\n            if (configValues && configValues.site_url) return;\r\n\r\n            \r\n            var apiUrl = this.isdevEnv() ? domain : '';\r\n                \r\n            let url = apiUrl + '/api/loadConfig';\r\n            axios.get(url)\r\n                .then((res) => {\r\n                    console.log('config values', res.data);\r\n                    configValues = res.data;\r\n                    if (configValues) {\r\n                        if (this.isdevEnv()) {\r\n                            configValues.site_url = domain;\r\n                        }\r\n                        resolve(configValues);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                    //window.location.href = \"/userForbidden\";\r\n                    //alert('err');\r\n                    //RedirectFromAction('userForbidden');\r\n                });\r\n        })\r\n    }\r\n\r\n    isdevEnv = () => {\r\n        let locationHref = window.location.href;\r\n        return (locationHref.indexOf('localhost:3000') > -1 ||\r\n                locationHref.indexOf('localhost:3001') > -1);\r\n    }\r\n\r\n    getSiteTitle = () => {\r\n        return configValues.site_title;\r\n    }\r\n\r\n    getSiteUrl = () => {\r\n        // if(this.isdevEnv()) return domain;\r\n        let locationHref = window.location.href;\r\n        if(locationHref.indexOf('localhost:3000') > -1) return `http://localhost:3000`\r\n        if(locationHref.indexOf('localhost:3001') > -1) return `http://localhost:3001`\r\n        return configValues.site_url;\r\n    }\r\n\r\n    getApiHomeUrl = () => {\r\n        let apiHomeUrl = this.getSiteUrl();\r\n        let locationHref = window.location.href;\r\n        if(locationHref.indexOf('localhost:3000') > -1) apiHomeUrl = `http://localhost:3001`;\r\n        if(locationHref.indexOf('localhost:3001') > -1) apiHomeUrl = `http://localhost:3001`;\r\n        return apiHomeUrl;\r\n    }\r\n\r\n    getAdminApiUrl = () => {\r\n        // let apiHomeUrl = this.getSiteUrl();\r\n        // let locationHref = window.location.href;\r\n        // if(locationHref.indexOf('localhost:3000') > -1) apiHomeUrl = `http://localhost:3001`;\r\n        // if(locationHref.indexOf('localhost:3001') > -1) apiHomeUrl = `http://localhost:3001`;\r\n        return this.getApiHomeUrl() + configValues.admin_api;\r\n    }\r\n\r\n    getCandidateApiUrl = () => {\r\n        // return this.getSiteUrl() + configValues.candidate_api;\r\n        return this.getApiHomeUrl() + configValues.candidate_api;\r\n    }\r\n\r\n    getValue = (key) => {\r\n        return configValues[key];\r\n    }\r\n\r\n    OrderedAlphabets = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\r\n\r\n    validHeaders = validHeaders;\r\n\r\n    Grades = ['Grade 1','Grade 2','Grade 3','Grade 4','Grade 5','Grade 6','Grade 7','Grade 8','Grade 9','Grade 10','Grade 11','Grade 12',];\r\n\r\n    TestVisibility = {\r\n        InvitedCandidates: 'InvitedCandidates',\r\n        Public: 'Public'\r\n    }\r\n\r\n    Roles = {\r\n        Candidate: 'candidate',\r\n        Teacher: 'teacher',\r\n        Student: 'student'\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport AuthHelper from './AuthHelper';\r\nimport RedirectFromAction from './actions/RedirectFromAction';\r\nlet History = null;\r\naxios.interceptors.response.use(response => {\r\n        return response;\r\n    }, error => {\r\n        if(!error.response) throw error;\r\n    if (error.response.status === 401) {\r\n        console.log('intercept 401', error.response);\r\n        // RedirectFromAction('unauthorizedUser');\r\n    }\r\n    else if (error.response.status === 403) {\r\n        console.log('intercept 403', error.response);\r\n        RedirectFromAction('userForbidden');\r\n    }\r\n    else if (error.response.status === 404) {\r\n        console.log('intercept 404', error.response);\r\n        RedirectFromAction('notFound');\r\n    }\r\n    throw error.response;\r\n });\r\n\r\nconst getData = (url) => {\r\n    // History = history;\r\n    let accessToken = AuthHelper.getToken(); //AuthHelper.getToken();\r\n    let options = {\r\n        headers: {\r\n          \"x-access-token\": accessToken\r\n        }\r\n    };\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, options)\r\n        .then((res) => {\r\n            console.log('res', res);\r\n            if(res.status === 401) {\r\n                console.log('in resolve not authorized error received');\r\n                return reject(res);\r\n            }\r\n            resolve(res);\r\n        })\r\n        .catch((err) => {\r\n            console.log('err', err);\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                AuthHelper.LogOut();\r\n                RedirectFromAction('login');\r\n            }\r\n            reject(err);\r\n        })\r\n    });\r\n    \r\n}\r\n\r\nconst saveData = (url, model) => {\r\n    // History = history;\r\n    let accessToken = AuthHelper.getToken();\r\n    let options = {\r\n        headers: {\r\n          \"x-access-token\": accessToken\r\n        }\r\n    };\r\n    return axios.post(url, model, options);\r\n}\r\n\r\nconst updateData = (url, model) => {\r\n    // History = history;\r\n    let accessToken = AuthHelper.getToken();\r\n    let options = {\r\n        headers: {\r\n          \"x-access-token\": accessToken\r\n        }\r\n    };\r\n    return axios.put(url, model, options);\r\n}\r\n\r\nconst deleteData = (url, model) => {\r\n    // History = history;\r\n    let accessToken = AuthHelper.getToken();\r\n    let options = {\r\n        headers: {\r\n          \"x-access-token\": accessToken\r\n        },\r\n        data: model\r\n    };\r\n    console.log('delete options', options);\r\n    return axios.delete(url, options);\r\n}\r\n\r\nexport default {\r\n    getData,\r\n    saveData,\r\n    updateData,\r\n    deleteData\r\n};","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const ADD_SKILL_BEGIN = 'ADD_SKILL_BEGIN';\r\nexport const ADD_SKILL_SUCCESS = 'ADD_SKILL_SUCCESS';\r\nexport const ADD_SKILL_FAIL = 'ADD_SKILL_FAIL';\r\nexport const SKILL_SEARCH_BEGIN = 'SKILL_SEARCH_BEGIN';\r\nexport const SKILL_SEARCH_SUCCESS = 'SKILL_SEARCH_SUCCESS';\r\nexport const CURRENT_SKILL_FIELD_CHANGE = 'CURRENT_SKILL_FIELD_CHANGE';\r\nexport const CURRENT_SKILL_FIELD_CHANGE_END = 'CURRENT_SKILL_FIELD_CHANGE_END';\r\nexport const FETCH_SKILLS_BEGIN = 'FETCH_SKILLS_BEGIN';\r\nexport const FETCH_SKILLS_SUCCESS = 'FETCH_SKILLS_SUCCESS';\r\nexport const FETCH_SKILLS_FAIL = 'FETCH_SKILLS_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const CurrentSkillFieldChange = (val, field, model) => dispatch => {\r\n    switch(field)\r\n    {\r\n        case 'skill':\r\n        {\r\n            model.skill_meta.skill = val;\r\n            dispatch({\r\n                type: CURRENT_SKILL_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_SKILL_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddSkill = (skillModel) => dispatch => {\r\n    dispatch({\r\n        type: ADD_SKILL_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'skill';\r\n    repository.saveData(url, skillModel)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: ADD_SKILL_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: ADD_SKILL_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n\r\n}\r\n\r\nexport const BeginSearch = () => dispatch => {\r\n    dispatch({\r\n        type: SKILL_SEARCH_BEGIN\r\n    });\r\n}\r\n\r\nexport const SearchSkill = (searchTerm, skillList) => dispatch => {\r\n    if(skillList && skillList.length > 0) {\r\n        let filteredSkills = skillList.filter((item) => {\r\n            return (\r\n                    item.skill &&\r\n                    item.skill.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\r\n                    );\r\n        });\r\n        if(filteredSkills && filteredSkills.length > 0) {\r\n            dispatch({\r\n                type: SKILL_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredSkills,\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: SKILL_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredSkills: [],\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: SKILL_SEARCH_SUCCESS,\r\n            payload: {\r\n                filteredSkills: [],\r\n                searchTerm\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const FetchSkills = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_SKILLS_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllSkills';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\nimport { FETCH_SKILLS_BEGIN, FETCH_SKILLS_FAIL, FETCH_SKILLS_SUCCESS } from './SkillActions';\r\nimport AuthHelper from '../AuthHelper';\r\n\r\nexport const ADD_USER_BEGIN = 'ADD_USER_BEGIN';\r\nexport const ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';\r\nexport const ADD_USER_FAIL = 'ADD_USER_FAIL';\r\nexport const USER_SEARCH_BEGIN = 'USER_SEARCH_BEGIN';\r\nexport const USER_SEARCH_SUCCESS = 'USER_SEARCH_SUCCESS';\r\nexport const UPDATE_USER_BEGIN = 'UPDATE_USER_BEGIN';\r\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS';\r\nexport const UPDATE_USER_FAIL = 'UPDATE_USER_FAIL';\r\nexport const SELECT_USER = 'SELECT_USER';\r\nexport const CURRENT_USER_FIELD_CHANGE = 'CURRENT_USER_FIELD_CHANGE';\r\nexport const CURRENT_USER_FIELD_CHANGE_END = 'CURRENT_USER_FIELD_CHANGE_END';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE = 'CURRENT_ANSWER_FIELD_CHANGE';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE_END = 'CURRENT_ANSWER_FIELD_CHANGE_END';\r\nexport const CHOICE_ADDED_TO_USER = 'CHOICE_ADDED_TO_USER';\r\nexport const FETCH_USER_BEGIN = 'FETCH_USER_BEGIN';\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\r\nexport const FETCH_USER_FAIL = 'FETCH_USER_FAIL';\r\nexport const SET_USER_INFO_LOCAL = 'SET_USER_INFO_LOCAL';\r\nexport const LOGOUT_CURRENT_USER = 'LOGOUT_CURRENT_USER';\r\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\r\nexport const DELETE_USER_FAIL = 'DELETE_USER_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\n\r\nvar history = {};\r\nexport const SetHistory = (propsHistory) => dispatch => {\r\n    history = propsHistory;\r\n}\r\n\r\nexport const CurrentUserFieldChange = (val, field, model) => dispatch => {\r\n    if(!model) {\r\n        model = {\r\n            user_meta: {\r\n                \r\n            }\r\n        }\r\n    }\r\n    switch(field)\r\n    {\r\n        case 'emailId':\r\n        {\r\n            model.user_meta.emailId = val;\r\n            dispatch({\r\n                type: CURRENT_USER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'name':\r\n        {\r\n            model.user_meta.name = val;\r\n            dispatch({\r\n                type: CURRENT_USER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'role':\r\n        {\r\n            model.user_meta.role = val;\r\n            dispatch({\r\n                type: CURRENT_USER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'orgId':\r\n        {\r\n            model.user_meta.orgId = val;\r\n            dispatch({\r\n                type: CURRENT_USER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_USER_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const DeleteUser = (userModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'user';\r\n        repository.deleteData(url, userModel)\r\n                .then((res) => {\r\n                    dispatch({\r\n                        type: DELETE_USER_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                })\r\n                .then((res) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((err) => {\r\n                    dispatch({\r\n                        type: DELETE_USER_FAIL,\r\n                        payload: err\r\n                    });\r\n                    reject(err);\r\n                });\r\n    })\r\n}\r\n\r\nexport const AddUser = (userModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let model ={\r\n            user_meta: userModel\r\n        };\r\n        let url = config.instance.getAdminApiUrl() + 'user';\r\n        repository.saveData(url, userModel)\r\n                .then((res) => {\r\n                    dispatch({\r\n                        type: ADD_USER_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                })\r\n                .then((res) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((err) => {\r\n                    dispatch({\r\n                        type: ADD_USER_FAIL,\r\n                        payload: err\r\n                    });\r\n                    reject(err);\r\n                });\r\n    })\r\n}\r\n\r\nexport const FetchUsers = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllUsers';\r\n    repository.getData(url, history)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_USER_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_USER_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\n\r\nexport const UpdateUser = (userModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'user';\r\n        repository.updateData(url, userModel, history)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: UPDATE_USER_SUCCESS\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: UPDATE_USER_SUCCESS,\r\n                    payload: { errorStatus: '401' }\r\n                });\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const SetUserInfo = (res) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        AuthHelper.Login(res);\r\n        let userInfo = AuthHelper.GetUserInfo();\r\n        dispatch({\r\n            type: SET_USER_INFO_LOCAL,\r\n            payload: userInfo\r\n        });\r\n        resolve(true);\r\n    })\r\n}\r\nexport const LogoutCurrentUser = () => dispatch => {\r\n    AuthHelper.LogOut();\r\n    dispatch({\r\n        type: LOGOUT_CURRENT_USER\r\n    });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","\r\nexport const getDateTime = (dateTime, withTime) => {\r\n    let finalStr = '';\r\n    if (dateTime) {\r\n        let dt = new Date(dateTime);\r\n        let mm = getTwoDigitTime(dt.getMonth() + 1),\r\n            dd = getTwoDigitTime(dt.getDate());\r\n        // finalStr = `${dt.getFullYear()}-${dt.getMonth() + 1}-${dt.getDate()}`;\r\n        finalStr = `${dt.getFullYear()}-${mm}-${dd}`;\r\n        if (withTime) {\r\n            // finalStr += ` ${dt.getHours()}:${dt.getMinutes()}`;\r\n            let h = (dt.getHours() < 10 ? '0' : '') + dt.getHours(),\r\n                m = (dt.getMinutes() < 10 ? '0' : '') + dt.getMinutes();\r\n            finalStr += ` ${h}:${m}`;\r\n        }\r\n    }\r\n    return finalStr;\r\n}\r\n\r\nexport const getTwoDigitTime = (seconds) => {\r\n    let str = (seconds < 10 ? '0' : '') + seconds;\r\n    return str;\r\n}\r\n\r\nexport const getNextAvailableTimeSlots = () => {\r\n    let dailyTimeSlots = [ 8, 13, 21 ];\r\n    let nowAvailableTimeSlots = [];\r\n    let now = new Date();\r\n    let today = `${now.getFullYear()}-${now.getMonth()+1}-${now.getDate()}`;\r\n    let nextDay = `${now.getFullYear()}-${now.getMonth()+1}-${now.getDate()+1}`;\r\n    let currentHour = now.getHours();\r\n    if(currentHour > dailyTimeSlots[2]) {\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[0]}:00`);\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[1]}:00`);\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[2]}:00`);\r\n        return nowAvailableTimeSlots;\r\n    }\r\n    if(currentHour > dailyTimeSlots[1]) {\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[2]}:00`);\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[0]}:00`);\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[1]}:00`);\r\n        return nowAvailableTimeSlots;\r\n    }\r\n    if(currentHour > dailyTimeSlots[0]) {\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[1]}:00`);\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[2]}:00`);\r\n        nowAvailableTimeSlots.push(`${nextDay} ${dailyTimeSlots[0]}:00`);\r\n        return nowAvailableTimeSlots;\r\n    }\r\n    if(currentHour < dailyTimeSlots[0]) {\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[0]}:00`);\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[1]}:00`);\r\n        nowAvailableTimeSlots.push(`${today} ${dailyTimeSlots[2]}:00`);\r\n        return nowAvailableTimeSlots;\r\n    }\r\n}\r\n\r\nexport const formatToDecimals = (score, places) => {\r\n    if (score && !isNaN(score)) return score.toFixed(places);\r\n    return 'NA';\r\n}\r\n\r\nexport const sortAscending = (array, key) => {\r\n    return array.sort((a, b) => {\r\n        var x = a[key]; var y = b[key];\r\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    });\r\n}\r\n\r\nexport const sortDescending = (array, key) => {\r\n    return array.sort((a, b) => {\r\n        var x = a[key]; var y = b[key];\r\n        return ((x > y) ? -1 : ((x < y) ? 1 : 0));\r\n    });\r\n}\r\n\r\nexport const wait = (delayInMS) => {\r\n    return new Promise(resolve => setTimeout(resolve, delayInMS));\r\n}","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { getTwoDigitTime } from '../../Utils';\r\n\r\nclass TickComponent extends React.Component {\r\n    secondsInterval = 0;\r\n    minutesInterval = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            submitAndCompleteTest: props.onTimeElapse,\r\n            currentTick: {\r\n                minutes: (props && props.minutes) ? getTwoDigitTime(props.minutes-1) : 89,\r\n                seconds: 59\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.secondsInterval = setInterval(\r\n            () => {\r\n                let { seconds } = this.state.currentTick;\r\n                //console.log('seconds', seconds);\r\n                this.setState({\r\n                    currentTick: {\r\n                        ...this.state.currentTick,\r\n                        seconds: getTwoDigitTime(parseInt(seconds) - 1)\r\n                    }\r\n                })\r\n            },\r\n            1000\r\n        );\r\n        this.minutesInterval = setInterval(\r\n            () => {\r\n                let { minutes } = this.state.currentTick;\r\n                //console.log('minutes', minutes);\r\n                if(minutes === \"00\") {\r\n                    //console.log('test time elapsed');\r\n                    this.state.submitAndCompleteTest();\r\n                    clearInterval(this.secondsInterval);\r\n                    clearInterval(this.minutesInterval);\r\n                    return;\r\n                }\r\n                this.setState({\r\n                    currentTick: {\r\n                        ...this.state.currentTick,\r\n                        minutes: getTwoDigitTime(parseInt(minutes) - 1),\r\n                        seconds: 59\r\n                    }\r\n                })\r\n            },\r\n            60000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n        clearInterval(this.secondsInterval);\r\n        clearInterval(this.minutesInterval);\r\n    }\r\n\r\n    render = () => {\r\n        let { currentTick } = this.state;\r\n        return (\r\n            <div>\r\n                <span className=\"text-primary\"> Time Remaining: </span><span className=\"font-weight-bold text-dark\"> {currentTick.minutes}:{currentTick.seconds}</span><span className=\"text-primary\"> minutes</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TickComponent;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport classNames from 'classnames';\r\nimport { Button, Menu, MenuItem } from '@material-ui/core';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport config from '../../config';\r\nimport TickComponent from '../lib/TickComponent';\r\n\r\nconst Header = (props) => {\r\n    const { classes, openState, isTokenExpired } = props;\r\n    const logout = () => {\r\n        props.onLogout();\r\n    }\r\n    let userInfo = AuthHelper.GetUserInfo();\r\n    const [auth, setAuth] = React.useState(true);\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    \r\n      const handleClose = () => {\r\n        setAnchorEl(null);\r\n      };\r\n      \r\n    return (\r\n        <div>\r\n        <AppBar\r\n            position=\"fixed\"\r\n            className={classNames(classes.appBar, {\r\n            [classes.appBarShift]: openState,\r\n            })}\r\n        >\r\n            <Toolbar disableGutters={!openState}>\r\n                {\r\n                    props.isDrawerRequired &&\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        edge=\"start\"\r\n                        aria-label=\"Open drawer\"\r\n                        onClick={() => props.onDrawerOpen()}\r\n                        className={classNames(classes.menuButton, {\r\n                        [classes.hide]: openState,\r\n                        })}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                }\r\n            <Typography  style={styles.paddingLeft} variant=\"h6\" color=\"inherit\" noWrap>\r\n                    <a href={config.instance.getValue('site_url')} style={{color: '#fff'}}>\r\n                        {config.instance.getValue('site_title')}\r\n                    </a>\r\n            </Typography>\r\n            {userInfo && props.isLogoutButtonRequired &&\r\n            <Typography variant=\"subtitle1\" color=\"inherit\" noWrap style={styles.welcomeMessage}>\r\n                {userInfo.name}\r\n            </Typography>\r\n            }\r\n            {\r\n                AuthHelper.isLoggedIn() && props.isLogoutButtonRequired && \r\n                <div style={styles.menuButton}>\r\n                <IconButton \r\n                    onClick={handleMenu}\r\n                    edge=\"end\"\r\n                    aria-label=\"Account of current user\"\r\n                    aria-haspopup=\"true\"\r\n                    color=\"inherit\"\r\n                    >\r\n                    <AccountCircle />\r\n                </IconButton>\r\n                <Menu\r\n                    id=\"menu-appbar\"\r\n                    anchorEl={anchorEl}\r\n                    anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                    }}\r\n                    keepMounted\r\n                    transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                    }}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    >\r\n                    <MenuItem >Role: {userInfo && userInfo.role}</MenuItem>\r\n                    <MenuItem onClick={logout} >Logout</MenuItem>\r\n                </Menu>\r\n                </div>\r\n            }\r\n            {/* {\r\n                props.isTickerRequired &&\r\n                <IconButton style={styles.paddingLeft}>\r\n                    <TickComponent />\r\n                </IconButton>\r\n            } */}\r\n            \r\n            </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;\r\nconst styles = {\r\n    menuButton: {\r\n        right: '4px'\r\n    },\r\n    welcomeMessage: {\r\n        marginLeft: '40%'\r\n    },\r\n    paddingLeft: {\r\n        paddingLeft: '1%'\r\n    }\r\n}","import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport classNames from 'classnames';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Dashboard, Book, Assessment, ViewQuilt, PermIdentity, Polymer, Airplay,\r\n    SupervisorAccount, Work  } from '@material-ui/icons';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport { Link } from 'react-router-dom'\r\nimport AuthHelper from '../../AuthHelper';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nconst MenuItems = [\r\n    { routeName: 'dashboard', routeCaption: 'Dashboard', icon: Dashboard, app: 'TeachAssesment' },\r\n    { routeName: 'mcqs', routeCaption: 'Library', icon: Book, app: 'TeachAssesment' },\r\n    { routeName: 'tests', routeCaption: 'Tests', icon: Assessment, app: 'TeachAssesment' },\r\n    { routeName: 'invitations', routeCaption: 'Invitations', icon: SupervisorAccount, app: 'TeachAssesment' },\r\n    { routeName: 'categories', routeCaption: 'Categories', icon: ViewQuilt, app: 'TeachAssesment' },\r\n    { routeName: 'skills', routeCaption: 'Skills', icon: Polymer, app: 'TeachAssesment' },\r\n    { routeName: 'grades', routeCaption: 'Grades', icon: Polymer, app: 'TeachAssesment' },\r\n    { routeName: 'orgs', routeCaption: 'Organizations', icon: Work, app: 'TeachAssesment' },\r\n    { routeName: 'users', routeCaption: 'Users', icon: PermIdentity, app: 'TeachAssesment' },\r\n\r\n    /* HiTech Routes */\r\n    // { routeName: 'rmaRequests', routeCaption: 'RMA', icon: Book, app: 'Hitech' },\r\n];\r\n\r\nconst getIcon = (menuItem) => {\r\n    /*if(menuItem.routeName === 'skills') {\r\n        return (\r\n            <Avatar>S</Avatar>\r\n        )\r\n    }*/\r\n    let icon = menuItem.icon;\r\n    return (\r\n        React.createElement(icon)\r\n    )\r\n}\r\n\r\nconst SideDrawer = (props) => {\r\n    const { classes, openState, theme } = props;\r\n    return (\r\n            <Drawer\r\n            variant=\"permanent\"\r\n            className={classNames(classes.drawer, {\r\n            [classes.drawerOpen]: openState,\r\n            [classes.drawerClose]: !openState,\r\n            })}\r\n            classes={{\r\n            paper: classNames({\r\n                [classes.drawerOpen]: openState,\r\n                [classes.drawerClose]: !openState,\r\n            }),\r\n            }}\r\n            open={openState}\r\n            >\r\n            <div className={classes.toolbar}>\r\n            <IconButton onClick={() => props.onDrawerClose()}>\r\n                {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n            {MenuItems.map((menuItem, index) => (\r\n                <div key={index}>\r\n                    {AuthHelper.isLoggedIn() && menuItem.routeName !== 'login' &&\r\n                    <Link to={\"/\" + menuItem.routeName} key={index}>\r\n                        <ListItem button key={menuItem.routeCaption}>\r\n                            {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\r\n                            <ListItemIcon title={menuItem.routeCaption}>{getIcon(menuItem)}</ListItemIcon>\r\n                            <ListItemText style={{textDecoration: 'none'}} primary={menuItem.routeCaption} />\r\n                        </ListItem>\r\n                    </Link>\r\n                    }\r\n                    {!AuthHelper.isLoggedIn() && menuItem.routeName === 'login' &&\r\n                    <Link to={\"/\" + menuItem.routeName} key={index}>\r\n                        <ListItem button key={menuItem.routeCaption}>\r\n                            <ListItemIcon title={menuItem.routeCaption}>{getIcon(menuItem)}</ListItemIcon>\r\n                            <ListItemText style={{textDecoration: 'none'}} primary={menuItem.routeCaption} />\r\n                        </ListItem>\r\n                    </Link>\r\n                    }\r\n                    {menuItem.app === 'Hitech' &&\r\n                    <Link to={\"/\" + menuItem.routeName} key={index}>\r\n                        <ListItem button key={menuItem.routeCaption}>\r\n                            <ListItemIcon title={menuItem.routeCaption}>{getIcon(menuItem)}</ListItemIcon>\r\n                            <ListItemText style={{textDecoration: 'none'}} primary={menuItem.routeCaption} />\r\n                        </ListItem>\r\n                    </Link>}\r\n            </div>\r\n            ))}\r\n            </List>\r\n            </Drawer>\r\n                );\r\n}\r\nexport default SideDrawer;","import React from 'react';\r\nimport { List, ListItem, ListItemText, ListItemIcon  } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nconst Faq = (props) => {\r\n    let instructions = [\r\n        \"This test has multiple choice questions\",\r\n        \"Each question has one or more correct answers\",\r\n        \"Please ensure you complete the test once you click on Start Test button\",\r\n        \"To start the test, click on Start Test button\",\r\n        \"Once you click on Start Test, remaining time will be displayed on top of screen\",\r\n        \"To submit your all responses to questions, click on Submit button on top right\",\r\n        \"Unless you click on Submit, your answers will not be submitted for evaluation, so just ensure you click on Submit before time elapses\"\r\n    ];\r\n    return (\r\n        <List>\r\n            {instructions.map((instruction, index) => {\r\n                return (\r\n                <ListItem key={index}>\r\n                    <ListItemIcon>\r\n                        <SendIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={instruction} />\r\n                </ListItem>\r\n                )  \r\n            })}\r\n        </List>\r\n    )\r\n}\r\nexport default Faq;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { getTwoDigitTime, wait } from '../../Utils';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n// import Webcam from 'react-webcam';\r\n\r\nclass RecordingComponent extends React.Component {\r\n    secondsInterval = 0;\r\n    minutesInterval = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // submitAndCompleteTest: props.onTimeElapse,\r\n            // currentTick: {\r\n            //     minutes: (props && props.minutes) ? getTwoDigitTime(props.minutes-1) : 89,\r\n            //     seconds: 59\r\n            // }\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.onStartRecording(5000, this.props.responseId);\r\n        setInterval(() => this.onStartRecording(6000, this.props.responseId), 7000);\r\n        // this.onStartCapturingScreenshots(5000);\r\n    }\r\n\r\n    onStartCapturingScreenshots = (interval) => {\r\n        setTimeout(() => this.takeScreenShot(this.props.responseId), interval);\r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n    }\r\n\r\n    onStartRecording = (lengthInMS, responseId) => {\r\n        if(!navigator.mediaDevices) {\r\n            console.log('media disabled');\r\n            return;            \r\n        }\r\n        navigator.mediaDevices.getUserMedia({\r\n            video: true,\r\n            audio: false\r\n        })\r\n            .then(stream => {\r\n                console.log('started recording');\r\n                this.props.setDeviceAccess('granted');\r\n                let options = { mimeType: \"video/webm; codecs=vp9\" };\r\n                let recorder = new MediaRecorder(stream, options);\r\n                let data = [];\r\n\r\n                recorder.ondataavailable = event => data.push(event.data);\r\n                recorder.start();\r\n                console.log(recorder.state + \" for \" + (lengthInMS / 1000) + \" seconds...\");\r\n\r\n                let stopped = new Promise((resolve, reject) => {\r\n                    recorder.onstop = resolve;\r\n                    recorder.onerror = event => reject(event.name);\r\n                });\r\n\r\n                let recorded = wait(lengthInMS).then(\r\n                    () => recorder.state == \"recording\" && recorder.stop()\r\n                );\r\n\r\n                return Promise.all([\r\n                    stopped,\r\n                    recorded\r\n                ])\r\n                    .then(() => data);\r\n\r\n            })\r\n            .catch((ex) => {\r\n                console.log('exception in getting media stream', ex);\r\n                this.props.setDeviceAccess('denied');\r\n            })\r\n            .then(async recordedChunks => {\r\n                if (recordedChunks && recordedChunks.length) {\r\n                    let recordedBlob = new Blob(recordedChunks, { type: \"video/webm\" });\r\n                    //let recordingSrc = URL.createObjectURL(recordedBlob);\r\n                    // recording.src = URL.createObjectURL(recordedBlob);\r\n                    // downloadButton.href = recording.src;\r\n                    // downloadButton.download = \"RecordedVideo.webm\";\r\n\r\n                    console.log(\"Successfully recorded \" + recordedBlob.size + \" bytes of \" +\r\n                        recordedBlob.type);\r\n\r\n                    const requestConfig = {\r\n                        headers: {\r\n                            'Content-Type': 'multipart/form-data;'\r\n                        }\r\n                    };\r\n\r\n                    try {\r\n                        this.postToServer(recordedBlob, this.props.responseId);\r\n                        /*\r\n                        let formData = new FormData();\r\n                        let url = config.instance.getCandidateApiUrl() + 'submitRecording';\r\n                        //let url = 'http://localhost:3001/api/candidate/submitRecording';\r\n                        let now = new Date();\r\n\r\n                        let fileName = `${responseId}_${now.getDate()}_${now.getHours()}_${now.getMinutes()}_${now.getSeconds()}`;\r\n                        console.log('fileName', fileName);\r\n                        formData.append(responseId, recordedBlob, fileName);\r\n                        //formData.append('video', recordedBlob, fileName);\r\n                        formData.append('responseId', responseId);\r\n\r\n\r\n                        const res = await axios.post(url, formData, requestConfig);\r\n                        */\r\n                        console.log(`submitRecording complete`);\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                    }\r\n                }\r\n                else {\r\n                    alert('Your exam may not be recorded without webcam. Please check with test taker.');\r\n                }\r\n            });\r\n    }\r\n\r\n    onStop = (stream) => {\r\n        //stream.getTracks().forEach(track => track.stop());\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n    takeScreenShot = async () => {\r\n        //const canIRun = navigator.mediaDevices.getDisplayMedia\r\n        //if(!canIRun) return;\r\n\r\n        const stream = navigator.mediaDevices.getDisplayMedia({\r\n            video: { mediaSource: 'screen' },\r\n        })\r\n        // get correct video track\r\n        const track = stream.getVideoTracks()[0]\r\n        // init Image Capture and not Video stream\r\n        const imageCapture = new ImageCapture(track)\r\n        // take first frame only\r\n        const bitmap = await imageCapture.grabFrame()\r\n        // destory video track to prevent more recording / mem leak\r\n        track.stop()\r\n\r\n        const canvas = document.getElementById('fake')\r\n        // this could be a document.createElement('canvas') if you want\r\n        // draw weird image type to canvas so we can get a useful image\r\n        canvas.width = bitmap.width\r\n        canvas.height = bitmap.height\r\n        const context = canvas.getContext('2d')\r\n        context.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height)\r\n        const image = canvas.toDataURL()\r\n\r\n        // this turns the base 64 string to a [File] object\r\n        const res = await fetch(image)\r\n        const buff = await res.arrayBuffer()\r\n        // clone so we can rename, and put into array for easy proccessing\r\n        const file = [\r\n            new File([buff], `photo_${new Date()}.jpg`, {\r\n                type: 'image/jpeg',\r\n            }),\r\n        ]\r\n        // return file\r\n\r\n        this.postToServer(file, this.props.responseId);\r\n    }\r\n\r\n    // const button = document.getElementById('cake').onclick = () => canIRun ? takeScreenShot() : {}\r\n\r\n    postToServer = async (blob, responseId) => {\r\n        try {\r\n            \r\n            const requestConfig = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data;'\r\n                }\r\n            };\r\n            let formData = new FormData();\r\n            let url = config.instance.getCandidateApiUrl() + 'submitRecording';\r\n            //let url = 'http://localhost:3001/api/candidate/submitRecording';\r\n            let now = new Date();\r\n\r\n            let fileName = `${responseId}_${now.getDate()}_${now.getHours()}_${now.getMinutes()}_${now.getSeconds()}`;\r\n            console.log('fileName', fileName);\r\n            formData.append(responseId, blob, fileName);\r\n            //formData.append('video', recordedBlob, fileName);\r\n            formData.append('responseId', responseId);\r\n\r\n\r\n            const res = await axios.post(url, formData, requestConfig);\r\n\r\n            console.log(`submitRecording complete: ${res}`);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n            <canvas id=\"fake\"></canvas>\r\n                {false && <div className=\"card bg-default\">\r\n                    <button className=\"btn btn-primary\"\r\n                        onClick={() => this.onStartRecording(15000)}>\r\n                        Start\r\n                </button>\r\n                    <br />\r\n                    <video id=\"preview\" width=\"160\" height=\"120\" controls>\r\n                        <source src=\"http://localhost:3001/api/candidate/getRecording\"\r\n                            type=\"video/webm\" />\r\n                    </video>\r\n                    <button className=\"btn btn-primary\"\r\n                        onClick={() => this.onStop()}>\r\n                        Stop\r\n                </button>\r\n                </div>}\r\n            </>\r\n        );\r\n    }\r\n}\r\n/*\r\nconst SnapComponent = (props) => {\r\n    const webcamRef = React.useRef(null);\r\n    const [imgSrc, setImgSrc] = React.useState(null);\r\n\r\n    const capture = React.useCallback(() => {\r\n        const imageSrc = webcamRef.current.getScreenshot();\r\n        setImgSrc(imageSrc);\r\n    }, [webcamRef, setImgSrc]);\r\n\r\n    return (\r\n        <>\r\n            <Webcam\r\n                audio={false}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n            />\r\n            <button onClick={capture}>Capture photo</button>\r\n            {imgSrc && (\r\n                <img\r\n                    src={imgSrc}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n\r\n}\r\nconst RecordingComponent = () => {\r\n    const webcamRef = React.useRef(null);\r\n    const recordedVideoRef = React.useRef(null);\r\n    const mediaRecorderRef = React.useRef(null);\r\n    const [capturing, setCapturing] = React.useState(false);\r\n    const [recordedChunks, setRecordedChunks] = React.useState([]);\r\n    const [recordeVideUrl, setrecordeVideUrl] = React.useState('');\r\n\r\n    const handleStartCaptureClick = React.useCallback(() => {\r\n        setCapturing(true);\r\n        mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\r\n            mimeType: \"video/webm\"\r\n        });\r\n        mediaRecorderRef.current.addEventListener(\r\n            \"dataavailable\",\r\n            handleDataAvailable\r\n        );\r\n        mediaRecorderRef.current.start();\r\n    }, [webcamRef, setCapturing, mediaRecorderRef]);\r\n\r\n    const handleDataAvailable = React.useCallback(\r\n        ({ data }) => {\r\n            if (data.size > 0) {\r\n                setRecordedChunks((prev) => prev.concat(data));\r\n            }\r\n        },\r\n        [setRecordedChunks]\r\n    );\r\n\r\n    const handleStopCaptureClick = React.useCallback(() => {\r\n        mediaRecorderRef.current.stop();\r\n        setCapturing(false);\r\n    }, [mediaRecorderRef, webcamRef, setCapturing]);\r\n\r\n    const handleDownload = React.useCallback(() => {\r\n        if (recordedChunks.length) {\r\n            const blob = new Blob(recordedChunks, {\r\n                type: \"video/webm\"\r\n            });\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement(\"a\");\r\n            document.body.appendChild(a);\r\n            a.style = \"display: none\";\r\n            a.href = url;\r\n            a.download = \"react-webcam-stream-capture.webm\";\r\n            // recordedVideoRef.src = url;\r\n            setrecordeVideUrl(url);\r\n            // a.click();\r\n            // window.URL.revokeObjectURL(url);\r\n            setRecordedChunks([]);\r\n        }\r\n    }, [recordedChunks]);\r\n\r\n    const submitRecordingChunk = async () => {\r\n        if (recordedChunks.length) {\r\n            const recordedBlob = new Blob(recordedChunks, {\r\n                type: \"video/webm\"\r\n            });\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data;'\r\n                }\r\n            };\r\n\r\n            try {\r\n                let formData = new FormData();\r\n                // let url = config.instance.getCandidateApiUrl() + 'submitRecording';\r\n                let url = 'http://localhost:3001/api/candidate/submitRecording';\r\n                formData.append('video', recordedBlob);\r\n\r\n\r\n                const res = await axios.post(url, formData, config);\r\n\r\n                console.log(`submitRecording complete: ${res}`);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    const stopWebcam = () => {\r\n        navigator.getUserMedia({audio: true, video: true},\r\n            function(stream) {\r\n                 // can also use getAudioTracks() or getVideoTracks()\r\n                // var track = stream.getTracks()[0];  // if only one media track\r\n                // ...\r\n                // track.stop();\r\n                console.log('stopping webcam');\r\n                stream.getTracks().forEach(function(track) {\r\n                    console.log('stopping track');\r\n                    track.stop();\r\n                });\r\n            },\r\n            function(error){\r\n                console.log('getUserMedia() error', error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Webcam audio={false} ref={webcamRef} />\r\n            {capturing ? (\r\n                <button onClick={handleStopCaptureClick}>Stop Capture</button>\r\n            ) : (\r\n                    <button onClick={handleStartCaptureClick}>Start Capture</button>\r\n                )}\r\n            {recordedChunks.length > 0 && (\r\n                <button onClick={submitRecordingChunk}>Submit Recording</button>\r\n            )}\r\n                <button onClick={stopWebcam}>Stop Webcam</button>\r\n        </>\r\n    );\r\n};\r\n*/\r\nexport {\r\n    // SnapComponent,\r\n    RecordingComponent\r\n};\r\n","import React from 'react';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { RecordingComponent } from '../lib/RecordingComponent';\r\nimport config from '../../config';\r\n\r\nconst WelcomeCandidate = (props) => {\r\n      return (\r\n        <Grid container style={styles.container}>\r\n            <Typography variant=\"h2\" gutterBottom={true} \r\n                align=\"center\"    color=\"primary\">Welcome to Tech Assessment</Typography>\r\n                <Divider />\r\n                {/* <RecordingComponent /> */}\r\n        </Grid>\r\n    );\r\n}\r\nexport default WelcomeCandidate;\r\nconst styles = {\r\n    container: {\r\n        paddingTop: '10%'\r\n    },\r\n    textCenter: {\r\n        fontSize: '28px',\r\n        paddingLeft: '25%',\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { SetUserInfo } from '../../actions/UserActions';\r\n\r\nimport Faq from '../../components/Simulator/Faq';\r\nimport WelcomeCandidate from '../../components/Simulator/WelcomeCandidate';\r\n\r\n// const useStyles = makeStyles(theme => ({\r\nconst classes = {\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: 2,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n};\r\n\r\nclass SimulatorShell extends Component {\r\n\r\n    localHandler = (invitationId) => {\r\n        let url = config.instance.getCandidateApiUrl() + 'auth/local';\r\n        let data = {\r\n            invitationId: invitationId\r\n        }\r\n        axios.post(url, data).then((res) => {\r\n            const token = res.headers['x-auth-token'];\r\n            if (token) {\r\n                this.props.SetUserInfo(res)\r\n                    .then((result) => {\r\n                        this.props.history.push('/startTest/' + invitationId);\r\n                    })\r\n            } else {\r\n                this.setState({\r\n                    errorMessage: 'Candidate not registered. Please try again after some time. If this continues, please check with your recruiter.'\r\n                });\r\n            }\r\n        }).catch((err) => {\r\n            if (this.props.history) {\r\n                this.props.history.push({\r\n                    pathname: '/userForbidden'\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        let { inviteid } = this.props.match.params;\r\n\r\n        if (inviteid) {\r\n            return (\r\n                <div>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={12} sm={12} md={6}>\r\n                            <WelcomeCandidate />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12} md={6}>\r\n                            <Faq />\r\n                            <Button type=\"button\" variant=\"contained\"\r\n                                color=\"primary\" size=\"large\" onClick={() => this.localHandler(inviteid)}>Start Test</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    Page you are trying to open could not be found. Please check with your recruiter.\r\n          </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatorShell);","import React, { Component } from 'react';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport { SetUserInfo } from '../../actions/UserActions';\r\nimport { connect } from 'react-redux';\r\nimport { CardContent, FormControl, TextField, CardActions, Button, CardHeader } from '@material-ui/core';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass LocalLoginComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailId: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            logInButtonText: 'LOG IN'\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        config.instance.initialize();\r\n    }\r\n\r\n    localHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'auth/local';\r\n        //url = 'http://localhost:3001/api/local';\r\n        let data = {\r\n            emailId: this.state.emailId,\r\n            password: this.state.password\r\n        }\r\n        this.setState({\r\n            logInButtonText: 'Working...'\r\n        })\r\n        axios.post(url, data).then((res) => {\r\n            const token = res.headers['x-auth-token'];\r\n            if (token) {\r\n                this.props.SetUserInfo(res).then((res) => {\r\n                    this.props.history.push({\r\n                        pathname: '/dashboard'\r\n                    });\r\n                })\r\n            } else {\r\n                this.setState({\r\n                        errorMessage: 'Wrong Credentials. Please try again.',\r\n                        logInButtonText: 'LOG IN'\r\n                    });\r\n            }\r\n        }).catch((err) => {\r\n            this.setState({\r\n                errorMessage: 'Invalid Credentials. Please check entered email and enter correct password.',\r\n                logInButtonText: 'LOG IN'\r\n            });\r\n        });\r\n    }\r\n\r\n    onEmailIdChange = (value) => {\r\n        this.setState({\r\n            emailId: value\r\n        });\r\n    }\r\n\r\n    onPasswordChange = (value) => {\r\n        this.setState({\r\n            password: value\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        let userInfo = AuthHelper.GetUserInfo();\r\n        let { errorMessage, logInButtonText } = this.state;\r\n        console.log('userinfo in login', userInfo);\r\n        return (\r\n            <div className=\"container h-100\">\r\n                <div className=\"row h-100 justify-content-center align-items-center\">\r\n                    {userInfo === null &&\r\n                        <form noValidate autoComplete=\"off\" onSubmit={(e) => this.localHandler(e)}>\r\n                           <CardContent>\r\n                            <div className=\"row\">\r\n                                <h2 className=\"col-md-12 text-center\">Login</h2>\r\n                            </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Email Id\"\r\n                                            value={this.state.emailId}\r\n                                            onChange={(e) => this.onEmailIdChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            className=\"text-lg\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Password\"\r\n                                            type=\"password\"\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => this.onPasswordChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\" />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row mt-4\">\r\n                                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                                {logInButtonText}\r\n                                    </button>\r\n                                    </div>\r\n                            </CardContent>\r\n                        </form>\r\n                    }\r\n                </div>\r\n                <p className=\"col-md-12 text-center text-danger\">{errorMessage}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalLoginComponent);\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst LoadingComponent = (props) => {\r\n    return (\r\n        <div className=\"\" style={styles.center}>\r\n            <CircularProgress color=\"secondary\" />\r\n        </div>\r\n    );\r\n}\r\nconst styles = {\r\n    center: {\r\n        position: 'fixed',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n}\r\nexport default LoadingComponent;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Loading from '../lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\nconst AddCategoryComponent = (props) => {\r\n    let { model } = props;\r\n    let display = (props && props.editMode) ? 'block' : 'none';\r\n    return (\r\n        <Card style={{padding: \"4%\"}}>\r\n        {!model && <Loading />} \r\n        {model &&    \r\n            <form  noValidate autoComplete=\"off\">\r\n                <CardHeader \r\n                avatar={\r\n                    <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                        {!props.editMode && <AddIcon />}\r\n                        {props.editMode && <EditIcon />}\r\n                    </Avatar>\r\n                    }\r\n                    action={\r\n                        <Button style={{display: display}} onClick={() => props.onAdd()}>Add New</Button>\r\n                    }\r\n                    title={props.editMode ? \r\n                            \"Edit Category\" :\r\n                            \"Add Category\"} \r\n                            >\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Title\"\r\n                            value={model.category_meta ? model.category_meta.title : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'title', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Description\"\r\n                            multiline\r\n                            rows=\"4\"\r\n                            value={model.category_meta ? model.category_meta.description : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'description', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <br></br>\r\n                </CardContent>\r\n                <CardActions style={styles.actionButton}>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\" \r\n                                onClick={ () => props.onSubmit(props.model) }>\r\n                        {props.editMode ? 'Update' : 'Submit'}\r\n                    </Button>\r\n                </CardActions>\r\n            </form>}\r\n        </Card>\r\n    );\r\n}\r\nexport default AddCategoryComponent;\r\nconst styles={\r\n    formControl: {\r\n        width: '90%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst years = [\r\n    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\r\n];\r\nconst months = [\r\n    0,1,2,3,4,5,6,7,8,9,10,11\r\n];\r\n\r\nclass SelectCandidateExperience extends Component{\r\n\r\n    // state = {\r\n    //     open: false,\r\n    //     min: '',\r\n    // };\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        open: false,\r\n        years: 0,\r\n        months: 0\r\n      };\r\n    }\r\n\r\n      handleChange = name => event => {\r\n        switch(name)\r\n        {\r\n          case 'years':\r\n          {\r\n            this.setState({\r\n              years: event.target.value\r\n            });\r\n            break;\r\n          }\r\n          case 'months':\r\n          {\r\n            this.setState({\r\n              months: event.target.value\r\n            });\r\n            break;\r\n          }\r\n          default:{}\r\n        }\r\n    };\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      this.handleClose();\r\n      this.props.onSubmitExperience(this.state.years, this.state.months);\r\n    }\r\n\r\n    render = () => {\r\n      let { isTestAdmin } = this.props; \r\n    return (\r\n        <div>\r\n        <Button variant=\"outlined\" onClick={this.handleClickOpen}>Experience: {this.state.years} - {this.state.months}</Button>\r\n        <Dialog\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n        >\r\n          <DialogTitle>Select Experience Level</DialogTitle>\r\n          <DialogContent>\r\n            <form >\r\n                <br></br>\r\n                <br></br>\r\n              <FormControl style={styles.formControl} variant=\"outlined\" >\r\n                <InputLabel htmlFor=\"years-simple\">Years</InputLabel>\r\n                <Select\r\n                  value={this.state.years}\r\n                  onChange={this.handleChange('years')}\r\n                  input={<Input id=\"years-simple\" />}\r\n                >\r\n                {years.map((item, index) => {\r\n                  return <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                })}\r\n                </Select>\r\n              </FormControl>\r\n              {!isTestAdmin && <FormControl style={styles.formControl} variant=\"outlined\" >\r\n                <InputLabel htmlFor=\"months-simple\">Months</InputLabel>\r\n                <Select\r\n                  value={this.state.months}\r\n                  onChange={this.handleChange('months')}\r\n                  input={<Input id=\"months-simple\" />}\r\n                >\r\n                {months.map((item, index) => {\r\n                  return <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                })}\r\n                </Select>\r\n              </FormControl> }\r\n            </form>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={this.handleSubmit} color=\"primary\">\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n    }\r\n}\r\nconst styles = {\r\n    \r\n      formControl: {\r\n        width:\"45%\", \r\n        marginLeft:\"5%\"\r\n      }\r\n    \r\n};\r\nexport default SelectCandidateExperience;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport SelectCandidateExperience from './SelectCandidateExperience';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\n\r\nconst AddCandidate = (props) => {\r\n        let { model } = props;\r\n\r\n        const onSubmitExperience = (years, months) => {\r\n            props.onFieldChange(years, 'experienceYears', props.model)\r\n            props.onFieldChange(months, 'experienceMonths', props.model)\r\n        }\r\n\r\n        return (\r\n            <Card>\r\n            {!model && <LoadingComponent /> } \r\n            {model &&    \r\n                <form  noValidate autoComplete=\"off\">\r\n                    <CardHeader avatar={\r\n                        <Avatar aria-label=\"Recipe\">\r\n                        +\r\n                        </Avatar>\r\n                    }\r\n                    title=\"Add Candidate\">\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                    <FormControl variant=\"outlined\" style={{width:\"80%\"}}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Full Name\"\r\n                            className={styles.dense}\r\n                            value={model.fullName}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'fullName', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={{width:\"80%\"}}>\r\n                        <TextField\r\n                            id=\"outlined-email\"\r\n                            label=\"Email\"\r\n                            className={styles.dense}\r\n                            value={model.email}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'email', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={{width:\"80%\"}}>\r\n                        <TextField\r\n                            id=\"outlined-contactno\"\r\n                            label=\"Contact Number\"\r\n                            className={styles.dense}\r\n                            value={model.contactno}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'contactno', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={{width:\"80%\"}}>\r\n                        <SelectCandidateExperience onSubmitExperience={ (years, months) => onSubmitExperience(years, months) } />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                    onClick={ () => props.onSubmit(props.model)}>\r\n                        Submit\r\n                    </Button>\r\n                    </CardActions>\r\n                </form>\r\n            }\r\n            </Card>\r\n        );\r\n}\r\nconst styles = theme => ({\r\n    formControl: {\r\n        width: '70%',\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n});\r\nexport default AddCandidate;","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\nimport { LogoutCurrentUser } from './UserActions';\r\n\r\nexport const SEND_TEST_INVITE = 'SEND_TEST_INVITE';\r\nexport const FETCH_INVITES_BEGIN = 'FETCH_INVITES_BEGIN';\r\nexport const FETCH_INVITES_SUCCESS = 'FETCH_INVITES_SUCCESS';\r\nexport const FETCH_INVITES_FAIL = 'FETCH_INVITES_FAIL';\r\nexport const SEND_TEST_INVITE_SUCCESS = 'SEND_TEST_INVITE_SUCCESS';\r\nexport const SEND_TEST_INVITE_FAIL = 'SEND_TEST_INVITE_FAIL';\r\nexport const INVITE_INFO_FIELD_CHANGE = 'INVITE_INFO_FIELD_CHANGE';\r\nexport const EVALUATION_SUCCESS = 'EVALUATION_SUCCESS';\r\nexport const EVALUATION_FAILED = 'EVALUATION_FAILED';\r\n\r\nexport const FetchInvitations = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_INVITES_BEGIN\r\n    });\r\n    let url = config.instance.getCandidateApiUrl() + 'getAllInvites';\r\n\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            console.log('Invites fetched');\r\n\r\n            dispatch({\r\n                type: FETCH_INVITES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_INVITES_FAIL,\r\n                    payload: err\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const EvaluateResults = (responseId) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getCandidateApiUrl() + 'evaluateAnswers';\r\n\r\n        repository.saveData(url, { responseId: responseId})\r\n                    .then((res) => {\r\n                        dispatch({\r\n                            type: EVALUATION_SUCCESS,\r\n                            payload: res.data\r\n                        });\r\n                    }).catch((err) => {\r\n                        dispatch({\r\n                            type: EVALUATION_FAILED,\r\n                            payload: err\r\n                        });\r\n                    });\r\n    })\r\n}\r\n\r\n// export const SendInvite = (testModel, inviteInfo) => dispatch => {\r\nexport const SendInvite = (model) => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'sendInvite';\r\n    \r\n    // let model = {\r\n    //     invitation_meta: {\r\n    //         ...inviteInfo,\r\n    //         testId: testModel.id\r\n    //     }\r\n    // }\r\n    \r\n    // let model = {\r\n    //     testId: testModel.id,\r\n    //     emailSubject: inviteInfo.emailSubject,\r\n    //     invitations: [\r\n    //         {\r\n    //             invitation_meta: {\r\n    //                 name: inviteInfo.name,\r\n    //                 testId: testModel.id\r\n    //             }\r\n    //         }\r\n    //     ]\r\n    // }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        repository.saveData(url, model)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: SEND_TEST_INVITE_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            resolve(true);\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: SEND_TEST_INVITE_FAIL,\r\n            });\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nexport const InviteInfoFieldChange = (val, field, model) => dispatch => {\r\n    if(!model) {\r\n        model = {};\r\n    }\r\n    switch(field)\r\n    {\r\n        case 'name':\r\n        {\r\n            model.name = val;\r\n            dispatch({\r\n                type: INVITE_INFO_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'emailTo':\r\n        {\r\n            model.emailTo = val;\r\n            dispatch({\r\n                type: INVITE_INFO_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'emailSubject':\r\n        {\r\n            model.emailSubject = val;\r\n            dispatch({\r\n                type: INVITE_INFO_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n    }\r\n}","import config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const ADD_CATEGORY_BEGIN = 'ADD_CATEGORY_BEGIN';\r\nexport const ADD_CATEGORY_SUCCESS = 'ADD_CATEGORY_SUCCESS';\r\nexport const ADD_CATEGORY_FAIL = 'ADD_CATEGORY_FAIL';\r\nexport const DELETE_CATEGORY_BEGIN = 'DELETE_CATEGORY_BEGIN';\r\nexport const DELETE_CATEGORY_SUCCESS = 'DELETE_CATEGORY_SUCCESS';\r\nexport const DELETE_CATEGORY_FAIL = 'DELETE_CATEGORY_FAIL';\r\nexport const CATEGORY_SEARCH_BEGIN = 'CATEGORY_SEARCH_BEGIN';\r\nexport const CATEGORY_SEARCH_SUCCESS = 'CATEGORY_SEARCH_SUCCESS';\r\nexport const UPDATE_CATEGORY_BEGIN = 'UPDATE_CATEGORY_BEGIN';\r\nexport const UPDATE_CATEGORY_SUCCESS = 'UPDATE_CATEGORY_SUCCESS';\r\nexport const UPDATE_CATEGORY_FAIL = 'UPDATE_CATEGORY_FAIL';\r\nexport const SELECT_CATEGORY = 'SELECT_CATEGORY';\r\nexport const CURRENT_CATEGORY_FIELD_CHANGE = 'CURRENT_CATEGORY_FIELD_CHANGE';\r\nexport const CURRENT_CATEGORY_FIELD_CHANGE_END = 'CURRENT_CATEGORY_FIELD_CHANGE_END';\r\nexport const FETCH_CATEGORIES_BEGIN = 'FETCH_CATEGORIES_BEGIN';\r\nexport const FETCH_CATEGORIES_SUCCESS = 'FETCH_CATEGORIES_SUCCESS';\r\nexport const FETCH_CATEGORIES_FAIL = 'FETCH_CATEGORIES_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const CurrentCategoryFieldChange = (val, field, model) => dispatch => {\r\n    switch(field)\r\n    {\r\n        case 'title':\r\n        {\r\n            model.category_meta.title = val;\r\n            dispatch({\r\n                type: CURRENT_CATEGORY_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'description':\r\n        {\r\n            model.category_meta.description = val;\r\n            dispatch({\r\n                type: CURRENT_CATEGORY_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n            break;\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_CATEGORY_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddCategory = (categoryModel, editMode) => dispatch => {\r\n    dispatch({\r\n        type: ADD_CATEGORY_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'category';\r\n    if(!editMode) {\r\n        repository.saveData(url, categoryModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: ADD_CATEGORY_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: ADD_CATEGORY_FAIL,\r\n                    payload: err\r\n                });\r\n            });\r\n    }\r\n    else {\r\n        dispatch(UpdateCategory(categoryModel));\r\n    }\r\n}\r\n\r\nexport const DeleteCategory = (categoryModel) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'category';\r\n    repository.deleteData(url, categoryModel)\r\n        .then((res) => {\r\n            dispatch(FetchCategories());\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: DELETE_CATEGORY_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const BeginSearch = () => dispatch => {\r\n    dispatch({\r\n        type: CATEGORY_SEARCH_BEGIN\r\n    });\r\n}\r\n\r\nexport const SearchCategory = (searchTerm, categoryList) => dispatch => {\r\n    if(categoryList && categoryList.length > 0) {\r\n        let filteredCategories = categoryList.filter((item) => {\r\n            return (\r\n                    item.title &&\r\n                    item.title.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\r\n                    ) ||\r\n                    (\r\n                        item.description &&\r\n                        item.description.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1);\r\n        });\r\n        if(filteredCategories && filteredCategories.length > 0) {\r\n            dispatch({\r\n                type: CATEGORY_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredCategories,\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: CATEGORY_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredCategories: [],\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: CATEGORY_SEARCH_SUCCESS,\r\n            payload: {\r\n                filteredCategories: [],\r\n                searchTerm\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const SelectCategory = (categoryModel) => dispatch => {\r\n    dispatch({\r\n        type: SELECT_CATEGORY,\r\n        payload: categoryModel\r\n    })\r\n}\r\n\r\nexport const UpdateCategory = (categoryModel) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_CATEGORY_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'category';\r\n    repository.updateData(url, categoryModel)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: UPDATE_CATEGORY_SUCCESS\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: UPDATE_CATEGORY_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchCategories = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_CATEGORIES_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllCategories';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\nimport { LogoutCurrentUser } from './UserActions';\r\nimport { FETCH_CATEGORIES_SUCCESS, FETCH_CATEGORIES_FAIL } from './CategoryActions';\r\n\r\nexport const ADD_TEST_BEGIN = 'ADD_TEST_BEGIN';\r\nexport const ADD_TEST_SUCCESS = 'ADD_TEST_SUCCESS';\r\nexport const ADD_TEST_FAIL = 'ADD_TEST_FAIL';\r\nexport const TEST_SEARCH_BEGIN = 'TEST_SEARCH_BEGIN';\r\nexport const TEST_SEARCH_SUCCESS = 'TEST_SEARCH_SUCCESS';\r\nexport const UPDATE_TEST_BEGIN = 'UPDATE_TEST_BEGIN';\r\nexport const UPDATE_TEST_SUCCESS = 'UPDATE_TEST_SUCCESS';\r\nexport const UPDATE_TEST_FAIL = 'UPDATE_TEST_FAIL';\r\nexport const SELECT_TEST = 'SELECT_TEST';\r\nexport const CURRENT_TEST_FIELD_CHANGE = 'CURRENT_TEST_FIELD_CHANGE';\r\nexport const CURRENT_TEST_FIELD_CHANGE_END = 'CURRENT_TEST_FIELD_CHANGE_END';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE = 'CURRENT_ANSWER_FIELD_CHANGE';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE_END = 'CURRENT_ANSWER_FIELD_CHANGE_END';\r\nexport const CHOICE_ADDED_TO_TEST = 'CHOICE_ADDED_TO_TEST';\r\nexport const FETCH_TEST_BEGIN = 'FETCH_TEST_BEGIN';\r\nexport const FETCH_TESTS_SUCCESS = 'FETCH_TESTS_SUCCESS';\r\nexport const FETCH_TESTS_FAIL = 'FETCH_TESTS_FAIL';\r\nexport const FETCH_SKILLS_SUCCESS = 'FETCH_SKILLS_SUCCESS';\r\nexport const FETCH_SKILLS_FAIL = 'FETCH_SKILLS_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const CurrentTestFieldChange = (val, field, model) => dispatch => {\r\n    console.log('test field change: ' + field);\r\n    console.log(val);\r\n    switch(field)\r\n    {\r\n        case 'testName':\r\n        {\r\n            model.test_meta.testName = val;\r\n            dispatch({\r\n                type: CURRENT_TEST_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'skill':\r\n        {\r\n            model.test_meta.skill = val;\r\n            dispatch({\r\n                type: CURRENT_TEST_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'duration':\r\n        {\r\n            model.test_meta.duration = val;\r\n            dispatch({\r\n                type: CURRENT_TEST_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'grade':\r\n        {\r\n            model.test_meta.grade = val;\r\n            dispatch({\r\n                type: CURRENT_TEST_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'subject':\r\n        {\r\n            model.test_meta.subject = val;\r\n            dispatch({\r\n                type: CURRENT_TEST_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_TEST_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddTest = (testModel, editMode) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        dispatch({\r\n            type: ADD_TEST_BEGIN\r\n        });\r\n        let url = config.instance.getAdminApiUrl() + 'test';\r\n        \r\n        repository.saveData(url, testModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: ADD_TEST_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: ADD_TEST_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n\r\n    });\r\n}\r\n\r\n export const FetchCategories = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllCategories';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchSkills = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllSkills';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const UpdateTest = (testModel) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_TEST_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'test';\r\n    repository.updateData(url, testModel)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: UPDATE_TEST_SUCCESS\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: UPDATE_TEST_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchTests = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_TEST_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllTests';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_TESTS_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import config from '../../config';\r\nimport repository from '../../repository';\r\nimport { LogoutCurrentUser } from '../UserActions';\r\nimport { FETCH_TESTS_SUCCESS, FETCH_TESTS_FAIL } from '../AdminTestActions';\r\nexport const FETCH_REGISTERED_TESTS_SUCCESS = 'FETCH_REGISTERED_TESTS_SUCCESS'; \r\n\r\nexport const FetchPublicTests = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'testsAvailableForMe';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_TESTS_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const RegisterForTest = (model) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let url = config.instance.getCandidateApiUrl() + 'registerForTest';\r\n        repository.saveData(url, model)\r\n            .then((res) => {\r\n                resolve();\r\n            })\r\n            .catch((err) => {\r\n                if(err.data && err.data.message === 'Invalid token.') {\r\n                    dispatch(LogoutCurrentUser());\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: FETCH_TESTS_FAIL,\r\n                        payload: err.statusText\r\n                    });\r\n                }\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const FetchMyTests = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getMyTests';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_TESTS_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const FetchMyRegisteredTests = () => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'getMyRegistrations';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_REGISTERED_TESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_TESTS_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const SendBulkInvites = (model) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let url = config.instance.getCandidateApiUrl() + 'sendInvite';\r\n    \r\n        repository.updateData(url, model)\r\n            .then((res) => {\r\n                // dispatch({\r\n                //     type: TEST_PUBLISHED,\r\n                //     payload: res.data\r\n                // });\r\n                resolve();\r\n            })\r\n            .catch((err) => {\r\n                // dispatch({\r\n                //     type: PUBLISH_TEST_FAIL,\r\n                //     payload: err\r\n                // });\r\n                reject('Error while publishing. Please retry after some time: ' + err);\r\n            });\r\n    \r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { PersonAdd } from '@material-ui/icons';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { getDateTime } from '../../Utils';\r\n\r\n// const getDateTime = (dateTime, withTime) => {\r\n//     let finalStr = '';\r\n//     if (dateTime) {\r\n//         let dt = new Date(dateTime);\r\n//         finalStr = `${dt.getFullYear()}-${dt.getMonth() + 1}-${dt.getDate()}`;\r\n//         if (withTime) {\r\n//             // finalStr += ` ${dt.getHours()}:${dt.getMinutes()}`;\r\n//             let h = (dt.getHours() < 10 ? '0' : '') + dt.getHours(),\r\n//                 m = (dt.getMinutes() < 10 ? '0' : '') + dt.getMinutes();\r\n//             finalStr += ` ${h}:${m}`;\r\n//         }\r\n//     }\r\n//     return finalStr;\r\n// }\r\n\r\nconst InviteList = (props) => {\r\n    let { invitations } = props;\r\n    // console.log('invitations', invitations);\r\n    return (\r\n        <div>\r\n            {!invitations && <LoadingComponent />}\r\n            {invitations && invitations.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No Invitations Found </Typography>}\r\n            {invitations && invitations.length > 0 &&\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <CustomTableCell>Test</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Candidate Name</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Status</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Invited On</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Completed On</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Results</CustomTableCell>\r\n                            {/* <CustomTableCell align=\"left\">Send Reminder</CustomTableCell> */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {invitations.map((invitation, index) => {\r\n                            console.log('invitation.responseId', invitation.responseId);\r\n                            return (\r\n                            <TableRow key={index}>\r\n                                <CustomTableCell component=\"th\" scope=\"row\">\r\n                                    <Link to={{ pathname: \"/testConsole\", state: { testId: invitation.testId } }}>\r\n                                        {invitation.testName}\r\n                                    </Link>\r\n                                </CustomTableCell>\r\n                                {/* <CustomTableCell component=\"th\" scope=\"row\">\r\n                                    <Link to={ {pathname: \"/candidateConsole\", state: { responseId: invitation.responseId } }}>\r\n                                        {invitation.candidateName}\r\n                                    </Link>\r\n                                </CustomTableCell> */}\r\n                                <CustomTableCell align=\"left\">{invitation.candidateName}</CustomTableCell>\r\n                                <CustomTableCell align=\"left\">{invitation.invitationStatus}</CustomTableCell>\r\n                                <CustomTableCell align=\"left\">{getDateTime(invitation.invitedOn, true)}</CustomTableCell>\r\n                                <CustomTableCell align=\"left\">{getDateTime(invitation.completedOn, true)}</CustomTableCell>\r\n                                <CustomTableCell align=\"left\">\r\n                                    {\r\n                                        invitation.result &&\r\n                                        (invitation.result.indexOf('FAILED') > -1 ||\r\n                                        invitation.result.indexOf('CLEARED') > -1) &&\r\n                                        <Link to={ {pathname: \"/candidateConsole\", state: { responseId: invitation.responseId,\r\n                                            candidateId: invitation.candidateId, backLink: 'invitations' } }}>\r\n                                                View Details\r\n                                        </Link>\r\n                                    }\r\n                                    {/* {\r\n                                        invitation.result &&\r\n                                        invitation.result.indexOf('CLEARED') > -1 &&\r\n                                        <Typography color=\"primary\">{invitation.result}</Typography>\r\n                                    }\r\n                                    {\r\n                                        invitation.result &&\r\n                                        invitation.result.indexOf('FAILED') > -1 &&\r\n                                        <Typography color=\"secondary\">{invitation.result}</Typography>\r\n                                    } */}\r\n                                    {\r\n                                        invitation.invitationStatus &&\r\n                                        invitation.invitationStatus.indexOf(\"INIT\") > -1 &&\r\n                                        <Typography>Not Taken</Typography>\r\n                                    }\r\n                                    {\r\n                                        !invitation.result &&\r\n                                        (invitation.invitationStatus &&\r\n                                            invitation.invitationStatus.indexOf(\"COMPLETED\") > -1) &&\r\n                                     //       'Evaluation Pending'\r\n                                        <Button color=\"primary\" size=\"small\" variant=\"contained\"\r\n                                            onClick={() => props.evaluateResults(invitation.responseId)} >Evaluate</Button>\r\n                                    }\r\n                                </CustomTableCell>\r\n                                {/* <CustomTableCell align=\"center\" scope=\"row\" component=\"th\">\r\n                                <Link to={ {pathname: \"/inviteConsole\", state: { testId: invitation.testId } }}>\r\n                                    <PersonAdd />\r\n                                </Link>\r\n                            </CustomTableCell> */}\r\n                            </TableRow>\r\n                        )})}\r\n                    </TableBody>\r\n                </Table>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n        //   backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.black,\r\n        fontSize: 16\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default InviteList;","export const success = {\r\n    light: '#CBC2E1',// '#81c784',\r\n    main: '#4caf50',\r\n    dark: '#388e3c'\r\n};\r\nexport const primary = {\r\n    light: '#4791db',\r\n    main: '#1976d2',\r\n    dark: '#115293'\r\n};\r\nexport const secondary = {\r\n    light: '#e33371',\r\n    main: '#dc004e',\r\n    dark: '#9a0036'\r\n};\r\nexport const warning = {\r\n    light: '#ffb74d',\r\n    main: '#ff9800',\r\n    dark: '#f57c00'\r\n};\r\nexport const error = {\r\n    light: '#e57373',\r\n    main: '#f44336',\r\n    dark: '#d32f2f'\r\n};\r\nexport const info = {\r\n    light: '#64b5f6',\r\n    main: '#9C5CC4',\r\n    dark: '#1976d2'\r\n};\r\n\r\n\r\n","import LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { info, primary, success, secondary, warning } from './ColorCodes';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst theme = {\r\n    root: {\r\n        marginTop: '5%'\r\n    }\r\n}\r\n\r\nexport const BorderLinearProgressPrimary = withStyles((theme) => ({\r\n    root: {\r\n      height: 20,\r\n      borderRadius: 5,\r\n    //   marginTop: '5%'\r\n    },\r\n    colorPrimary: {\r\n    //   backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 20 : 30],\r\n    },\r\n    bar: {\r\n      borderRadius: 5,\r\n      backgroundColor: primary.main,\r\n    },\r\n  }))(LinearProgress);\r\n  \r\nexport const BorderLinearProgressWarning = withStyles((theme) => ({\r\n    root: {\r\n      height: 20,\r\n      borderRadius: 5,\r\n    //   marginTop: '5%'\r\n    },\r\n    colorPrimary: {\r\n    //   backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 20 : 30],\r\n    },\r\n    bar: {\r\n      borderRadius: 5,\r\n      backgroundColor: warning.main\r\n    },\r\n  }))(LinearProgress);\r\n  \r\nexport const BorderLinearProgressSecondary = withStyles((theme) => ({\r\n    root: {\r\n      height: 20,\r\n      borderRadius: 5,\r\n    //   marginTop: '5%'\r\n    },\r\n    colorPrimary: {\r\n    //   backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 20 : 30],\r\n    },\r\n    bar: {\r\n      borderRadius: 5,\r\n      backgroundColor: secondary.main,\r\n    },\r\n  }))(LinearProgress);\r\n\r\nexport const BorderLinearProgressInfo = withStyles((theme) => ({\r\n    root: {\r\n      height: 20,\r\n      borderRadius: 5,\r\n    //   marginTop: '5%'\r\n    },\r\n    colorPrimary: {\r\n    //   backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 20 : 30],\r\n    },\r\n    bar: {\r\n      borderRadius: 5,\r\n      backgroundColor: info.main,\r\n    },\r\n  }))(LinearProgress);\r\n\r\n  export const BorderLinearProgressSuccess = withStyles((theme) => ({\r\n    root: {\r\n      height: 20,\r\n      borderRadius: 5,\r\n    //   marginTop: '5%'\r\n    },\r\n    colorPrimary: {\r\n    //   backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 20 : 30],\r\n    },\r\n    bar: {\r\n      borderRadius: 5,\r\n      backgroundColor: success.main,\r\n    },\r\n  }))(LinearProgress);","import AuthHelper from '../AuthHelper';\r\n\r\nexport const TestStatus = {\r\n    Draft: 'DRAFT',\r\n    Published: 'PUBLISHED'\r\n}\r\n\r\nconst SendInviteRoles = [\"admin\", \"orgadmin\"];\r\nexport const CanSendInvite = (testStatus) => {\r\n    let role = GetCurrentUserRole();\r\n    if(SendInviteRoles.indexOf(role) === -1) {\r\n        return false;\r\n    }\r\n    return testStatus && testStatus.toUpperCase() === TestStatus.Published;\r\n}\r\nexport const GetCurrentUserRole = () => {\r\n    let user = AuthHelper.GetUserInfo();\r\n    if(user) {\r\n        return user.role;\r\n    }\r\n    return null;\r\n}\r\nexport const GetCurrentUserName = () => {\r\n    let user = AuthHelper.GetUserInfo();\r\n    if(user) {\r\n        return user.name;\r\n    }\r\n    return null;\r\n}\r\nexport const EscapeSpecialCharacters = (stringContent) => {\r\n    if(!stringContent) return stringContent;\r\n    return stringContent.replace(/\\<doublequotes>/g, '\"');\r\n}","import React, { Component } from 'react';\r\nimport { Book, Assessment, ViewQuilt, PermIdentity, Polymer, Airplay,\r\n    SupervisorAccount, Work, Launch  } from '@material-ui/icons';\r\nimport LoadingComponent from '../components/lib/LoadingComponent';\r\nimport { getDateTime, sortDescending } from '../Utils';\r\nimport { Link as InternalLink } from 'react-router-dom';\r\nimport AuthHelper from \"../AuthHelper\";\r\n\r\nclass TeacherDashboard extends Component {\r\n\r\n    componentDidMount = () => {\r\n        AuthHelper.SetHistory(this.props.history);\r\n        this.props.fetchTestCount();\r\n        this.props.fetchMcqCount();\r\n        this.props.fetchInvitationCount();\r\n        this.props.fetchRecentResponses();\r\n    }\r\n\r\n    render = () => {\r\n        let { classes, testCount, mcqCount, invitationCount, \r\n            recentResponses } = this.props;\r\n            let totalCompletedCount = 0;\r\n            console.log('props-ds', this.props);\r\n            \r\n            let completedTests = []; \r\n            let pendingTests = [];\r\n            if(recentResponses && recentResponses.length) {\r\n                recentResponses.forEach((invitation, index) => {\r\n                    if(invitation.invitationStatus !== 'COMPLETED') {\r\n                        pendingTests.push(invitation);\r\n                    }\r\n                    else {\r\n                        completedTests.push(invitation);\r\n                    }\r\n                })\r\n                \r\n                if(completedTests) {\r\n                    totalCompletedCount = completedTests.length;\r\n                    // completedTests = completedTests.sort().slice(0, 5);\r\n                    completedTests = sortDescending(completedTests, 'completedOn');\r\n                    completedTests = completedTests.slice(0, 5);\r\n                }\r\n                if(pendingTests) {\r\n                    pendingTests = sortDescending(pendingTests, 'invitedOn');\r\n                    pendingTests = pendingTests.sort().slice(0, 5);\r\n                }\r\n            }\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"\">\r\n                    <StatisticsPanel {...this.props}/>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\" style={styles.dashboardPanel}>\r\n                        <RecentResponses {...this.props} />\r\n                    </div>\r\n                    <div className=\"col-md-6\" style={styles.dashboardPanel}>\r\n                        <PendingInvitations {...this.props} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nconst StatisticsPanel = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Tests </h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.testCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  MCQ Library</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.mcqCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Invited</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.invitationCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Completed</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.totalCompletedCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst RecentResponses = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"card h-100\">\r\n                <div className=\"card-header\">\r\n                    <p>Completed Tests</p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {!props.completedTests && <LoadingComponent /> }\r\n                    {props.recentResponses && props.recentResponses.length === 0 && <div className=\"alert alert-info\">No recent candidate actions </div> }\r\n                    {props.completedTests && props.completedTests.length > 0 &&\r\n                        props.completedTests.map((invitation, index) => {\r\n                            return (\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-10\">\r\n                                        {invitation.candidateName} completed test on &nbsp;\r\n                                        <span className=\"font-italic\">{getDateTime(invitation.completedOn, true)}</span>\r\n                                    </div>\r\n                                    <div className=\"col-md-2\">\r\n                                        <InternalLink className=\"text-small\" title=\"View All\" \r\n                                            // to={ {pathname: \"/invitations\"} }\r\n                                            to={ {pathname: \"/candidateConsole\", state: { responseId: invitation.responseId,\r\n                                                candidateId: invitation.candidateId, backLink: 'invitations' } }}\r\n                                            >\r\n                                            <Launch  variant=\"filled\" color=\"primary\" />\r\n                                        </InternalLink>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n                        \r\n        </>\r\n    )\r\n}\r\n\r\nconst PendingInvitations = (props) => {\r\n    return (\r\n    <>\r\n        <div className=\"card h-100\">\r\n            <div className=\"card-header\">\r\n                <p>Invitations Sent</p>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {!props.pendingTests && <LoadingComponent /> }\r\n                {props.pendingTests && props.pendingTests.length === 0 && <div className=\"alert alert-info\">No recent candidate actions </div> }\r\n                {props.pendingTests && props.pendingTests.length > 0 &&\r\n                    props.pendingTests.map((invitation, index) => {\r\n                        return (\r\n                            <div className=\"text-dark\">\r\n                                {invitation.candidateName} invited on <span className=\"font-italic\">{getDateTime(invitation.invitedOn, true)}</span>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n                    \r\n    </>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    dashboardPanel: {\r\n        minHeight: '300px'\r\n    }\r\n}\r\n\r\nexport default TeacherDashboard;","import React, { Component } from 'react';\r\nimport {\r\n    Book, Assessment, ViewQuilt, PermIdentity, Polymer, Airplay,\r\n    SupervisorAccount, Work, Launch\r\n} from '@material-ui/icons';\r\nimport LoadingComponent from '../components/lib/LoadingComponent';\r\nimport { getDateTime, getNextAvailableTimeSlots, sortDescending } from '../Utils';\r\nimport { Link as InternalLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst StudentDashboard = (props) => {\r\n    if (props.upcomingTests) {\r\n        let upcomingTests = props.upcomingTests;\r\n        if(upcomingTests.length === 0) {\r\n            return(\r\n                <div className=\"container mt-4\">\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    No upcoming tests.\r\n                </Typography>\r\n                </div>\r\n                )\r\n        }\r\n        return (\r\n            <div className=\"\">\r\n                <div className=\"\">\r\n                    <TestsList\r\n                      title=\"Upcoming Tests\" \r\n                      tests={upcomingTests}\r\n                      registerForTest={props.registerForTest} \r\n                    />\r\n                </div>\r\n                {/* <div className=\"mt-4\">\r\n                    <TestsList\r\n                      title=\"Registered Tests\" \r\n                      tests={registeredTests}\r\n                      startRegisteredTest={props.startRegisteredTest}\r\n                    />\r\n                </div> */}\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <LoadingComponent />\r\n    )\r\n}\r\n\r\nconst TestsList = (props) => {\r\n    return (\r\n        <div className=\"card border-0\">\r\n                    <div className=\"card-body\">\r\n                        {props.tests && props.tests.map((testItem) => {\r\n                            console.log('testitem: ', testItem);\r\n                            return (\r\n                                <div className=\"border-bottom\">\r\n                                    <div className=\"card-title text-center\">\r\n                                        <h5>{testItem.test_meta.testName}</h5>\r\n                                    </div>\r\n                                    <div className=\"row ml-4\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Grade</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.grade}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Subject</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.subject}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Questions</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.selectedMcqs.length}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Duration</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.duration} Minutes</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Created By</div>\r\n                                        <div className=\"col-md-9\">{testItem.user_meta.name}</div>\r\n                                    </div>\r\n                                    <div className=\"mt-5 mb-4\">\r\n                                        {RegistrationButton(testItem, props.registerForTest, props.startRegisteredTest)}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n         </div>\r\n    )\r\n}\r\n\r\nconst RegistrationButton = (testItem, registerForTestHandler, startTestHandler) => {\r\n    if (testItem.registrationStatus && testItem.registrationStatus === \"Registered\") {\r\n        let st = new Date(`${testItem.scheduledStart}`);\r\n        return (\r\n            <>\r\n                <div>\r\n                    Scheduled for {`${st.getDate()}-${st.getMonth() + 1}-${st.getFullYear()} ${st.getHours()}:00`}\r\n                </div>\r\n                <hr />\r\n                <div>\r\n                    <button className=\"btn btn-primary\"\r\n                        onClick={() =>\r\n                            startTestHandler(testItem.registrationId)\r\n                        }>\r\n                        Start\r\n                    </button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    if (testItem.registrationStatus && testItem.registrationStatus === \"Completed\") {\r\n        let st = new Date(testItem.modifiedOn);\r\n        return (\r\n            <>\r\n                <div>\r\n                    Test Completed on {st.getFullYear()} - {st.getMonth() + 1} - {st.getDate()}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"card text-secondary\">\r\n            <div className=\"card-body text-center\">\r\n            <div>Register by selecting your preferable time slot to start this test</div>\r\n            {availableSlots().map((slot) => {\r\n                let model = { testId: testItem.id, scheduledStart: slot };\r\n                return (\r\n                        <button className=\"btn btn-secondary mt-3 ml-3\"\r\n                            onClick={() =>\r\n                                registerForTestHandler(model)\r\n                            }>\r\n                            {slot}\r\n                        </button>\r\n                )\r\n            })}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst availableSlots = () => {\r\n    return getNextAvailableTimeSlots();\r\n}\r\n\r\nconst styles = {\r\n    dashboardPanel: {\r\n        minHeight: '300px'\r\n    }\r\n}\r\n\r\nexport default StudentDashboard;","import React, { Component } from \"react\";\r\nimport { Book, Assessment, ViewQuilt, PermIdentity, Polymer, Airplay,\r\n    SupervisorAccount, Work, Launch  } from '@material-ui/icons';\r\nimport LoadingComponent from '../components/lib/LoadingComponent';\r\nimport { getDateTime, sortDescending } from '../Utils';\r\nimport { Link as InternalLink } from 'react-router-dom';\r\nimport AuthHelper from \"../AuthHelper\";\r\n\r\nclass OrgAdminDashboard extends Component {\r\n\r\n    componentDidMount = () => {\r\n        AuthHelper.SetHistory(this.props.history);\r\n        this.props.fetchTestCount();\r\n        this.props.fetchMcqCount();\r\n        this.props.fetchInvitationCount();\r\n        this.props.fetchRecentResponses();\r\n    }\r\n\r\n    render = () => {\r\n        let { classes, testCount, mcqCount, invitationCount, \r\n            recentResponses } = this.props;\r\n            let totalCompletedCount = 0;\r\n            console.log('props-ds', this.props);\r\n            \r\n            let completedTests = []; \r\n            let pendingTests = [];\r\n            if(recentResponses && recentResponses.length) {\r\n                recentResponses.forEach((invitation, index) => {\r\n                    if(invitation.invitationStatus !== 'COMPLETED') {\r\n                        pendingTests.push(invitation);\r\n                    }\r\n                    else {\r\n                        completedTests.push(invitation);\r\n                    }\r\n                })\r\n                \r\n                if(completedTests) {\r\n                    totalCompletedCount = completedTests.length;\r\n                    // completedTests = completedTests.sort().slice(0, 5);\r\n                    completedTests = sortDescending(completedTests, 'completedOn');\r\n                    completedTests = completedTests.slice(0, 5);\r\n                }\r\n                if(pendingTests) {\r\n                    pendingTests = sortDescending(pendingTests, 'invitedOn');\r\n                    pendingTests = pendingTests.sort().slice(0, 5);\r\n                }\r\n            }\r\n            return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"\">\r\n                    <StatisticsPanel {...this.props}/>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\" style={styles.dashboardPanel}>\r\n                            <RecentResponses {...this.props} />\r\n                        </div>\r\n                        <div className=\"col-md-6\" style={styles.dashboardPanel}>\r\n                            <PendingInvitations {...this.props} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n            )\r\n    }\r\n    \r\n}\r\n\r\nconst StatisticsPanel = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Tests </h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.testCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  MCQ Library</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.mcqCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Invited</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.invitationCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-center\"><Assessment color=\"primary\" />  Completed</h5>\r\n                        <p className=\"card-text text-center font-weight-bold\">{props.totalCompletedCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst RecentResponses = (props) => {\r\n    return (\r\n        <>\r\n            <div className=\"card h-100\">\r\n                <div className=\"card-header\">\r\n                    <p>Completed Tests</p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    {!props.completedTests && <LoadingComponent /> }\r\n                    {props.recentResponses && props.recentResponses.length === 0 && <div className=\"alert alert-info\">No recent candidate actions </div> }\r\n                    {props.completedTests && props.completedTests.length > 0 &&\r\n                        props.completedTests.map((invitation, index) => {\r\n                            return (\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-10\">\r\n                                        {invitation.candidateName} completed test on &nbsp;\r\n                                        <span className=\"font-italic\">{getDateTime(invitation.completedOn, true)}</span>\r\n                                    </div>\r\n                                    <div className=\"col-md-2\">\r\n                                        <InternalLink className=\"text-small\" title=\"View All\" \r\n                                            // to={ {pathname: \"/invitations\"} }\r\n                                            to={ {pathname: \"/candidateConsole\", state: { responseId: invitation.responseId,\r\n                                                candidateId: invitation.candidateId, backLink: 'invitations' } }}\r\n                                            >\r\n                                            <Launch  variant=\"filled\" color=\"primary\" />\r\n                                        </InternalLink>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n                        \r\n        </>\r\n    )\r\n}\r\n\r\nconst PendingInvitations = (props) => {\r\n    return (\r\n    <>\r\n        <div className=\"card h-100\">\r\n            <div className=\"card-header\">\r\n                <p>Invitations Sent</p>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {!props.pendingTests && <LoadingComponent /> }\r\n                {props.pendingTests && props.pendingTests.length === 0 && <div className=\"alert alert-info\">No recent candidate actions </div> }\r\n                {props.pendingTests && props.pendingTests.length > 0 &&\r\n                    props.pendingTests.map((invitation, index) => {\r\n                        return (\r\n                            <div className=\"text-dark\">\r\n                                {invitation.candidateName} invited on <span className=\"font-italic\">{getDateTime(invitation.invitedOn, true)}</span>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n                    \r\n    </>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    dashboardPanel: {\r\n        minHeight: '300px'\r\n    }\r\n}\r\n\r\nexport default OrgAdminDashboard","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport AuthHelper from '../AuthHelper';\r\nimport { connect } from 'react-redux';\r\nimport { SetUserInfo } from '../actions/UserActions';\r\nimport { FetchTestCount, FetchMcqCount, FetchInvitationCount,\r\n    FetchRecentResponses } from '../actions/DashboardActions';\r\nimport { FetchPublicTests, RegisterForTest } from '../actions/OpTests/OpTestActions';\r\nimport { Card, CardHeader, CardContent, Typography, CardActions, Button, Grid, MuiThemeProvider,\r\nPaper, Avatar, ListItemSecondaryAction } from '@material-ui/core';\r\nimport { Link as InternalLink } from 'react-router-dom';\r\nimport { Link } from '@material-ui/core';\r\n// import Box from '@material-ui/core/Box';\r\n// import Box from '../components/lib/Box';\r\n// import { ThemeProvider } from 'styled-components'\r\n// import { bgcolor } from '@material-ui/system';\r\nimport { Book, Assessment, ViewQuilt, PermIdentity, Polymer, Airplay,\r\n    SupervisorAccount, Work, Launch  } from '@material-ui/icons';\r\nimport * as css from '../../src/App.css';\r\nimport InviteList from '../Containers/InviteConsole/InviteList';\r\n    // import { styled } from '@material-ui/core/styles';\r\n    // import { compose, spacing, palette } from '@material-ui/system';\r\n    // const Box = styled('div')(compose(spacing, palette));\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport LoadingComponent from '../components/lib/LoadingComponent';\r\nimport { BorderLinearProgressPrimary, BorderLinearProgressInfo, BorderLinearProgressSecondary,\r\n    BorderLinearProgressSuccess, \r\n    BorderLinearProgressWarning} from './lib/ProgressBars';\r\nimport LocalLoginComponent from './lib/LocalLoginComponent';\r\nimport { primary } from './lib/ColorCodes';\r\nimport { getDateTime, sortDescending } from '../Utils';\r\nimport { GetCurrentUserRole } from '../common/HelperFunctions';\r\nimport TeacherDashboard from './TeacherDashboard';\r\nimport StudentDashboard from './StudentDashboard';\r\nimport OrgAdminDashboard from './OrgAdminDashboard';\r\n\r\nconst theme = {\r\n    spacing: 4,\r\n    palette: {\r\n      primary: '#007bff',\r\n    },\r\n  };\r\nclass Dashboard extends Component {\r\n    componentDidMount = () => {\r\n        AuthHelper.SetHistory(this.props.history);\r\n        // this.props.FetchTestCount();\r\n        // this.props.FetchMcqCount();\r\n        // this.props.FetchInvitationCount();\r\n        // this.props.FetchRecentResponses();\r\n        if(GetCurrentUserRole() === 'student') {\r\n            this.props.FetchPublicTests();\r\n        }\r\n    }\r\n    \r\n    registerForTest = (model) => {\r\n        this.props.RegisterForTest(model)\r\n            .then(() => {\r\n                this.props.FetchPublicTests();\r\n            });\r\n    }\r\n    \r\n    startRegisteredTest = (registrationId) => {\r\n        this.props.history.push('/startRegisteredTest/' + registrationId);\r\n    }\r\n    \r\n    render = () => {\r\n        let { classes, testCount, mcqCount, invitationCount, \r\n            recentResponses } = this.props;\r\n        classes = classes || {};\r\n        let totalCompletedCount = 0;\r\n        console.log('props-ds', this.props);\r\n        \r\n        let completedTests = []; \r\n        let pendingTests = [];\r\n        if(recentResponses && recentResponses.length) {\r\n            recentResponses.forEach((invitation, index) => {\r\n                if(invitation.invitationStatus !== 'COMPLETED') {\r\n                    pendingTests.push(invitation);\r\n                }\r\n                else {\r\n                    completedTests.push(invitation);\r\n                }\r\n            })\r\n            \r\n            if(completedTests) {\r\n                totalCompletedCount = completedTests.length;\r\n                // completedTests = completedTests.sort().slice(0, 5);\r\n                completedTests = sortDescending(completedTests, 'completedOn');\r\n                completedTests = completedTests.slice(0, 5);\r\n            }\r\n            if(pendingTests) {\r\n                pendingTests = sortDescending(pendingTests, 'invitedOn');\r\n                pendingTests = pendingTests.sort().slice(0, 5);\r\n            }\r\n        }\r\n\r\n        if(GetCurrentUserRole() === 'teacher') {\r\n            return (\r\n                <TeacherDashboard \r\n                fetchInvitationCount={() => this.props.FetchInvitationCount()}\r\n                fetchMcqCount={() => this.props.FetchMcqCount()}\r\n                fetchTestCount={() => this.props.FetchTestCount()}\r\n                fetchRecentResponses={() => this.props.FetchRecentResponses()}\r\n                testCount={testCount}\r\n                mcqCount={mcqCount}\r\n                invitationCount={invitationCount}\r\n                totalCompletedCount={totalCompletedCount}\r\n                completedTests={completedTests}\r\n                pendingTests={pendingTests}\r\n                />\r\n            )\r\n        }\r\n\r\n        if(GetCurrentUserRole() === 'orgadmin') {\r\n            return (\r\n                <OrgAdminDashboard \r\n                fetchInvitationCount={() => this.props.FetchInvitationCount()}\r\n                fetchMcqCount={() => this.props.FetchMcqCount()}\r\n                fetchTestCount={() => this.props.FetchTestCount()}\r\n                fetchRecentResponses={() => this.props.FetchRecentResponses()}\r\n                testCount={testCount}\r\n                mcqCount={mcqCount}\r\n                invitationCount={invitationCount}\r\n                totalCompletedCount={totalCompletedCount}\r\n                completedTests={completedTests}\r\n                pendingTests={pendingTests}\r\n                />\r\n            )\r\n        }\r\n\r\n        if(GetCurrentUserRole() === 'student') {\r\n            //console.log('student available tests: ', tests);\r\n            return (<div></div>\r\n                // <StudentDashboard\r\n                //     tests={tests}\r\n                //     registerForTest={(testId) => this.registerForTest(testId)}\r\n                //     startRegisteredTest={(registrationId) => this.startRegisteredTest(registrationId)}\r\n                // />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Grid container spacing={32}>\r\n                    <Grid item xs={3} sm={3}>\r\n                        <Card className={classes.paletteBorderLeftSuccessMain}>\r\n                            <CardContent>\r\n                                <Grid container spacing={32}>\r\n                                    <Grid item xs={3} sm={3} className={classes.verticalCenter}>\r\n                                        <Avatar variant=\"square\" className={classes.bgSuccessMain}>\r\n                                            <Assessment />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    {/* <Grid item xs={1} sm={1}></Grid> */}\r\n                                    <Grid item xs={8} sm={8}>\r\n                                        <div>\r\n                                            <Typography variant=\"caption\">Tests taken</Typography>\r\n                                           <Typography variant=\"h3\">{testCount}</Typography> Tests\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    {/* <Grid item xs={1} sm={1} /> */}\r\n                    <Grid item xs={3} sm={3}>\r\n                        <Card className={classes.paletteBorderLeftPrimaryMain}>\r\n                            <CardContent>\r\n                                <Grid container spacing={32}>\r\n                                    <Grid item xs={3} sm={3} className={classes.verticalCenter}>\r\n                                        <Avatar variant=\"rounded\" className={classes.bgSuccessMain}>\r\n                                            <Assessment />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    {/* <Grid item xs={1} sm={1}></Grid> */}\r\n                                    <Grid item xs={8} sm={8}>\r\n                                        <div>\r\n                                            <Typography variant=\"caption\">MCQ Library</Typography>\r\n                                            <Typography variant=\"h3\">{mcqCount}</Typography> \r\n                                            Questions\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    {/* <Grid item xs={1} sm={1} /> */}\r\n                    <Grid item xs={3} sm={3}>\r\n                        <Card className={classes.paletteBorderLeftSecondaryMain}>\r\n                            <CardContent>\r\n                                <Grid container spacing={32}>\r\n                                    <Grid item xs={3} sm={3} className={classes.verticalCenter}>\r\n                                        <Avatar variant=\"rounded\" className={classes.bgSuccessMain}>\r\n                                            <Assessment />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    {/* <Grid item xs={1} sm={1}></Grid> */}\r\n                                    <Grid item xs={8} sm={8}>\r\n                                        <div>\r\n                                            <Typography variant=\"caption\">Invitations</Typography>\r\n                                            <Typography variant=\"h3\">{invitationCount}</Typography>Candidates Invited\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    {/* <Grid item xs={1} sm={1} /> */}\r\n                    <Grid item xs={3} sm={3}>\r\n                        <Card className={classes.paletteBorderLeftSecondaryMain}>\r\n                            <CardContent>\r\n                                <Grid container spacing={32}>\r\n                                    <Grid item xs={3} sm={3} className={classes.verticalCenter}>\r\n                                        <Avatar variant=\"rounded\" className={classes.bgSuccessMain}>\r\n                                            <Assessment />\r\n                                        </Avatar>\r\n                                    </Grid>\r\n                                    {/* <Grid item xs={1} sm={1}></Grid> */}\r\n                                    <Grid item xs={8} sm={8}>\r\n                                        <div>\r\n                                            <Typography variant=\"caption\">Candidate Response</Typography>\r\n                                            <Typography variant=\"h3\">{totalCompletedCount}</Typography>Tests Completed\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n                <Grid container style={{marginTop: '5%'}}>\r\n                    <Grid item xs={4} sm={4}>\r\n                        <Card className={classNames(classes.paletteDashboardBox)}>\r\n                            <CardHeader className={classes.paletteBorderBottomSuccessLight} title={<Typography variant=\"h6\">Candidate Performance</Typography> }></CardHeader>\r\n                            <CardContent className={classNames(classes.dashboardHeight)}>\r\n                                <List>\r\n                                    <ListItem>\r\n                                        <ListItemText \r\n                                            primary={<div>\r\n                                                <Typography variant=\"subtitle1\">C#</Typography>\r\n                                            <BorderLinearProgressPrimary variant=\"determinate\" value={60} />\r\n                                            </div>}\r\n                                            secondary={<Typography variant=\"caption\">% of candidates hired</Typography>} />\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText primary={<div>\r\n                                                <Typography variant=\"subtitle1\">Data Analyst</Typography>\r\n                                            <BorderLinearProgressWarning variant=\"determinate\" value={40} />\r\n                                            </div>}\r\n                                                secondary={<Typography variant=\"caption\">% of candidates hired</Typography>} />\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText \r\n                                            primary={<div>\r\n                                                <Typography variant=\"subtitle1\">Angular</Typography>\r\n                                            <BorderLinearProgressInfo variant=\"determinate\" value={80} />\r\n                                            </div>}\r\n                                            secondary={<Typography variant=\"caption\">% of candidates hired</Typography>} />\r\n                                    </ListItem>\r\n                                    <ListItem>\r\n                                        <ListItemText\r\n                                            primary={<div>\r\n                                                <Typography variant=\"subtitle1\">Java</Typography>\r\n                                            <BorderLinearProgressSuccess variant=\"determinate\" value={50} />\r\n                                            </div>}\r\n                                            secondary={<Typography variant=\"caption\">% of candidates hired</Typography>} />\r\n                                    \r\n                                    </ListItem>\r\n                                </List>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={1}></Grid>\r\n                    <Grid item xs={3} sm={3}>\r\n                        {!recentResponses && <LoadingComponent /> }\r\n                        {recentResponses && recentResponses.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No recent candidate actions </Typography> }\r\n                        {completedTests && completedTests.length > 0 && \r\n                        <Card className={classNames(classes.paletteDashboardBox)}>\r\n                            <CardHeader \r\n                                action={\r\n                                    <InternalLink title=\"View All\" to={ {pathname: \"/invitations\"} }>\r\n                                        <Launch  variant=\"filled\" color=\"primary\" />\r\n                                    </InternalLink>\r\n                                        } \r\n                                className={classes.paletteBorderBottomSuccessLight} title={<Typography variant=\"h6\">Completed Tests</Typography> }></CardHeader>\r\n                            <CardContent className={classNames(classes.dashboardHeight)}>\r\n                            <List>\r\n                            <ListItem>\r\n                                    <Grid container spacing={16}>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText primary=\"Candidate\" />\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText primary=\"Completed\" />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={2} sm={2}>\r\n                                        </Grid> */}\r\n                                    </Grid>\r\n                            </ListItem>\r\n                            {\r\n                                completedTests.map((invitation, index) => {\r\n                                // let candidateResponseStatusText = `${invitation.candidateName} completed test on ${invitation.completedOn}`;\r\n                                // if(invitation.invitationStatus !== 'COMPLETED') {\r\n                                //     candidateResponseStatusText = `${invitation.candidateName} yet to take test`;\r\n                                // }\r\n                                return(\r\n                                <ListItem>\r\n                                    <Grid container spacing={16}>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText secondary={invitation.candidateName} />\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText secondary={getDateTime(invitation.completedOn, true)} />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={2} sm={2}>\r\n                                                <InternalLink to={ {pathname: \"/invitations\"} }>\r\n                                                    <Launch variant=\"filled\" color=\"primary\" />\r\n                                                </InternalLink>\r\n                                        </Grid> */}\r\n                                    </Grid>\r\n                                </ListItem>\r\n                                )\r\n                            })}\r\n                            </List>\r\n                            </CardContent>\r\n                        </Card>}\r\n                    </Grid>\r\n                    <Grid item xs={1} sm={1}></Grid>\r\n                    <Grid item xs={3} sm={3}>\r\n                        \r\n                    {!recentResponses && <LoadingComponent /> }\r\n                        {recentResponses && recentResponses.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No recent candidate actions </Typography> }\r\n                        {pendingTests && pendingTests.length > 0 && \r\n                        <Card className={classNames(classes.paletteDashboardBox)}>\r\n                            <CardHeader \r\n                                action={\r\n                                    <InternalLink title=\"View All\" to={ {pathname: \"/invitations\"} }>\r\n                                        <Launch  variant=\"filled\" color=\"primary\" />\r\n                                    </InternalLink>\r\n                                        } \r\n                                className={classes.paletteBorderBottomSuccessLight} title={<Typography variant=\"h6\">Pending Tests</Typography> }></CardHeader>\r\n                            <CardContent className={classNames(classes.dashboardHeight)}>\r\n                            <List>\r\n                            <ListItem>\r\n                                    <Grid container spacing={16}>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText primary=\"Candidate\" />\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText primary=\"Invited\" />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={2} sm={2}>\r\n                                        </Grid> */}\r\n                                    </Grid>\r\n                            </ListItem>\r\n                            {\r\n                                pendingTests.map((invitation, index) => {\r\n                                // let candidateResponseStatusText = `${invitation.candidateName} completed test on ${invitation.completedOn}`;\r\n                                // if(invitation.invitationStatus !== 'COMPLETED') {\r\n                                //     candidateResponseStatusText = `${invitation.candidateName} yet to take test`;\r\n                                // }\r\n                                return(\r\n                                <ListItem>\r\n                                    <Grid container spacing={16}>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText secondary={invitation.candidateName} />\r\n                                        </Grid>\r\n                                        <Grid item xs={6} sm={6}>\r\n                                            <ListItemText secondary={getDateTime(invitation.invitedOn, true)} />\r\n                                        </Grid>\r\n                                        {/* <Grid item xs={2} sm={2}>\r\n                                                <InternalLink to={ {pathname: \"/invitations\"} }>\r\n                                                    <Launch variant=\"filled\" color=\"primary\" />\r\n                                                </InternalLink>\r\n                                        </Grid> */}\r\n                                    </Grid>\r\n                                </ListItem>\r\n                                )\r\n                            })}\r\n                            </List>\r\n                            </CardContent>\r\n                        </Card>}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.dashboardReducer,\r\n    ...state.adminTestReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n    FetchTestCount: () => dispatch(FetchTestCount()),\r\n    FetchMcqCount: () => dispatch(FetchMcqCount()),\r\n    FetchInvitationCount: () => dispatch(FetchInvitationCount()),\r\n    FetchRecentResponses: () => dispatch(FetchRecentResponses()),\r\n    FetchPublicTests: () => dispatch(FetchPublicTests()),\r\n    RegisterForTest: (model) => dispatch(RegisterForTest(model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\r\n\r\nconst styles = {\r\n    card: {\r\n        textAlign: 'center'\r\n    },\r\n    cardAction: {\r\n        float: 'right'\r\n    },\r\n    cardHeader: {\r\n        borderBottom: '1px solid #3f51b5',\r\n        color: '#fff'\r\n    },\r\n    alignCenter: {\r\n        textAlign: 'center',\r\n        height: '35px',\r\n        lineHeight: '35px'\r\n    }\r\n}","import config from '../config';\r\nimport repository from '../repository';\r\nimport { FETCH_INVITES_SUCCESS, FETCH_INVITES_FAIL } from './InviteConsoleActions';\r\n\r\nexport const VIEW_TEST_COUNT = 'VIEW_TEST_COUNT';\r\nexport const VIEW_MCQ_COUNT = 'VIEW_MCQ_COUNT';\r\nexport const VIEW_INVITAION_COUNT = 'VIEW_INVITAION_COUNT';\r\nexport const FETCH_TEST_COUNT_SUCCESS = 'FETCH_TEST_COUNT_SUCCESS';\r\nexport const FETCH_TEST_COUNT_FAIL = 'FETCH_TEST_COUNT_FAIL';\r\nexport const FETCH_MCQ_COUNT_SUCCESS = 'FETCH_MCQ_COUNT_SUCCESS';\r\nexport const FETCH_MCQ_COUNT_FAIL = 'FETCH_MCQ_COUNT_FAIL';\r\nexport const FETCH_INVITATION_COUNT_SUCCESS = 'FETCH_INVITATION_COUNT_SUCCESS';\r\nexport const FETCH_INVITATION_COUNT_FAIL = 'FETCH_INVITATION_COUNT_FAIL';\r\nexport const FETCH_RECENT_RESPONSES_SUCCESS = 'FETCH_RECENT_RESPONSES_SUCCESS';\r\nexport const FETCH_RECENT_RESPONSES_FAIL = 'FETCH_RECENT_RESPONSES_FAIL';\r\n\r\nexport const FetchRecentResponses = () => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'getAllInvites';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_RECENT_RESPONSES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_RECENT_RESPONSES_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchTestCount = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'dashboard/test/count';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TEST_COUNT_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_TEST_COUNT_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\nexport const FetchMcqCount = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'dashboard/mcq/count';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_MCQ_COUNT_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_MCQ_COUNT_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\nexport const FetchInvitationCount = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'dashboard/invitation/count';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_INVITATION_COUNT_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_INVITATION_COUNT_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}","import config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const ADD_ORG_BEGIN = 'ADD_ORG_BEGIN';\r\nexport const ADD_ORG_SUCCESS = 'ADD_ORG_SUCCESS';\r\nexport const ADD_ORG_FAIL = 'ADD_ORG_FAIL';\r\nexport const DELETE_ORG_BEGIN = 'DELETE_ORG_BEGIN';\r\nexport const DELETE_ORG_SUCCESS = 'DELETE_ORG_SUCCESS';\r\nexport const DELETE_ORG_FAIL = 'DELETE_ORG_FAIL';\r\nexport const UPDATE_ORG_BEGIN = 'UPDATE_ORG_BEGIN';\r\nexport const UPDATE_ORG_SUCCESS = 'UPDATE_ORG_SUCCESS';\r\nexport const UPDATE_ORG_FAIL = 'UPDATE_ORG_FAIL';\r\nexport const SELECT_ORG = 'SELECT_ORG';\r\nexport const CURRENT_ORG_FIELD_CHANGE = 'CURRENT_ORG_FIELD_CHANGE';\r\nexport const CURRENT_ORG_FIELD_CHANGE_END = 'CURRENT_ORG_FIELD_CHANGE_END';\r\nexport const FETCH_ORGS_BEGIN = 'FETCH_ORGS_BEGIN';\r\nexport const FETCH_ORGS_SUCCESS = 'FETCH_ORGS_SUCCESS';\r\nexport const FETCH_ORGS_FAIL = 'FETCH_ORGS_FAIL';\r\n\r\nexport const CurrentOrgFieldChange = (val, field, model) => dispatch => {\r\n    switch(field)\r\n    {\r\n        case 'name':\r\n        {\r\n            model.org_meta.name = val;\r\n            dispatch({\r\n                type: CURRENT_ORG_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'city':\r\n        {\r\n            model.org_meta.city = val;\r\n            dispatch({\r\n                type: CURRENT_ORG_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'emailId':\r\n        {\r\n            model.org_meta.emailId = val;\r\n            dispatch({\r\n                type: CURRENT_ORG_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n            break;\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_ORG_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddOrg = (orgModel) => dispatch => {\r\n    \r\n        return new Promise((resolve, reject) => {\r\n            let url = config.instance.getAdminApiUrl() + 'org';\r\n            console.log('action model');\r\n            console.log(orgModel);\r\n            repository.saveData(url, orgModel)\r\n                .then((res) => {\r\n                    console.log('org saved: ' + res);\r\n                    dispatch({\r\n                        type: ADD_ORG_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                })\r\n                .then((res) => {\r\n                    resolve(true);\r\n                })\r\n                .catch((err) => {\r\n                    dispatch({\r\n                        type: ADD_ORG_FAIL,\r\n                        payload: err.statusText\r\n                    });\r\n                    reject(err);\r\n                });\r\n        })\r\n}\r\n\r\nexport const DeleteOrg = (orgModel) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'org';\r\n    repository.deleteData(url, orgModel)\r\n        .then((res) => {\r\n            dispatch(FetchOrgs());\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: DELETE_ORG_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\n\r\nexport const SelectOrg = (orgModel) => dispatch => {\r\n    console.log('select org', orgModel);\r\n    dispatch({\r\n        type: SELECT_ORG,\r\n        payload: orgModel\r\n    })\r\n}\r\n\r\nexport const UpdateOrg = (orgModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'org';\r\n        repository.updateData(url, orgModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: UPDATE_ORG_SUCCESS\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: UPDATE_ORG_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const FetchOrgs = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_ORGS_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllOrgs';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            console.log('orgs fetched');\r\n            dispatch({\r\n                type: FETCH_ORGS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_ORGS_FAIL,\r\n                payload: err.statusText\r\n            });\r\n        });\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst SnackbarComponent = (props) => {\r\n    let { openSnack } = props;\r\n    return (\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          open={openSnack}\r\n          autoHideDuration={4000}\r\n          onClose={props.handleClose}\r\n          ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n          }}\r\n          message={<span id=\"message-id\">{props.snackMessage}</span>}\r\n          action={[\r\n            <IconButton\r\n              key=\"close\"\r\n              aria-label=\"Close\"\r\n              color=\"inherit\"\r\n              onClick={props.handleClose}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>,\r\n          ]}\r\n        >\r\n        <SnackbarContent\r\n            style={styles.root}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\">\r\n                {/* <Icon /> */}\r\n                {props.snackMessage}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                key=\"close\"\r\n                aria-label=\"Close\"\r\n                color=\"inherit\"\r\n                >\r\n                <CloseIcon />\r\n                </IconButton>,\r\n            ]}\r\n            />\r\n        </Snackbar>\r\n    );\r\n}\r\nexport default SnackbarComponent;\r\nconst styles = {\r\n    root: {\r\n        backgroundColor: '#394'\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Card, Grid } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport AuthHelper from '../../AuthHelper';\r\n\r\nconst EditUser = (props) => {\r\n        let { model, UserRoles } = props;\r\n\r\n       \r\n        return (\r\n            <div>\r\n            {!model && <LoadingComponent /> } \r\n            {model &&    \r\n                <form  noValidate autoComplete=\"off\">\r\n                    <Grid container spacing={0}>\r\n                            <Grid item xs={6} sm={6}>\r\n                                <FormControl variant=\"standard\">\r\n                                   <Select\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'role', model)}\r\n                                        value={model.user_meta.role}\r\n                                        >\r\n                                        <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                        </MenuItem>\r\n                                        {UserRoles && UserRoles.length > 0 &&\r\n                                            UserRoles.map((item, index) => {\r\n                                            return (\r\n                                                <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={6} sm={6}>\r\n                            </Grid>\r\n                    </Grid>\r\n                    \r\n\r\n                </form>\r\n            }\r\n            </div>\r\n        );\r\n}\r\nconst styles = theme => ({\r\n    formControl: {\r\n        width: '70%',\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n});\r\nexport default EditUser;","import React, { Fragment, Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Delete, Edit, Save, Undo } from '@material-ui/icons';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Button, Typography, IconButton } from '@material-ui/core';\r\nimport EditUser from './EditUser';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel } from '@material-ui/core';\r\n\r\n\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\n\r\nclass UsersList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userEditIndex: -1\r\n        };\r\n    }\r\n\r\n    handleEditClick = (editIndex) => {\r\n        this.setState({\r\n            userEditIndex: editIndex\r\n        })\r\n    }\r\n\r\n    onUpdateUser = (user) => {\r\n        this.props.onUpdateUser(user);\r\n        this.setState({\r\n            userEditIndex: -1\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        let { users, orgs, UserRoles } = this.props;\r\n        let { userEditIndex } = this.state;\r\n\r\n        return (\r\n            <div>\r\n            {!users && <LoadingComponent /> }\r\n            {users && users.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No Tests Found </Typography> }\r\n            {users && users.length > 0 && \r\n            <Table>\r\n                <TableHead>\r\n                <TableRow>\r\n                    <CustomTableCell>Email</CustomTableCell>\r\n                    <CustomTableCell align=\"left\">Display Name</CustomTableCell>\r\n                    <CustomTableCell align=\"left\">Role</CustomTableCell>\r\n                    <CustomTableCell>Org</CustomTableCell>\r\n                    <CustomTableCell></CustomTableCell>\r\n                </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {users.map((user, index) => (\r\n                    <Fragment key={index}>\r\n                    {index === userEditIndex && \r\n                    <TableRow>\r\n                        <CustomTableCell align=\"left\">\r\n                            <Typography variant=\"subtitle2\" >\r\n                                {user.user_meta ? user.user_meta.emailId : ''}\r\n                            </Typography>\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Full Name\"\r\n                                        className={styles.dense}\r\n                                        value={user.user_meta.name}\r\n                                        onChange={(e) => this.this.props.onFieldChange(e.target.value, 'name', user)}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                            </FormControl>\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                            <EditUser \r\n                                model={user} \r\n                                UserRoles={UserRoles}\r\n                                onFieldChange={ (val, field, model) => this.props.onFieldChange(val, field, model) } \r\n                            />\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                                <FormControl variant=\"standard\" style={styles.formControl}>\r\n                                   <Select\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'orgId', user)}\r\n                                        value={user.user_meta.orgId ? user.user_meta.orgId : -1}\r\n                                        >\r\n                                        <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                        </MenuItem>\r\n                                        {orgs && orgs.length > 0 &&\r\n                                            orgs.map((item, index) => {\r\n                                                console.log('org item', item);\r\n                                            return (\r\n                                                <MenuItem key={index} value={item.id}>{item.org_meta.name}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                        </CustomTableCell>\r\n                        <CustomTableCell>\r\n                            <IconButton \r\n                                onClick={() => this.onUpdateUser(user)}\r\n                                edge=\"end\"\r\n                                color=\"primary\"\r\n                                >\r\n                                <Save />\r\n                            </IconButton>\r\n                            <IconButton \r\n                                // onClick={() => this.props.onUpdateUser(user)}\r\n                                edge=\"end\"\r\n                                color=\"secondary\"\r\n                                >\r\n                                <Undo />\r\n                            </IconButton>\r\n\r\n                        </CustomTableCell>\r\n                    </TableRow>\r\n                    }\r\n                    {index !== userEditIndex &&\r\n                    <TableRow>\r\n                        <CustomTableCell align=\"left\">\r\n                            <Typography variant=\"subtitle2\" >\r\n                                {user.user_meta ? user.user_meta.emailId : ''}\r\n                            </Typography>\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                            <Typography variant=\"subtitle2\" >\r\n                                {user.user_meta ? user.user_meta.name : ''}\r\n                            </Typography>\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                            {user.user_meta ? (user.user_meta.role ? user.user_meta.role.toUpperCase() : '') : ''}\r\n                        </CustomTableCell>\r\n                        <CustomTableCell align=\"left\">\r\n                            {user.org_meta ? (user.org_meta.name ? user.org_meta.name : '') : ''}\r\n                        </CustomTableCell>\r\n                        <CustomTableCell>\r\n                            <IconButton \r\n                                onClick={() => this.props.onDeleteUser(user)}\r\n                                edge=\"end\"\r\n                                color=\"inherit\"\r\n                                >\r\n                                <Delete />\r\n                            </IconButton>\r\n                            <IconButton \r\n                                onClick={() => this.handleEditClick(index)}\r\n                                edge=\"end\"\r\n                                color=\"primary\"\r\n                                >\r\n                                <Edit />\r\n                            </IconButton>\r\n                        </CustomTableCell>\r\n                    </TableRow>\r\n                    }\r\n                    </Fragment>\r\n                ))}\r\n                </TableBody>\r\n            </Table>\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n    //   backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.black,\r\n      fontSize: 18\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default UsersList;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, DialogContent, Dialog, DialogTitle, DialogActions, Divider } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Close  } from '@material-ui/icons';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport config from '../../config';\r\n\r\nclass AddUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n        \r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      this.props.onSubmit(this.props.model);\r\n      this.handleClose();\r\n    }\r\n    \r\n    render = () => {\r\n        let { model, orgs, UserRoles } = this.props;\r\n        return (\r\n            <div>\r\n            {!model && <LoadingComponent /> } \r\n            {model && \r\n            <Card>   \r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>Add User</Button>\r\n                <Dialog\r\n                fullWidth={true}\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                >\r\n                <DialogTitle onClose={this.handleClose}>Create New User</DialogTitle>\r\n                <Divider />\r\n                <DialogContent style={{padding: '4%'}}>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                                <FormControl variant=\"standard\" style={styles.formControl}>\r\n                                    <InputLabel htmlFor=\"outlined-role-simple\">\r\n                                        Role\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'role', model)}\r\n                                        value={model.user_meta.role}\r\n                                        input={\r\n                                            <OutlinedInput\r\n                                                labelWidth={85}\r\n                                                name=\"role\"\r\n                                                id=\"outlined-role-simple\"\r\n                                            />\r\n                                        }>\r\n                                        {UserRoles && UserRoles.length > 0 &&\r\n                                            UserRoles.map((item, index) => {\r\n                                            return (\r\n                                                <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl variant=\"standard\" style={styles.formControl}>\r\n                                    <InputLabel htmlFor=\"outlined-org-simple\">\r\n                                        Organization\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'orgId', model)}\r\n                                        value={model.user_meta.orgId}\r\n                                        input={\r\n                                            <OutlinedInput\r\n                                                labelWidth={85}\r\n                                                name=\"org\"\r\n                                                id=\"outlined-org-simple\"\r\n                                            />\r\n                                        }>\r\n                                        {orgs && orgs.length > 0 &&\r\n                                            orgs.map((item, index) => {\r\n                                            return (\r\n                                                <MenuItem key={index} value={item.id}>{item.org_meta.name}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-email\"\r\n                                    label=\"Email Id\"\r\n                                    className={styles.dense}\r\n                                    value={model.user_meta.emailId}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'emailId', model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-name\"\r\n                                    label=\"Full Name\"\r\n                                    className={styles.dense}\r\n                                    value={model.user_meta.name}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'name', model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                    </form>\r\n                    </DialogContent>\r\n                    <Divider />\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                        onClick={ () => this.handleSubmit(this.props.model)}>\r\n                            Create User\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Card>}\r\n        \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nexport default AddUser;","import React, { Component } from 'react';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport { SetUserInfo } from '../../actions/UserActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass LoginComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: ''\r\n        };\r\n    }\r\n    googleResponse = (response) => {\r\n        let url = config.instance.getAdminApiUrl() + 'auth/google';\r\n        axios.get(url, {\r\n          headers: {\r\n            access_token: response.accessToken\r\n          }\r\n        }).then((res) => {\r\n            console.log('res',res);\r\n            const token = res.headers['x-auth-token'];\r\n            if(token) {\r\n                this.props.SetUserInfo(res);\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorMessage: 'Wrong Credentials. Please try again.'\r\n                });    \r\n            }\r\n        }).catch((err) => {\r\n            if(this.props.history){ \r\n                this.props.history.push({\r\n                    pathname: '/userForbidden'\r\n                });\r\n            }\r\n        });\r\n    }\r\n    \r\n    render = () => {\r\n        return (\r\n            <div style={styles.container}>\r\n                {this.state.errorMessage && <div>{this.state.errorMessage}</div>}\r\n                <GoogleLogin\r\n                            clientId=\"350931387343-l9s3gs4fnmbj4rk4r4nfvh5siega0s5g.apps.googleusercontent.com\"\r\n                            buttonText=\"Login\"\r\n                            onSuccess={this.googleResponse}\r\n                            onFailure={this.googleResponse}\r\n                            cookiePolicy={'single_host_origin'}\r\n                        />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    container: {\r\n        top: '20%',\r\n        left: '25%'\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\r\n","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport LoginComponent from '../../components/lib/LoginComponent';\r\nimport LocalLoginComponent from '../../components/lib/LocalLoginComponent';\r\n\r\nconst User401 = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\">\r\n                User Not Authorized\r\n            </Typography>\r\n            <div>\r\n                {/* <LoginComponent /> */}\r\n                <LocalLoginComponent />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default User401;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {    FetchUsers, AddUser, CurrentUserFieldChange,\r\n            UpdateUser, DeleteUser, CloseSnackbar,\r\n            OpenSnackbar } from '../../actions/UserActions';            \r\nimport { FetchOrgs } from '../../actions/OrgActions';            \r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../../components/lib/SnackbarComponent';\r\nimport { Button, Card, CardHeader } from '@material-ui/core';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport UsersList from './UsersList';\r\nimport AddUserComponent from './AddUser';\r\nimport User401 from './User401';\r\nimport config from '../../config';\r\n\r\nclass UserContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n\r\n    reload = () => {\r\n        this.props.FetchUsers();\r\n        this.props.FetchOrgs();\r\n    }\r\n\r\n    onAddUser = (model) => {\r\n        this.props.AddUser(model)\r\n                .then((res) => {\r\n                    this.reload();\r\n                });\r\n    }\r\n\r\n    onDeleteUser = (model) => {\r\n        this.props.DeleteUser(model)\r\n                .then((res) => {\r\n                    this.reload();\r\n                });\r\n    }\r\n\r\n    onUpdateUser = (model) => {\r\n        this.props.UpdateUser(model)\r\n            .then((res) => {\r\n                this.reload();\r\n            });   \r\n    }\r\n\r\n    render = () => {\r\n        let { current_user, users, orgList, error } = this.props;\r\n        let user_roles = config.instance.getValue('user_roles');\r\n        let UserRoles = user_roles.split(',');\r\n\r\n        if(error) {\r\n            return(\r\n                <User401 />\r\n            )\r\n        }\r\n\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                {!current_user && <LoadingComponent />}\r\n                {current_user &&\r\n                <Card>\r\n                    <CardHeader action={\r\n                        <div>\r\n                    <AddUserComponent \r\n                        onSubmit={ (model) => this.onAddUser(model) }\r\n                        model={this.props.current_user}\r\n                        orgs={orgList}\r\n                        UserRoles={UserRoles}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentUserFieldChange(val, field, model) } \r\n                        />\r\n                           </div>\r\n                    }\r\n                    title=\"Users\"\r\n                    />\r\n                    <UsersList \r\n                        users={users} \r\n                        orgs={orgList}\r\n                        UserRoles={UserRoles}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentUserFieldChange(val, field, model) } \r\n                        onUpdateUser={ (model) => this.onUpdateUser(model) }\r\n                        onDeleteUser={ (model) => this.onDeleteUser(model) }\r\n                    />\r\n                </Card>\r\n                }\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer,\r\n    ...state.orgReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    UpdateUser: (model) => dispatch(UpdateUser(model)),\r\n    DeleteUser: (model) => dispatch(DeleteUser(model)),\r\n    AddUser: (userModel) => dispatch(AddUser(userModel)),\r\n    FetchUsers: () => dispatch(FetchUsers()),\r\n    FetchOrgs: () => dispatch(FetchOrgs()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentUserFieldChange: (val, field, model) => dispatch(CurrentUserFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserContainer);","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n// import LoginComponent from '../../components/lib/LoginComponent';\r\n// import LocalLoginComponent from '../../components/lib/LocalLoginComponent';\r\n\r\nconst UserForbidden = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" >\r\n                User Forbidden or User Not Found. \r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" >\r\n                Please check with Admin if your emailId is added to user list. \r\n            </Typography>\r\n            <div>\r\n                {/* <LoginComponent /> */}\r\n                {/* <LocalLoginComponent /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default UserForbidden;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst ResourceNotFound = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h6\" >\r\n                Not Found. \r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\nexport default ResourceNotFound;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Remove from '@material-ui/icons/Remove';\r\n\r\nconst CategoryList = (props) => {\r\n        console.log(props);\r\n        return (\r\n            <Card style={{padding: \"4%\"}}>\r\n                <CardHeader \r\n                    avatar={\r\n                        <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                            <ListIcon />\r\n                        </Avatar>\r\n                    }    \r\n                    action={\r\n                        <IconButton onClick={() => props.onSearchEnable()}>\r\n                            {!props.searchEnabled && <SearchIcon />}\r\n                            {props.searchEnabled && <CloseIcon />}\r\n                        </IconButton>\r\n                    }            \r\n                    title={`Categories ${props.categories ? \"(\"+props.categories.length+\")\" : \"\" }`}>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    {\r\n                        <Collapse in={props.searchEnabled}>\r\n                        <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                            <TextField\r\n                                id=\"outlined-name\"\r\n                                label=\"Search\"\r\n                                placeholder=\"Enter search text here\"\r\n                                value={props.searchTerm}\r\n                                onChange={(e) => props.onSearchCategory(e.target.value)}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormControl>\r\n                        </Collapse>\r\n                    }\r\n                    <List dense={true}>\r\n                        {props.categories && props.categories.length > 0\r\n                        && props.categories.map((category, index) => {\r\n                            let item = category.category_meta;\r\n                            return(\r\n                            <ListItem key={category.id}\r\n                                divider={true}\r\n                                button={true} onClick={ () => props.onCategorySelect(category) }\r\n                            >\r\n                            <ListItemText\r\n                                primary={item.title}\r\n                                secondary={item.description}\r\n                                />\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton onClick={() => props.onDeleteCategory(category)}>\r\n                                    <Remove fontSize=\"large\" color=\"secondary\" />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                            </ListItem>)\r\n                        })}\r\n                        \r\n                    </List>\r\n                {(!props.categories || props.categories.length === 0) &&\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    There are currently no categories added\r\n                </Typography>}\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n}\r\n\r\nexport default CategoryList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddCategoryComponent from '../components/Categories/AddCategory';\r\nimport CategoryList from '../components/Categories/CategoryList';\r\nimport {    AddCategory, FetchCategories, UpdateCategory, \r\n            CloseSnackbar, CurrentCategoryFieldChange,\r\n            OpenSnackbar, SelectCategory, DeleteCategory,\r\n            BeginSearch, SearchCategory } from '../actions/CategoryActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\n\r\nclass CategoryContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    componentWillUpdate = () => {\r\n        if(this.props.success_message !== '') {\r\n            this.props.FetchCategories();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps = (newprops, oldprops) => {\r\n        if(newprops.success_message !== '') {\r\n            this.props.FetchCategories();\r\n            this.props.OpenSnackbar();\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchCategories();\r\n    }\r\n\r\n    render = () => {\r\n        let categories = [];\r\n        if(this.props.search_enabled) {\r\n            categories = this.props.filteredCategories;\r\n        }\r\n        else {\r\n            categories = this.props.categoryList;\r\n        }\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <AddCategoryComponent \r\n                        onSubmit={ (model) => this.props.AddCategory(model, this.props.editMode) }\r\n                        model={this.props.current_category}\r\n                        editMode={this.props.editMode}\r\n                        onAdd={() => this.reload()}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentCategoryFieldChange(val, field, model) } />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <CategoryList categories={categories} \r\n                        onCategorySelect={ (item) => this.props.SelectCategory(item) } \r\n                        onSearchEnable={ () => this.props.BeginSearch() } \r\n                        onDeleteCategory={ (item) => this.props.DeleteCategory(item)}\r\n                        searchEnabled={this.props.search_enabled}\r\n                        searchTerm={this.props.search_term}\r\n                        onSearchCategory={ (searchTerm) => this.props.SearchCategory(searchTerm, this.props.categoryList) }/>\r\n                </Grid>\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.categoryReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddCategory: (model, editMode) => dispatch(AddCategory(model, editMode)),\r\n    UpdateCategory: (model) => dispatch(UpdateCategory(model)),\r\n    SelectCategory: (model) => dispatch(SelectCategory(model)),\r\n    DeleteCategory: (model) => dispatch(DeleteCategory(model)),\r\n    FetchCategories: () => dispatch(FetchCategories()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    BeginSearch: () => dispatch(BeginSearch()),\r\n    SearchCategory: (searchTerm, categoryList) => dispatch(SearchCategory(searchTerm, categoryList)),\r\n    CurrentCategoryFieldChange: (val, field, model) => dispatch(CurrentCategoryFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CategoryContainer);","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Remove from '@material-ui/icons/Remove';\r\n\r\nconst OrgList = (props) => {\r\n        console.log(props);\r\n        return (\r\n            <Card style={{padding: \"4%\"}}>\r\n                <CardHeader \r\n                    avatar={\r\n                        <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                            <ListIcon />\r\n                        </Avatar>\r\n                    }    \r\n                    title={`Organizations ${props.orgs ? \"(\"+props.orgs.length+\")\" : \"\" }`}>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <List dense={true}>\r\n                        {props.orgs && props.orgs.length > 0\r\n                        && props.orgs.map((org, index) => {\r\n                            let item = org.org_meta;\r\n                            return(\r\n                            <ListItem key={org.id}\r\n                                divider={true}\r\n                                button={true} onClick={ () => props.onOrgSelect(org) }\r\n                            >\r\n                            <ListItemText\r\n                                primary={`${item.name} (${item.city})`}\r\n                                secondary={item.emailId}\r\n                                />\r\n                            </ListItem>)\r\n                        })}\r\n                        \r\n                    </List>\r\n                {(!props.orgs || props.orgs.length === 0) &&\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    There are currently no organizations added\r\n                </Typography>}\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n}\r\n\r\nexport default OrgList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Loading from '../../components/lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\nconst AddOrgComponent = (props) => {\r\n    let { model } = props;\r\n    let display = (props && props.editMode) ? 'block' : 'none';\r\n\r\n    return (\r\n        <Card style={{padding: \"4%\"}}>\r\n        {!model && <Loading />} \r\n        {model &&    \r\n            <form  noValidate autoComplete=\"off\">\r\n                <CardHeader \r\n                avatar={\r\n                    <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                        {!props.editMode && <AddIcon />}\r\n                        {props.editMode && <EditIcon />}\r\n                    </Avatar>\r\n                    }\r\n                    action={\r\n                        <Button style={{display: display}} onClick={() => props.onAdd()}>Add New</Button>\r\n                    }\r\n                    title={props.editMode ? \r\n                            \"Edit Organization\" :\r\n                            \"Add Organization\"} \r\n                            >\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Name\"\r\n                            value={model.org_meta ? model.org_meta.name : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'name', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-city\"\r\n                            label=\"City\"\r\n                            value={model.org_meta ? model.org_meta.city : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'city', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-email\"\r\n                            label=\"Org Admin Email\"\r\n                            value={model.org_meta ? model.org_meta.emailId : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'emailId', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                    <br></br>\r\n                </CardContent>\r\n                <CardActions style={styles.actionButton}>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\" \r\n                                onClick={ () => props.onSubmit(props.model) }>\r\n                        {props.editMode ? 'Update' : 'Submit'}\r\n                    </Button>\r\n                </CardActions>\r\n            </form>}\r\n        </Card>\r\n    );\r\n}\r\nexport default AddOrgComponent;\r\nconst styles={\r\n    formControl: {\r\n        width: '90%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button, Card, CardHeader, CardContent, CardActions } from '@material-ui/core';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\nimport OrgList from './OrgList';\r\nimport AddOrgComponent from './AddOrg';\r\nimport {    AddOrg, FetchOrgs, UpdateOrg, \r\n            CurrentOrgFieldChange,\r\n            SelectOrg, DeleteOrg\r\n        } from '../../actions/OrgActions';\r\n\r\nclass OrgContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchOrgs();\r\n    }\r\n\r\n    onAddOrg = (model) => {\r\n        if(this.props.editMode) {\r\n            this.props.UpdateOrg(model)\r\n                    .then((res) => {\r\n                        this.reload();\r\n                    })\r\n        }\r\n        else {\r\n            this.props.AddOrg(model)\r\n                    .then((res) => {\r\n                        this.reload();\r\n                    })\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        let { orgList, current_org } = this.props;\r\n        console.log('current_org', current_org);\r\n\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <AddOrgComponent\r\n                        onSubmit={ (model) => this.onAddOrg(model) }\r\n                        model={current_org}\r\n                        editMode={this.props.editMode}\r\n                        onAdd={() => this.reload()}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentOrgFieldChange(val, field, model) } />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <OrgList \r\n                        orgs={orgList} \r\n                        onOrgSelect={ (item) => this.props.SelectOrg(item) } \r\n                        />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.orgReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchOrgs: () => dispatch(FetchOrgs()),\r\n    AddOrg: (model) => dispatch(AddOrg(model)),\r\n    UpdateOrg: (model) => dispatch(UpdateOrg(model)),\r\n    SelectOrg: (model) => dispatch(SelectOrg(model)),\r\n    CurrentOrgFieldChange: (val, field, model) => dispatch(CurrentOrgFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgContainer);\r\nconst styles = {\r\n    actionButton: {\r\n        marginLeft: '80%'\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, Typography } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Loading from '../lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst AddSkillComponent = (props) => {\r\n    let { model } = props;\r\n    let display = (props && props.editMode) ? 'block' : 'none';\r\n    return (\r\n        <Card style={{padding: \"4%\"}}>\r\n        {!model && <Loading />} \r\n        {model &&    \r\n            <form  noValidate autoComplete=\"off\">\r\n                <CardHeader \r\n                avatar={\r\n                    <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                       <AddIcon />\r\n                    </Avatar>\r\n                    }\r\n                    title=\"Add Skill\">\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Skill\"\r\n                            value={model.skill}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'skill', props.model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <br></br>\r\n                </CardContent>\r\n                <CardActions style={styles.actionButton}>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\" \r\n                                onClick={ () => props.onSubmit(props.model) }>\r\n                        Submit\r\n                    </Button>\r\n                </CardActions>\r\n            </form>}\r\n        </Card>\r\n    );\r\n}\r\nexport default AddSkillComponent;\r\nconst styles={\r\n    formControl: {\r\n        width: '90%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst SkillList = (props) => {\r\n        console.log(props);\r\n        return (\r\n            <Card style={{padding: \"4%\"}}>\r\n                <CardHeader \r\n                    avatar={\r\n                        <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                            <ListIcon />\r\n                        </Avatar>\r\n                    }    \r\n                    action={\r\n                        <IconButton onClick={() => props.onSearchEnable()}>\r\n                            {!props.searchEnabled && <SearchIcon />}\r\n                            {props.searchEnabled && <CloseIcon />}\r\n                        </IconButton>\r\n                    }            \r\n                    title={`Skills ${props.skills ? \"(\"+props.skills.length+\")\" : \"\" }`}>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    {\r\n                        <Collapse in={props.searchEnabled}>\r\n                        <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                            <TextField\r\n                                id=\"outlined-name\"\r\n                                label=\"Search\"\r\n                                placeholder=\"Enter search text here\"\r\n                                value={props.searchTerm}\r\n                                onChange={(e) => props.onSearchSkill(e.target.value)}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormControl>\r\n                        </Collapse>\r\n                    }\r\n                    <List dense={true}>\r\n                        {props.skills && props.skills.length > 0\r\n                        && props.skills.map((skillItem, index) => {\r\n                            let item = skillItem.skill_meta;\r\n                            return(\r\n                            <Chip label={item.skill} key={skillItem.id}\r\n                                style={styles.chip}\r\n                                avatar={\r\n                                    <Avatar>\r\n                                        {item.skill ? item.skill[0] : 'S'}\r\n                                    </Avatar>   \r\n                                }/>\r\n                            )\r\n                        })}\r\n                        \r\n                    </List>\r\n                {(!props.skills || props.skills.length === 0) &&\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    There are currently no skills added\r\n                </Typography>}\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n}\r\n\r\nexport default SkillList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    },\r\n    chip: {\r\n        margin: 10\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddSkillComponent from '../components/Skills/AddSkill';\r\nimport SkillList from '../components/Skills/SkillList';\r\nimport {    AddSkill, FetchSkills,\r\n            CloseSnackbar, CurrentSkillFieldChange,\r\n            OpenSnackbar,\r\n            BeginSearch, SearchSkill } from '../actions/SkillActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\n\r\nclass SkillContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        console.log('did mount');\r\n        this.reload();\r\n    }\r\n\r\n    componentWillUpdate = () => {\r\n     console.log('container updated');\r\n        if(this.props.success_message !== '') {\r\n            this.props.FetchSkills();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps = (newprops, oldprops) => {\r\n        console.log('receiving props');\r\n        console.log(newprops);\r\n        if(newprops.success_message !== '') {\r\n            this.props.FetchSkills();\r\n            this.props.OpenSnackbar();\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchSkills();\r\n    }\r\n\r\n    render = () => {\r\n        console.log('container render');\r\n        console.log(this.props);\r\n        let skills = [];\r\n        if(this.props.search_enabled) {\r\n            skills = this.props.filteredSkills;\r\n        }\r\n        else {\r\n            skills = this.props.skillList;\r\n        }\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <AddSkillComponent \r\n                        onSubmit={ (model) => this.props.AddSkill(model, this.props.editMode) }\r\n                        model={this.props.current_skill}\r\n                        onAdd={() => this.reload()}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentSkillFieldChange(val, field, model) } />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <SkillList skills={skills} \r\n                        onSearchEnable={ () => this.props.BeginSearch() } \r\n                        searchEnabled={this.props.search_enabled}\r\n                        searchTerm={this.props.search_term}\r\n                        onSearchSkill={ (searchTerm) => this.props.SearchSkill(searchTerm, this.props.skillList) }/>\r\n                </Grid>\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.skillReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddSkill: (model, editMode) => dispatch(AddSkill(model, editMode)),\r\n    FetchSkills: () => dispatch(FetchSkills()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    BeginSearch: () => dispatch(BeginSearch()),\r\n    SearchSkill: (searchTerm, categoryList) => dispatch(SearchSkill(searchTerm, categoryList)),\r\n    CurrentSkillFieldChange: (val, field, model) => dispatch(CurrentSkillFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SkillContainer);","import config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const ADD_QUESTION_TO_TEST = 'ADD_QUESTION_TO_TEST';\r\nexport const REMOVE_QUESTION_FROM_TEST = 'REMOVE_QUESTION_FROM_TEST';\r\nexport const PUBLISH_TEST_SUCCESS = 'PUBLISH_TEST_SUCCESS';\r\nexport const PUBLISH_TEST_FAIL = 'PUBLISH_TEST_FAIL';\r\nexport const FETCH_TEST_SUCCESS = 'FETCH_TEST_SUCCESS';\r\nexport const FETCH_TEST_FAIL = 'FETCH_TEST_FAIL';\r\nexport const FETCH_TEST_MCQS_SUCCESS = 'FETCH_TEST_MCQS_SUCCESS';\r\nexport const FETCH_TEST_MCQS_FAIL = 'FETCH_TEST_MCQS_FAIL';\r\nexport const FETCH_TEST_CANDIDATES_SUCCESS = 'FETCH_TEST_CANDIDATES_SUCCESS';\r\nexport const FETCH_TEST_CANDIDATES_FAIL = 'FETCH_TEST_CANDIDATES_FAIL';\r\nexport const TEST_PUBLISHED = 'TEST_PUBLISHED';\r\nexport const TEST_SETTINGS_FIELD_CHANGE = 'TEST_SETTINGS_FIELD_CHANGE';\r\nexport const TEST_SETTINGS_UPDATE_SUCCESS = 'TEST_SETTINGS_UPDATE_SUCCESS';\r\nexport const TEST_SETTINGS_UPDATE_FAIL = 'TEST_SETTINGS_UPDATE_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nvar history = {};\r\nexport const SetHistory = (propsHistory) => dispatch => {\r\n    history = propsHistory;\r\n}\r\n\r\nexport const SettingsFieldChange = (val, field, model) => dispatch => {\r\n    if(model && model.test_meta){\r\n        if(!model.test_meta.settings) {\r\n            model.test_meta.settings = {};\r\n        }\r\n    }\r\n    switch(field)\r\n    {\r\n        case 'emailSubject':\r\n        {\r\n            model.test_meta.settings.emailSubject = val;\r\n            dispatch({\r\n                type: TEST_SETTINGS_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'testVisibility':\r\n        {\r\n            model.test_meta.settings.testVisibility = val;\r\n            dispatch({\r\n                type: TEST_SETTINGS_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'videoMonitoringRequired':\r\n        {\r\n            model.test_meta.settings.videoMonitoringRequired = val;\r\n            dispatch({\r\n                type: TEST_SETTINGS_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const FetchTest = (testId) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'getTest' + '?testId=' + testId;\r\n        repository.getData(url, history)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: FETCH_TEST_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: FETCH_TEST_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n\r\n    })\r\n}\r\n\r\nexport const LoadTestMcqs = (testId) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + `getMcqsByTestId?testId=${testId}`;\r\n        repository.getData(url)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: FETCH_TEST_MCQS_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(true);\r\n            }).catch((err) => {\r\n                dispatch({\r\n                    type: FETCH_TEST_MCQS_FAIL,\r\n                    payload: err\r\n                })\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const LoadTestCandidates = (testId) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + `getCandidatesByTestId?testId=${testId}`;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TEST_CANDIDATES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        }).catch((err) => {\r\n            dispatch({\r\n                type: FETCH_TEST_CANDIDATES_FAIL,\r\n                payload: err\r\n            })\r\n        });\r\n}\r\n\r\nexport const LoadTestStudents = (testId) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + `getStudentsByTestId?testId=${testId}`;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TEST_CANDIDATES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        }).catch((err) => {\r\n            dispatch({\r\n                type: FETCH_TEST_CANDIDATES_FAIL,\r\n                payload: err\r\n            })\r\n        });\r\n}\r\n\r\nexport const AddMcqToTest = (mcqItem, testModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'test';\r\n\r\n        if (!testModel.test_meta.selectedMcqs) {\r\n            testModel.test_meta.selectedMcqs = [];\r\n        }\r\n        let mcqList = testModel.test_meta.selectedMcqs;\r\n        let filterIndex = testModel.test_meta.selectedMcqs.findIndex(item => item.id === mcqItem.id);\r\n        if (filterIndex !== undefined && filterIndex > -1) {\r\n            return;\r\n        }\r\n        else {\r\n            testModel.test_meta.selectedMcqs.push({\r\n                mcqId: mcqItem.id\r\n            });\r\n        }\r\n        repository.updateData(url, testModel, history)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: ADD_QUESTION_TO_TEST,\r\n                    payload: res.data\r\n                });\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n\r\n    })\r\n}\r\n\r\nexport const RemoveMcqFromTest = (mcqItem, testModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'test';\r\n\r\n        if (!testModel.test_meta.selectedMcqs) {\r\n            testModel.test_meta.selectedMcqs = [];\r\n        }\r\n        let mcqList = testModel.test_meta.selectedMcqs;\r\n        let filterIndex = testModel.test_meta.selectedMcqs.findIndex(item => {\r\n            return item.mcqId === mcqItem.id\r\n        });\r\n        if (filterIndex !== undefined && filterIndex > -1) {\r\n            console.log(`removed item: ${mcqItem.id}`);\r\n            testModel.test_meta.selectedMcqs.splice(filterIndex, 1);\r\n        }\r\n        else {\r\n            console.log(`could not find item to remove: ${mcqItem.id}`);\r\n            return;\r\n        }\r\n        repository.updateData(url, testModel, history)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: REMOVE_QUESTION_FROM_TEST,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in removing mcq from test', err);\r\n                reject(err);\r\n            });\r\n    });\r\n}\r\n\r\nexport const PublishTest = (testModel) => dispatch => {\r\n\r\n    let url = config.instance.getAdminApiUrl() + 'test';\r\n    testModel.test_meta.status = 'published';\r\n    repository.updateData(url, testModel, history)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: TEST_PUBLISHED,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: PUBLISH_TEST_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n\r\n}\r\n\r\nexport const UpdateTestSettings = (testModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n    let url = config.instance.getAdminApiUrl() + 'test';\r\n    repository.updateData(url, testModel, history)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: TEST_SETTINGS_UPDATE_SUCCESS,\r\n                payload: res.data\r\n            });\r\n            resolve(true);\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: TEST_SETTINGS_UPDATE_SUCCESS,\r\n                payload: err\r\n            });\r\n            reject(err);\r\n        });\r\n    });\r\n\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport { Typography, Avatar } from '@material-ui/core';\r\nimport { EscapeSpecialCharacters } from '../../common/HelperFunctions';\r\n\r\nconst AnswerOptions = (props) => {\r\n        return (\r\n            <div>\r\n                <Typography variant=\"caption\">Choices</Typography>\r\n                <List dense={true}>\r\n                        {props.choices && props.choices.length > 0\r\n                        && props.choices.map((item, index) => {\r\n                            return(\r\n                            <ListItem key={index}\r\n                                divider={true}\r\n                                button={false} onClick={ () => props.onChoiceSelect && props.onChoiceSelect(item) }\r\n                            >\r\n                            <ListItemIcon>\r\n                                <Avatar>\r\n                                    {item.key}\r\n                                </Avatar>\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                // primary={item.content}\r\n                                primary={\r\n                                    <div\r\n                                        dangerouslySetInnerHTML={{\r\n                                            __html: EscapeSpecialCharacters(item.content)\r\n                                        }}>\r\n                                    </div>\r\n                                }\r\n                                secondary={item.isCorrect ? 'Correct' : 'Wrong'}\r\n                                />\r\n                            </ListItem>)\r\n                        })}\r\n                        \r\n                </List>\r\n\r\n            </div>\r\n        );\r\n}\r\nexport default AnswerOptions;\r\n\r\n// const getFormattedContent = (content) => {\r\n//     return (\r\n//     )\r\n// }","import React, { Component } from 'react';\r\nimport { Card, CardContent, CardActions, ListItem, ListItemText, \r\n        ListItemSecondaryAction, IconButton, Slide,\r\n        Dialog, DialogTitle, DialogContent, Divider,\r\n        Typography, \r\n        DialogActions,\r\n        Button,\r\n        Checkbox} from '@material-ui/core';\r\nimport { AddBox, Close, Remove, Edit, Delete } from '@material-ui/icons';\r\nimport AnswerOptions from '../../components/Mcq/AnswerOptions';\r\nimport { EscapeSpecialCharacters } from '../../common/HelperFunctions';\r\n\r\nconst Transition = (props) => {\r\n    return <Slide direction=\"up\" {...props} />\r\n}\r\n\r\nclass McqItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n    \r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log('handle close');\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleDelete = () => {\r\n        this.props.onDeleteMcq();\r\n        this.setState({ open: false });\r\n    }\r\n\r\n    handleChange = (mcq) => {\r\n        console.log('selected', mcq);\r\n        this.props.markForDeletion(mcq);\r\n    }\r\n\r\n    render = () => {\r\n        let { mcqItem, isSelectable, isEditable, \r\n                isDeletable, isChecked } = this.props;\r\n        let mcq = mcqItem ? mcqItem.mcq_meta : null; \r\n        // console.log(`mcq: ${JSON.parse(mcq)}`);\r\n        let questionOrderIndex = '';\r\n        if(mcqItem && mcqItem.questionOrderIndex) {\r\n            questionOrderIndex = `${mcqItem.questionOrderIndex + 1}`;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            \r\n            {mcq && \r\n                <ListItem \r\n                    divider={true} \r\n                    onClick={this.handleClickOpen}\r\n                    button={true}\r\n                    >\r\n                    <ListItemText \r\n                        primary={ mcq.question ? mcq.question : mcq.description }\r\n                        secondary={ \r\n                            `Q ${questionOrderIndex}: ${mcq.category} - ${mcq.skill ? mcq.skill : `${mcq.grade} Chapter No:${mcq.chapterNo}` } ` } >\r\n                    </ListItemText>\r\n                    {isSelectable && \r\n                    <ListItemSecondaryAction>\r\n                        <IconButton onClick={() => this.props.onAddMcqToTest()}>\r\n                            {!mcq.selected && \r\n                            <AddBox fontSize=\"large\" color=\"secondary\" />\r\n                            }\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>}\r\n                    {isDeletable &&\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton onClick={() => this.props.onRemoveMcqFromTest()}>\r\n                            <Remove fontSize=\"large\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>}\r\n                    {isEditable && \r\n                    <ListItemSecondaryAction>\r\n                        <Checkbox checked={isChecked} onChange={() => this.handleChange(mcq)} value=\"checkedA\" />\r\n                        <IconButton onClick={() => this.props.onEditClick(mcq)}>\r\n                            <Edit fontSize=\"small\" color=\"secondary\" />\r\n                        </IconButton>\r\n                    </ListItemSecondaryAction>}\r\n                </ListItem>\r\n            }\r\n            {mcq &&\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    fullScreen\r\n                    style={{left: '20%', right: '20%', top: '10%', bottom: '10%' }}\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    <DialogTitle onClose={this.handleClose}>\r\n                        <Typography variant=\"caption\">\r\n                            {mcq.question}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\">\r\n                            {`${mcq.category} - ${mcq.skill ? mcq.skill : `${mcq.grade} Chapter No:${mcq.chapterNo}`}`}\r\n                        </Typography>\r\n                        <IconButton onClick={this.handleClose} style={{right: '4%', top: '1%', position:'absolute'}}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent style={{padding: '4%'}}>\r\n                        {/* <p>{this.htmlDecode(mcq.description)}</p> */}\r\n                        <div\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: EscapeSpecialCharacters(mcq.description)\r\n                            }}>\r\n                        </div>\r\n                        <AnswerOptions choices={mcq.choices}/>\r\n                    </DialogContent>\r\n                    {isEditable &&\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={this.handleDelete} >\r\n                            Delete\r\n                        </Button>\r\n                    </DialogActions>\r\n                    }\r\n                </Dialog>\r\n            }\r\n            </div>\r\n                \r\n        );  \r\n    }\r\n}\r\nexport default McqItem;","import React from 'react';\r\nimport { Typography, List } from '@material-ui/core';\r\nimport McqItem from './McqItem';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass SelectedMcqs extends React.Component {\r\n\r\n    sortMcqs = (mcqs) => {\r\n        return mcqs.sort((a, b) => b.questionOrderIndex - a.questionOrderIndex);\r\n    }\r\n\r\n    render = () => {\r\n        let { selectedMcqs } = this.props;\r\n        let orderedSelectedMcqs = [];\r\n        if(selectedMcqs){\r\n            orderedSelectedMcqs = this.sortMcqs(selectedMcqs);\r\n        }\r\n        return (\r\n            <div>\r\n            {orderedSelectedMcqs && orderedSelectedMcqs.length > 0 &&\r\n                <List>\r\n                    {orderedSelectedMcqs.map((item, index) => {\r\n                        console.log('orderedmcqs', item);\r\n                        return (\r\n                            <McqItem mcqItem={item}  key={index}\r\n                                        onSelect={ () => this.props.openMcq(item) }\r\n                                        onRemoveMcqFromTest={ () => this.props.onRemoveMcqFromTest(item) }\r\n                                        isDeletable={true}\r\n                                        isSelectable={false} />\r\n\r\n                        );\r\n                    })}\r\n                </List>\r\n            }\r\n            {!selectedMcqs && \r\n                <Typography variant=\"subtitle1\">No questions selected</Typography>\r\n            }\r\n            {selectedMcqs && selectedMcqs.length === 0 && \r\n                <Typography variant=\"subtitle1\">No questions selected</Typography>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SelectedMcqs;","import React, { Component } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle,\r\n    Divider, DialogActions, Card, CardHeader, Button, IconButton, CardContent, Slide, List, Typography } from '@material-ui/core';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport McqItem from './McqItem';\r\nimport { Close, Add } from '@material-ui/icons';\r\nimport repository from '../../repository';\r\n\r\nconst Transition = (props) => {\r\n    return <Slide direction=\"left\" {...props} />\r\n}\r\n\r\nclass McqSelector extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            mcqList: [],\r\n            error: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let url = config.instance.getAdminApiUrl(); // + 'getAllMcqs';\r\n        let  { grade, skill } = this.props;\r\n        // let url = config.instance.getAdminApiUrl() + 'getMcqsBySkill' + `${this.props.skill ? '?skill=' + this.props.skill : ''}`;\r\n        if(grade) { \r\n            url += `getMcqsByGrade?grade=${grade}`;\r\n        }\r\n        else {\r\n            url += `getMcqsBySkill?skill=${skill}`;\r\n        }\r\n        repository.getData(url)\r\n            .then((res) => {\r\n                console.log('MCQ fetched');\r\n                this.setState({\r\n                    mcqList: res.data,\r\n                    error: ''\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    error: err\r\n                });\r\n            });\r\n    }\r\n\r\n    onSelectMcqItem = (mcqItem) => {\r\n        this.props.onSelectMcq(mcqItem);\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log('handle close');\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render = () => {\r\n        let { onAddMcqToTest, selectedMcqs } = this.props;\r\n        let { mcqList } = this.state;\r\n        if(selectedMcqs && selectedMcqs.length > 0) {\r\n            selectedMcqs.map((item, index) => {\r\n            })\r\n        }\r\n        return (\r\n            <div>\r\n            <Card>   \r\n                <Button color=\"primary\" onClick={this.handleClickOpen}><Add /></Button>\r\n                <Dialog\r\n                TransitionComponent={Transition}\r\n                fullScreen\r\n                style={{left: '20%'}}\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                >\r\n                    <DialogTitle onClose={this.handleClose}>\r\n                        <Typography variant=\"h6\">\r\n                            Select MCQ to Add ({mcqList ? mcqList.length : 0})\r\n                        </Typography>\r\n                        <IconButton onClick={this.handleClose} style={{right: '4%', top: '1%', position:'absolute'}}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent style={{padding: '4%'}}>\r\n                    <List>\r\n                        {mcqList && mcqList.length > 0 &&\r\n                        mcqList.map((item, index) => {\r\n                            if(selectedMcqs && selectedMcqs.findIndex(mcq => {\r\n                                return (mcq.id == item.id) || (mcq.id === item.id)\r\n                            }) > -1) {\r\n                                item.selected = true;\r\n                            } else {\r\n                                item.selected = false;\r\n                            }\r\n                            return (\r\n                            <McqItem    mcqItem={item} key={index}\r\n                                        onAddMcqToTest={() => this.props.onSelectMcq(item) } \r\n                                        isSelectable={true}\r\n                                        isEditable={false} />\r\n                            );\r\n                        })}\r\n                    </List>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </Card>\r\n        \r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default McqSelector;","import React, { Component } from 'react';\r\nimport { Card, CardHeader, Button, IconButton, CardContent, Typography } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom';\r\nimport SelectedMcqs from './SelectedMcqs';\r\nimport McqSelector from'./McqSelector';\r\n\r\nclass TestConsoleQuestions extends Component {\r\n\r\n    render = () => {\r\n        let { selectedMcqs, currentTest } = this.props;\r\n        let { grade, skill } = currentTest;\r\n        return (\r\n            <Card>\r\n                {currentTest && \r\n                <CardHeader title={selectedMcqs && <Typography variant=\"subtitle1\">{selectedMcqs.length} Questions</Typography>} \r\n                    action={\r\n                        currentTest.test_meta.status==='draft' &&\r\n                        <McqSelector \r\n                            // skill={currentTest.test_meta.skill}\r\n                            grade={grade}\r\n                            skill={skill}\r\n                            onSelectMcq={(mcqItem) => this.props.onSelectMcq(mcqItem)} \r\n                            selectedMcqs={selectedMcqs}\r\n                        />\r\n                }\r\n                />\r\n                }\r\n                <CardContent>\r\n                    <SelectedMcqs\r\n                        onRemoveMcqFromTest={(mcqItem) => this.props.onRemoveMcqFromTest(mcqItem) } \r\n                        selectedMcqs={selectedMcqs} />\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default TestConsoleQuestions;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, DialogContent, Dialog, DialogTitle, DialogActions, Divider, List, ListItem, ListItemIcon, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Close, Add, Delete, Send, Search } from '@material-ui/icons';\r\nimport { FetchUsers } from '../../actions/UserActions'\r\n//import * as a from '../../../node_modules/bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nclass OpPublishTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            searchText: '',\r\n            selectedUsers: []\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.props.FetchUsers();\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log('handle close');\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    onSelectUser = (userItem) => {\r\n        let { selectedUsers } = this.state;\r\n        let newSelectedUsers = [];\r\n        if (selectedUsers && selectedUsers.length > 0) {\r\n            selectedUsers.forEach((suItem) => {\r\n                if (suItem.id !== userItem.id) {\r\n                    newSelectedUsers.push(suItem);\r\n                }\r\n            })\r\n        }\r\n        newSelectedUsers.push(userItem);\r\n        this.setState({ selectedUsers: newSelectedUsers });\r\n    }\r\n\r\n    onUnselecttUser = (userItem) => {\r\n        let { selectedUsers } = this.state;\r\n        let newSelectedUsers = [];\r\n        if (selectedUsers && selectedUsers.length > 0) {\r\n            selectedUsers.forEach((suItem) => {\r\n                if (suItem.id !== userItem.id) {\r\n                    newSelectedUsers.push(suItem);\r\n                }\r\n            })\r\n        }\r\n        this.setState({ selectedUsers: newSelectedUsers });\r\n    }\r\n\r\n\r\n    handleSubmit = () => {\r\n        console.log('submit called', this.state.selectedUsers);\r\n        // let model = {\r\n        //     testModel: this.props.current_test,\r\n        //     selectedInvitees: this.state.selectedUsers\r\n        // }\r\n        let { currentTest } = this.props;\r\n        let model = {\r\n            testId: currentTest.id,\r\n            // emailSubject: inviteInfo.emailSubject,\r\n            invitees: []\r\n        }\r\n        let { selectedUsers } = this.state;\r\n        if(selectedUsers && selectedUsers.length > 0) {\r\n            selectedUsers.forEach((userItem) => {\r\n                let invitee = {\r\n                    // invitation_meta: {\r\n                        emailId: userItem.user_meta.emailId,\r\n                        name: userItem.user_meta.name\r\n                    // }\r\n                }\r\n                model.invitees.push(invitee);\r\n            })\r\n\r\n            this.props.onSendInvitations(model);\r\n        }\r\n        \r\n    }\r\n\r\n    render = () => {\r\n        let { users } = this.props;\r\n        users = users || [];\r\n        let filteredUsers = users.filter((userItem) => {\r\n            return userItem.user_meta.name\r\n                .toLowerCase()\r\n                .indexOf(this.state.searchText.toLowerCase()) > -1\r\n        })\r\n        // alert(filteredUsers.length);\r\n        console.log('current_test');\r\n        // console.log(model);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3\">\r\n                        <button class=\"btn btn-link\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                            Add Invitees\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-md-6\"></div>\r\n                    <div className=\"col-md-3\">\r\n                        <button class=\"btn btn-link float-right\" type=\"button\" title=\"Send Invitation to Selected Users\"\r\n                            onClick={() => this.handleSubmit(this.props.model)}>\r\n                            <Send />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <ExpansionPanel>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">Invitees</div>\r\n                    <div className=\"col-md-4\"></div>\r\n                    <div className=\"col-md-4\">Add Invitee</div>\r\n                </div>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails> */}\r\n                <div id=\"collapseExample\" className=\"row\">\r\n                    {/* <div class=\"card card-body\">\r\n                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.\r\n                    </div> */}\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"row\">\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-name\"\r\n                                    label=\"Search Invitee\"\r\n                                    value={this.state.searchText}\r\n                                    onChange={(e) => this.setState({ searchText: e.target.value })}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{\r\n                                        startAdornment: <InputAdornment position=\"start\"><Search /></InputAdornment>,\r\n                                    }}\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8\">\r\n                                {filteredUsers && filteredUsers.length > 0 &&\r\n                                    filteredUsers.map((userItem, index) => {\r\n                                        return (\r\n                                            <div className=\"list-group\">\r\n                                                <div className=\"list-group-item \">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-md-8\">\r\n                                                            {userItem.user_meta.name}\r\n                                                        </div>\r\n                                                        <div className=\"col-md-4\">\r\n                                                            <button className=\"btn link-btn\"\r\n                                                                onClick={() => this.onSelectUser(userItem)}><Add /></button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                {filteredUsers && filteredUsers.length === 0 &&\r\n                                    <div className=\"alert alert-default\">\r\n                                        No users found\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"list-group\">\r\n                            {\r\n                                this.state.selectedUsers && this.state.selectedUsers.length > 0 &&\r\n                                this.state.selectedUsers.map((userItem) => {\r\n                                    return (\r\n                                        <div className=\"list-group-item\">\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-8\">\r\n                                                    {userItem.user_meta.name}\r\n                                                </div>\r\n                                                <div className=\"col-md-4\">\r\n                                                    <button className=\"btn link-btn\"\r\n                                                        onClick={() => this.onUnselecttUser(userItem)}><Delete /></button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            {\r\n                                this.state.selectedUsers && this.state.selectedUsers.length === 0 &&\r\n                                <div className=\"alert alert-default\">\r\n                                    No users selected\r\n                            </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* </ExpansionPanelDetails>\r\n                <Divider />\r\n                <ExpansionPanelActions>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                    onClick={ () => this.handleSubmit(this.props.model)}>\r\n                        Publish & Send Invites\r\n                    </Button>\r\n                </ExpansionPanelActions>\r\n            </ExpansionPanel> */}\r\n            </>\r\n            // </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                {/* {!model && <LoadingComponent /> } \r\n            {model &&  */}\r\n                {/* <Card>    */}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>Publish Test</Button>\r\n\r\n                <Dialog\r\n                    fullWidth={true}\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    <DialogTitle onClose={this.handleClose}>Publish Test</DialogTitle>\r\n                    <Divider />\r\n                    <DialogContent style={{ padding: '4%' }}>\r\n                        <div className=\"row\">\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-name\"\r\n                                    label=\"Search Invitee\"\r\n                                    value={this.state.searchText}\r\n                                    onChange={(e) => this.setState({ searchText: e.target.value })}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-5\">\r\n                                <List>\r\n                                    {filteredUsers && filteredUsers.length > 0 &&\r\n                                        filteredUsers.map((userItem, index) => {\r\n                                            return (\r\n                                                <ListItem key={1}>\r\n                                                    <ListItemText primary={userItem.user_meta.name} />\r\n                                                    <ListItemSecondaryAction>\r\n                                                        <button className=\"btn btn-primary btn-sm\"\r\n                                                            onClick={() => this.onSelectUser(userItem)}>Add</button>\r\n                                                    </ListItemSecondaryAction>\r\n                                                </ListItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </List>\r\n                            </div>\r\n                            <div className=\"col-md-3\"></div>\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"list-group\">\r\n                                    {\r\n                                        this.state.selectedUsers && this.state.selectedUsers.length > 0 &&\r\n                                        this.state.selectedUsers.map((userItem) => {\r\n                                            return (\r\n                                                <div className=\"list-group-item bg-secondary text-white\">\r\n                                                    {userItem.user_meta.name}\r\n                                                </div>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </DialogContent>\r\n                    <Divider />\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                            onClick={() => this.handleSubmit(this.props.model)}>\r\n                            Publish & Send Invites\r\n                    </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {/* </Card> */}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchUsers: () => dispatch(FetchUsers()),\r\n    // CurrentTestFieldChange: (val, field, model) => dispatch(CurrentTestFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpPublishTest);","import React, { Component } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Card, CardHeader, CardContent } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport InviteList from '../InviteConsole/InviteList';\r\nimport OpPublishTest from '../../OnlinePortal/Tests/OpPublishTest';\r\nimport { GetCurrentUserRole } from '../../common/HelperFunctions';\r\n\r\nclass TestConsoleCandidates extends Component {\r\n\r\n    render = () => {\r\n        let { candidates } = this.props;\r\n        let userRole = GetCurrentUserRole();\r\n\r\n        return (\r\n          <>\r\n            {userRole === 'teacher' &&\r\n              <OpPublishTest {...this.props} />\r\n            }\r\n            <InviteList\r\n                {...this.props}\r\n                invitations={candidates}\r\n                />\r\n          </>\r\n        )\r\n\r\n    }\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n      backgroundColor: '#3f51b5',\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nconst StyledTableCell = withStyles(theme => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n  \r\n  const StyledTableRow = withStyles(theme => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.background.default,\r\n      },\r\n    },\r\n}))(TableRow);\r\nexport default TestConsoleCandidates;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n    Card, CardContent, CardActions, FormControl, TextField,\r\n    Button,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { getDateTime } from '../../Utils';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass TestConsoleSettings extends Component {\r\n\r\n    render = () => {\r\n        let { currentTest, classes } = this.props;\r\n        console.log('settings', currentTest);\r\n        let emailSubject = (currentTest.test_meta && currentTest.test_meta.settings && currentTest.test_meta.settings.emailSubject) || '';\r\n        let testVisibility = (currentTest && currentTest.test_meta.settings && currentTest.test_meta.settings.testVisibility) ? currentTest.test_meta.settings.testVisibility : '';\r\n        let testSkill = (currentTest && currentTest.skill) ? currentTest.skill : '';\r\n        let testGrade = (currentTest && currentTest.grade) ? currentTest.grade : '';\r\n        let testSubject = (currentTest && currentTest.subject) ? currentTest.subject : '';\r\n        let testCategory = (currentTest && currentTest.category) ? currentTest.category : '';\r\n        let testDuration = (currentTest && currentTest.test_meta && currentTest.test_meta.duration) ? currentTest.test_meta.duration : '-';\r\n        let experienceYears = (currentTest && currentTest.test_meta && currentTest.test_meta.experienceYears) ? currentTest.test_meta.experienceYears : '-';\r\n        let createdOn = (currentTest && currentTest.test_meta && currentTest.test_meta.createdOn) ? getDateTime(currentTest.test_meta.createdOn) : '-';\r\n        let createdBy = (currentTest && currentTest.user_meta && currentTest.user_meta.name) ? currentTest.user_meta.name : '-';\r\n        let videoMonitoringRequired = (currentTest && currentTest.test_meta.settings && currentTest.test_meta.settings.videoMonitoringRequired) ? currentTest.test_meta.settings.videoMonitoringRequired : false;\r\n\r\n        testSkill = testSkill || ((currentTest && currentTest.test_meta) ? currentTest.test_meta.subject : '');\r\n\r\n        \r\n        return (\r\n            <form>\r\n                {/* <Card>\r\n                    <CardContent> */}\r\n                        {/* <div className=\"row\"> */}\r\n                            {/* <div className=\"col-md-5\"> */}\r\n                                {/* <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Invitation Email Subject\"\r\n                                        value={emailSubject}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'emailSubject')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl> */}\r\n                            {/* </div>\r\n                            <div className=\"row\"> */}\r\n                                {/* <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        disabled\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Test Duration (Minutes)\"\r\n                                        value={testDuration}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'duration')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl> */}\r\n                                 <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Category</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"text\" \r\n                                                className=\"form-control\"\r\n                                                value={testCategory}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'category')}\r\n                                                />\r\n                                    </div>\r\n                                </div>\r\n                                {testCategory === 'Programming' && <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Skill</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"text\" \r\n                                                className=\"form-control\"\r\n                                                value={testSkill}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'skill')}\r\n                                                />\r\n                                    </div>\r\n                                </div>}\r\n                                {testCategory === 'Academic' && <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Grade</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"text\" \r\n                                                className=\"form-control\"\r\n                                                value={testGrade}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'grade')}\r\n                                                />\r\n                                    </div>\r\n                                </div>}\r\n                                {testCategory === 'Academic' && <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Subject</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"text\" \r\n                                                className=\"form-control\"\r\n                                                value={testSubject}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'subject')}\r\n                                                />\r\n                                    </div>\r\n                                </div>}\r\n                                 <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Test Duration (Minutes)</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"number\" \r\n                                                className=\"form-control\"\r\n                                                value={testDuration}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'duration')}\r\n                                                />\r\n                                    </div>\r\n                                </div>\r\n                                {testCategory === 'Programming' && <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Experience (Years)</label>\r\n                                    <div className=\"col-md-7\">\r\n                                        <input  type=\"number\" \r\n                                                className=\"form-control\"\r\n                                                value={experienceYears}\r\n                                                onChange={(e) => this.props.onFieldChange(e.target.value, 'experienceYears')}\r\n                                                />\r\n                                    </div>\r\n                                </div>}\r\n                                <div className=\"form-group row\">\r\n                                    <label for=\"inputEmail3\" className=\"col-md-5 col-form-label\">Test Visibility</label>\r\n                                    <div className=\"col-md-7\">\r\n                                    <select className=\"form-control\" \r\n                                        value={testVisibility}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'testVisibility')}\r\n                                        >\r\n                                    {['Public', 'InvitedCandidates'].map((item, index) => {\r\n                                    return <option key={index} value={item}>{item}</option>\r\n                                    })}\r\n                                    </select>\r\n                                    </div>\r\n                            </div>\r\n                            {/* <div className=\"col-md-3\">\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                    <Switch\r\n                                        checked={videoMonitoringRequired}\r\n                                        // onChange={handleChange}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.checked, 'videoMonitoringRequired')}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                    }\r\n                                    label=\"Video Monitoring Required\"\r\n                                />\r\n                                </FormControl>\r\n                            </div> */}\r\n                            <div class=\"form-group row\">\r\n                                <label class=\"col-md-5 col-form-label\" >\r\n                                Video Monitoring Required\r\n                                </label>\r\n                                <div className=\"col-md-7\">\r\n                                    <input className=\"form-check-input ml-1\" type=\"checkbox\" \r\n                                            checked={videoMonitoringRequired}\r\n                                            onChange={(e) => this.props.onFieldChange(e.target.checked, 'videoMonitoringRequired')}\r\n                                            />\r\n                                </div>\r\n                            </div>\r\n                            {testCategory === 'Programming' && <div className=\"form-group row\">\r\n                                <label className=\"col-md-5 col-form-label\">Invite-Email Subject</label>\r\n                                <div className=\"col-md-7\">\r\n                                    <input  type=\"text\" \r\n                                            className=\"form-control\"\r\n                                            value={emailSubject}\r\n                                            onChange={(e) => this.props.onFieldChange(e.target.value, 'emailSubject')}\r\n                                            />\r\n                                </div>\r\n                            </div>}\r\n                            <div className=\"col-md-3\"></div>\r\n                            <div className=\"col-md-3\"></div>\r\n                            \r\n                        {/* </div> */}\r\n                        <div className=\"font-italic text-right\">\r\n                            Created on {getDateTime(createdOn, true)} by {createdBy}\r\n                        </div>\r\n                    {/* </CardContent> */}\r\n                    {/* <CardActions style={styles.actionButton}> */}\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                            onClick={() => this.props.onSubmitTestSettings()}>\r\n                            Submit\r\n                        </Button>\r\n                    {/* </CardActions> */}\r\n                {/* </Card> */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default TestConsoleSettings;\r\nconst styles = {\r\n    formControl: {\r\n        width: '90%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { AppBar, Tabs, Tab, Typography, Button } from '@material-ui/core';\r\nimport TestConsoleQuestions from './TestConsoleQuestions';\r\nimport TestConsoleCandidates from './TestConsoleCandidates';\r\nimport TestConsoleSettings from './TestConsoleSettings';\r\n\r\nclass TestConsoleTabs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.selectedTabIndex || 0\r\n        };\r\n    }\r\n\r\n    handleChange = (event, value) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    render = () => {\r\n        let { value } = this.state;\r\n        value = this.props.selectedTabIndex || value;\r\n        console.log('props.selectedTabIndex', value);\r\n        let { tabs, selectedMcqs, currentTest, candidates } = this.props;\r\n        return(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Tabs variant=\"fullWidth\" value={value} \r\n                        onChange={this.handleChange}>\r\n                    <LinkTab label=\"Questions\" href=\"page1\" />\r\n                    <LinkTab label=\"Candidates\" href=\"page2\" />\r\n                    <LinkTab label=\"Details\" href=\"page3\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {value === 0 && \r\n            <TabContainer>\r\n                <TestConsoleQuestions   \r\n                            classes={this.props.classes}\r\n                            selectedMcqs={selectedMcqs} \r\n                            onSelectMcq={ (mcqItem) => this.props.onAddMcqToTest(mcqItem) } \r\n                            onRemoveMcqFromTest={ (mcqItem) => this.props.onRemoveMcqFromTest(mcqItem) } \r\n                            currentTest={currentTest}\r\n                            /> \r\n            </TabContainer>}\r\n            {value === 1 && \r\n            <TabContainer>\r\n                <TestConsoleCandidates \r\n                    {...this.props}\r\n                    // candidates={candidates}\r\n                /> \r\n            </TabContainer>}\r\n            {value === 2 && \r\n            <TabContainer>\r\n                <TestConsoleSettings\r\n                        classes={this.props.classes}\r\n                        currentTest={currentTest} \r\n                        onFieldChange={(val, field) => this.props.onSettingsFieldChange(val, field)}\r\n                        onSubmitTestSettings={() => this.props.onSubmitTestSettings()} /> \r\n            </TabContainer>}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst TabContainer = (props) => {\r\n    return (\r\n      <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n        {props.children}\r\n      </Typography>\r\n    );\r\n}\r\n\r\nconst LinkTab = (props) => {\r\n    return <Tab onClick={event => event.preventDefault()} {...props} />;\r\n}\r\nfunction a11yProps(index) {\r\n    return {\r\n      id: `nav-tab-${index}`,\r\n      'aria-controls': `nav-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\nexport default TestConsoleTabs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {    FetchTest, AddMcqToTest, PublishTest, CloseSnackbar, SetHistory,\r\n    RemoveMcqFromTest, LoadTestMcqs, LoadTestCandidates, LoadTestStudents, OpenSnackbar,\r\n    SettingsFieldChange, UpdateTestSettings } from '../../actions/TestConsoleActions';            \r\nimport { SendInvite, EvaluateResults } from '../../actions/InviteConsoleActions';\r\n// import Link from '@material-ui/core/Link';\r\nimport { Link } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../../components/lib/SnackbarComponent';\r\nimport TestConsoleTabs from './TestConsoleTabs';\r\nimport { Button, Card, CardHeader } from '@material-ui/core';\r\nimport TestConsoleQuestions from './TestConsoleQuestions';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { GetCurrentUserRole } from '../../common/HelperFunctions';\r\nimport { DoneAll, ArrowBack } from '@material-ui/icons';\r\n\r\nclass TestConsoleContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snackOpen: false,\r\n            snackMessage: ''\r\n        };\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        this.props.SetHistory(this.props.history);\r\n        this.reload();\r\n    }\r\n\r\n    componentWillReceiveProps = (newprops, oldprops) => {\r\n        if(newprops.success_message !== '' && newprops.success_message !== undefined) {\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        let { state } = this.props.location;\r\n        if(state){\r\n            this.props.LoadTestMcqs(state.testId);\r\n            this.props.FetchTest(state.testId, this.props.history)\r\n                    .then(() => {\r\n                        if(this.props.current_test.category === 'Academic') {\r\n                            this.props.LoadTestStudents(state.testId);\r\n                        }\r\n                        else {\r\n                            this.props.LoadTestCandidates(state.testId);\r\n                        }\r\n                    })\r\n        }\r\n    }\r\n\r\n    onAddTest = (model) => {\r\n        this.props.AddTest(model, this.props.editMode)\r\n    }\r\n\r\n    onAddMcqToTest = (mcqItem) => {\r\n        console.log('adding mcq: ', mcqItem);\r\n        let { current_test } = this.props;\r\n        this.props.AddMcqToTest(mcqItem, this.props.current_test)\r\n                .then((res) => {\r\n                    this.props.LoadTestMcqs(current_test.id)\r\n                    .then(() => {\r\n                        this.setState({\r\n                            snackOpen: true,\r\n                            snackMessage: `Test updated - ${this.props.selectedMcqs ? this.props.selectedMcqs.length : 0} MCQs`\r\n                        });\r\n                    })\r\n                });\r\n    }\r\n    \r\n    onRemoveMcqFromTest = (mcqItem) => {\r\n        let { current_test } = this.props;\r\n        this.props.RemoveMcqFromTest(mcqItem, this.props.current_test)\r\n                    .then((res) => {\r\n                        this.props.LoadTestMcqs(current_test.id) \r\n                        .then(() => {\r\n                            this.setState({\r\n                                snackOpen: true,\r\n                                snackMessage: `Test updated - ${this.props.selectedMcqs ? this.props.selectedMcqs.length : 0} MCQs`\r\n                            });\r\n                    })\r\n                })\r\n    }\r\n\r\n    onPublish = () => {\r\n        this.props.PublishTest(this.props.current_test);\r\n        this.reload();\r\n    }\r\n\r\n    handleSettingsFieldChange = (val, field) => {\r\n        this.props.SettingsFieldChange(val, field, this.props.current_test);\r\n    }\r\n    \r\n    submitTestSettings = () => {\r\n        this.props.UpdateTestSettings(this.props.current_test)\r\n        .then((res) => {\r\n            this.setState({\r\n                snackOpen: true,\r\n                snackMessage: 'Settings saved'\r\n            });\r\n        });\r\n    }\r\n\r\n    sendInvites = (model) => {\r\n        this.props.SendInvite(model)\r\n            .then(() => {\r\n                this.setState({\r\n                    snackOpen: true,\r\n                    snackMessage: 'Invitations sent'\r\n                });\r\n                this.props.LoadTestCandidates(model.testId);\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    snackOpen: true,\r\n                    snackMessage: 'Could not send invites. Please try later.'\r\n                });\r\n            })\r\n    }\r\n\r\n    evaluateResults = (responseId) => {\r\n        let { current_test } = this.props;\r\n        this.props.EvaluateResults(responseId)\r\n        .then(() => {\r\n            this.setState({\r\n                snackOpen: true,\r\n                snackMessage: 'Evaluation done successfully'\r\n            });\r\n            this.props.LoadTestCandidates(current_test.id);\r\n        })\r\n        .catch((err) => {\r\n            this.setState({\r\n                snackOpen: true,\r\n                snackMessage: 'Could not evaluate now. Please try later.'\r\n            });\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        let { current_test, selectedMcqs, candidates, classes } = this.props;\r\n        if(current_test && current_test.selectedMcqs) {\r\n            console.log('current_test',current_test);\r\n        }\r\n        let { state } = this.props.location;\r\n        let selectedTabIndex = (state && state.selectedTabIndex) ? state.selectedTabIndex : 0;\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                {!current_test && <LoadingComponent />}\r\n                {current_test &&\r\n                <Card>\r\n                    <CardHeader action={\r\n                        <div>\r\n                        {current_test.test_meta.status === 'draft' && \r\n                        current_test.test_meta.selectedMcqs && \r\n                        current_test.test_meta.selectedMcqs.length > 0 &&\r\n                        // !this.props.publishWithInvites &&\r\n                        <Button title=\"Publish\" color=\"primary\" size=\"small\"\r\n                                onClick={this.onPublish}\r\n                        ><DoneAll /></Button>}\r\n                        <Link color=\"inherit\" to={`${GetCurrentUserRole()==='teacher' ? '/ophome' : '/tests'}`} >\r\n                            <ArrowBack />\r\n                        </Link>\r\n                        </div>\r\n                    }\r\n                    title={current_test.test_meta.testName}\r\n                     subheader={current_test.test_meta.status!=='draft' ? 'Published' : 'draft'}\r\n                    />\r\n                    <TestConsoleTabs \r\n                        classes={classes}\r\n                        tabs={tabs}\r\n                        selectedTabIndex={selectedTabIndex} \r\n                        onAddMcqToTest={(mcqItem) => this.onAddMcqToTest(mcqItem) }\r\n                        onRemoveMcqFromTest={ (mcqItem) => this.onRemoveMcqFromTest(mcqItem) } \r\n                        selectedMcqs={selectedMcqs} \r\n                        candidates={candidates}\r\n                        currentTest={current_test}\r\n                        onSettingsFieldChange={(val, field) => this.handleSettingsFieldChange(val, field)}\r\n                        onSubmitTestSettings={() => this.submitTestSettings()}\r\n                        onSendInvitations={(model) => this.sendInvites(model)}\r\n                        evaluateResults={(responseId) => this.evaluateResults(responseId) }\r\n                        />\r\n                </Card>\r\n                }\r\n                <SnackbarComponent \r\n                    openSnack={this.state.snackOpen} handleClose={() => this.setState({snackOpen: false})}\r\n                    snackMessage={this.state.snackMessage} \r\n                    /> \r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.testConsoleReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetHistory: (history) => dispatch(SetHistory(history)),\r\n    AddMcqToTest: (mcqItem, testModel) => dispatch(AddMcqToTest(mcqItem, testModel)),\r\n    RemoveMcqFromTest: (mcqItem, testModel) => dispatch(RemoveMcqFromTest(mcqItem, testModel)),\r\n    PublishTest: (testModel) => dispatch(PublishTest(testModel)),\r\n    FetchTest: (testId, history) => dispatch(FetchTest(testId, history)),\r\n    LoadTestMcqs: (testId) => dispatch(LoadTestMcqs(testId)),\r\n    LoadTestCandidates: (testId) => dispatch(LoadTestCandidates(testId)),\r\n    LoadTestStudents: (testId) => dispatch(LoadTestStudents(testId)),\r\n    SettingsFieldChange: (val, field, model) => dispatch(SettingsFieldChange(val, field, model)),\r\n    UpdateTestSettings: (testModel) => dispatch(UpdateTestSettings(testModel)),\r\n    SendInvite: (model) => dispatch(SendInvite(model)),\r\n    EvaluateResults: (responseId) => dispatch(EvaluateResults(responseId)),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n});\r\nconst tabs = [\r\n    {key: 0, content: '<Button variant=\"container\" color=\"primary\">Page {index}</Button>'},\r\n    {key: 1, content: <TestConsoleQuestions /> },\r\n    {key: 2, content: getButton}\r\n]\r\nconst getButton = (index) => {\r\n    return 'abc'+index;\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestConsoleContainer);\r\nconst styles = {\r\n    headerButton: {\r\n        marginLeft: '10px'\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Grid } from '@material-ui/core';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AnswerOptions from './AnswerOptions';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n// import CKEditor from 'ckeditor4-react';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\nconst AddAnswerOption = (props) => {\r\n        let { currentAnswer, onAnswerFieldChange, onAnswerAdd, model, \r\n            choiceEditorState, onChoiceEditorChange } = props.children;\r\n        // console.log('add option (model):');\r\n        // console.log(model);\r\n        return (\r\n            <ExpansionPanel>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                <Grid container spacing={16}>\r\n                    <Grid item xs={6} sm={6}>\r\n                        <Typography variant=\"h6\">Answer Choices</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={3}>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={3}>\r\n                        <Typography variant=\"subtitle1\" >Add Choice</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            {currentAnswer && \r\n                            <>\r\n                                {/* <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                   <CKEditor\r\n                                        data={currentAnswer.content}\r\n                                        onChange={ (e) => onAnswerFieldChange(e.editor.getData(), 'content', currentAnswer) }\r\n                                    />\r\n                                </FormControl> */}\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <Editor\r\n                                            editorState={choiceEditorState}\r\n                                            toolbarClassName=\"toolbar-class\"\r\n                                            wrapperClassName=\"wrapper-class\"\r\n                                            editorClassName=\"editor-class\"\r\n                                        // onEditorStateChange={(e) => props.onFieldChange(model.mcq_meta.description, 'description', props.model)}\r\n                                            onEditorStateChange={onChoiceEditorChange}\r\n                                        />\r\n                                </FormControl>\r\n                                <FormControlLabel style={styles.formControl}\r\n                                    control={\r\n                                    <Switch\r\n                                        // checked={currentAnswer.isCorrect}\r\n                                        onChange={ (e) => onAnswerFieldChange(e.target.checked, 'isCorrect', currentAnswer) }\r\n                                        value={currentAnswer.isCorrect}\r\n                                    />\r\n                                    }\r\n                                    label=\"Is Correct\"\r\n                                /> \r\n                            </>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <AnswerOptions choices={model.mcq_meta.choices} />\r\n                        </div>\r\n                    </div>\r\n                    {/* <div style={styles.formControl}>\r\n                    {currentAnswer && \r\n                        <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                            <TextField\r\n                                id=\"outlined-name\"\r\n                                label=\"Description\"\r\n                                multiline\r\n                                rows=\"6\"\r\n                                value={currentAnswer.content}\r\n                                onChange={ (e) => onAnswerFieldChange(e.target.value, 'content', currentAnswer) }\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                            /> \r\n                        </FormControl>\r\n                    }\r\n\r\n                    {currentAnswer && \r\n                        <FormControlLabel style={styles.formControl}\r\n                            control={\r\n                            <Switch\r\n                                // checked={currentAnswer.isCorrect}\r\n                                onChange={ (e) => onAnswerFieldChange(e.target.checked, 'isCorrect', currentAnswer) }\r\n                                value={currentAnswer.isCorrect}\r\n                            />\r\n                            }\r\n                            label=\"Is Correct\"\r\n                        /> \r\n                    }\r\n                    </div> \r\n                    <AnswerOptions choices={model.mcq_meta.choices} />\r\n                    */}\r\n                </ExpansionPanelDetails>\r\n                <Divider />\r\n                <ExpansionPanelActions>\r\n                <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={ () => onAnswerAdd(currentAnswer) } >\r\n                    Add\r\n                </Button>\r\n                </ExpansionPanelActions>\r\n            </ExpansionPanel>\r\n        );\r\n}\r\nexport default AddAnswerOption;\r\nconst styles = {\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst experienceLevel = [\r\n    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\r\n];\r\n\r\nclass SelectExperience extends Component{\r\n\r\n    state = {\r\n        open: false,\r\n        min: '',\r\n    };\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        open: false,\r\n        min: 0,\r\n        max: 10\r\n      };\r\n    }\r\n\r\n    // handleChange = (name, event) => {\r\n      handleChange = name => event => {\r\n        // this.setState({ [name]: Number(event.target.value) });\r\n        switch(name)\r\n        {\r\n          case 'min':\r\n          {\r\n            this.setState({\r\n              min: event.target.value\r\n            });\r\n            break;\r\n          }\r\n          case 'max':\r\n          {\r\n            this.setState({\r\n              max: event.target.value\r\n            });\r\n            break;\r\n          }\r\n          default:{}\r\n        }\r\n    };\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      console.log('submit called');\r\n      this.handleClose();\r\n      this.props.onSubmitExperience(this.state.min, this.state.max);\r\n    }\r\n\r\n    render = () => {\r\n    return (\r\n        <div>\r\n        <Button variant=\"outlined\" onClick={this.handleClickOpen}>Experience Level: {this.state.min} - {this.state.max}</Button>\r\n        <Dialog\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n        >\r\n          <DialogTitle>Select Experience Level</DialogTitle>\r\n          <DialogContent>\r\n            <form >\r\n                <br></br>\r\n                <br></br>\r\n              <FormControl style={styles.formControl} variant=\"outlined\" >\r\n                <InputLabel htmlFor=\"min-simple\">Minimum</InputLabel>\r\n                <Select\r\n                  value={this.state.min}\r\n                  onChange={this.handleChange('min')}\r\n                  input={<Input id=\"min-simple\" />}\r\n                >\r\n                {experienceLevel.map((item, index) => {\r\n                  return <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                })}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl style={styles.formControl} variant=\"outlined\" >\r\n                <InputLabel htmlFor=\"max-simple\">Maximum</InputLabel>\r\n                <Select\r\n                  value={this.state.max}\r\n                  onChange={this.handleChange('max')}\r\n                  input={<Input id=\"max-simple\" />}\r\n                >\r\n                {experienceLevel.map((item, index) => {\r\n                  return <MenuItem key={index} value={item}>{item}</MenuItem>\r\n                })}\r\n                </Select>\r\n              </FormControl>\r\n            </form>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={this.handleSubmit} color=\"primary\">\r\n              Ok\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n    }\r\n}\r\nconst styles = {\r\n    \r\n      formControl: {\r\n        width:\"45%\", \r\n        marginLeft:\"5%\"\r\n      }\r\n    \r\n};\r\nexport default SelectExperience;","import React, { Component } from 'react';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n\r\nimport AddAnswerOptionComponent from './AddAnswerOption';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\n// import { JForm } from 'jsonbasedui';\r\n\r\nconst AddAcademicMcq = (props) => {\r\n    let { model, editMode } = props;\r\n\r\n    return (\r\n        <div className=\"card bg-default\">\r\n            <div className=\"card-header\">\r\n                Add MCQ\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {/* {!model && <LoadingComponent />}  */}\r\n                {/* <div className=\"row\"> */}\r\n                {model && model.mcq_meta &&   \r\n                <form  noValidate autoComplete=\"off\">\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-md-3 col-form-label\">Category</label>\r\n                        <div className=\"col-md-9\">\r\n                            <input  type=\"text\" \r\n                                    className=\"form-control\"\r\n                                    disabled\r\n                                    value={'Academic'}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-md-3 col-form-label\">Topic</label>\r\n                        <div className=\"col-md-9\">\r\n                            <input  type=\"text\" \r\n                                    className=\"form-control\"\r\n                                    value={model.mcq_meta.question}\r\n                                    onChange={(e) => props.onFieldChange(e.target.value, 'question', props.model)}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label for=\"inputEmail3\" className=\"col-md-3 col-form-label\">Skill</label>\r\n                        <div className=\"col-md-9\">\r\n                        <select class=\"form-control\" \r\n                                value={model.mcq_meta.skill}\r\n                                onChange={(e) => props.onFieldChange(e.target.value, 'skill', props.model)}\r\n                            >\r\n                            {props.skills && props.skills.map((skillItem, index) => {\r\n                                    let item = skillItem.skill_meta;\r\n                                    return <option key={index} value={item.skill}>{item.skill}</option>\r\n                            })}\r\n                        </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-md-3 col-form-label\">Question</label>\r\n                        <div className=\"col-md-9\">\r\n                            <Editor\r\n                                editorState={props.questionEditorState}\r\n                                toolbarClassName=\"toolbar-class\"\r\n                                wrapperClassName=\"wrapper-class\"\r\n                                editorClassName=\"editor-class\"\r\n                                onEditorStateChange={props.onQuestionEditorStateChange}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <AddAnswerOptionComponent>\r\n                        {props}\r\n                    </AddAnswerOptionComponent>\r\n                </form>\r\n                }\r\n                </div>\r\n            {/* </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddAcademicMcq;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AddAnswerOptionComponent from './AddAnswerOption';\r\nimport SelectExperience from './SelectExperience';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n// import { withRouter } from 'react-router-dom';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\n\r\n//import CKEditor from 'ckeditor4-react';\r\n//import CKEditor from '../../../node_modules/ckeditor4-react/dist/ckeditor.js';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\nimport { GetCurrentUserRole } from '../../common/HelperFunctions';\r\nimport AddAcademicMcq from './AddAcademicMcq';\r\n\r\nconst AddMcq = (props) => {\r\n        let { model, editMode } = props;\r\n\r\n        const onSubmitExperience = (min, max) => {\r\n            props.onFieldChange(min, 'minimumExperience', props.model)\r\n            props.onFieldChange(max, 'maximumExperience', props.model)\r\n        }\r\n\r\n        if(GetCurrentUserRole() === 'teacher') {\r\n            return (\r\n                <AddAcademicMcq {...props} />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Card>\r\n        {!model && <LoadingComponent />} \r\n        {model && model.mcq_meta &&   \r\n                        <form  noValidate autoComplete=\"off\">\r\n                            <CardHeader avatar={\r\n                                <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                                    <AddIcon />\r\n                                </Avatar>\r\n                            }\r\n                            action={\r\n                                <Button color=\"primary\" size=\"large\" variant=\"outlined\"\r\n                                        onClick={() => props.history.goBack() }>\r\n                                    <KeyboardBackspace />\r\n                                </Button>\r\n                            }\r\n                            title={editMode ? \"Edit MCQ\" : \"Add MCQ\"}\r\n                            subheader=\"Multiple Choice Question\">\r\n                            </CardHeader>\r\n                            <CardContent>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <InputLabel htmlFor=\"outlined-category-simple\">\r\n                                        Category\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'category', props.model)}\r\n                                        value={model.mcq_meta.category}\r\n                                        input={\r\n                                        <OutlinedInput\r\n                                            labelWidth={65}\r\n                                            name=\"category\"\r\n                                            id=\"outlined-category-simple\"\r\n                                        />\r\n                                        }>\r\n                                        <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                        </MenuItem>\r\n                                        {props.categories && props.categories.length > 0 &&\r\n                                            props.categories.map((category, index) => {\r\n                                                let item = category.category_meta;\r\n                                            return (\r\n                                                <MenuItem key={index} value={item.title}>{item.title}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Title\"\r\n                                        className={styles.dense}\r\n                                        value={model.mcq_meta.question}\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'question', props.model)}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <InputLabel\r\n                                        htmlFor=\"outlined-skill-simple\">\r\n                                        Skill\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'skill', props.model)}\r\n                                        value={model.mcq_meta.skill}\r\n                                        input={\r\n                                        <OutlinedInput\r\n                                            labelWidth={30}\r\n                                            name=\"skill\"\r\n                                            id=\"outlined-skill-simple\"\r\n                                        />\r\n                                        }>\r\n                                        <MenuItem value=\"\">\r\n                                        <em>None</em>\r\n                                        </MenuItem>\r\n                                        {props.skills && props.skills.map((skillItem, index) => {\r\n                                            let item = skillItem.skill_meta;\r\n                                            return (\r\n                                                <MenuItem key={index} value={item.skill}>{item.skill}</MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <SelectExperience \r\n                                        onSubmitExperience={ (min, max) => onSubmitExperience(min, max) } />\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Score\"\r\n                                        type=\"number\"\r\n                                        className={styles.dense}\r\n                                        value={model.mcq_meta.score}\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'score', props.model)}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    {/* <CKEditor\r\n                                        data={model.mcq_meta.description}\r\n                                        onChange={(e) => props.onFieldChange(e.editor.getData(), 'description', props.model)}\r\n                                        /> */}\r\n                                        <Editor\r\n                                            editorState={props.questionEditorState}\r\n                                            toolbarClassName=\"toolbar-class\"\r\n                                            wrapperClassName=\"wrapper-class\"\r\n                                            editorClassName=\"editor-class\"\r\n                                        // onEditorStateChange={(e) => props.onFieldChange(model.mcq_meta.description, 'description', props.model)}\r\n                                        onEditorStateChange={props.onQuestionEditorStateChange}\r\n                                        />\r\n                                </FormControl>\r\n                                {/* <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-name\"\r\n                                        label=\"Question Description\"\r\n                                        multiline\r\n                                        rows=\"4\"\r\n                                        value={model.mcq_meta.description}\r\n                                        className={styles.dense}\r\n                                        onChange={(e) => props.onFieldChange(e.target.value, 'description', props.model)}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl> */}\r\n                                <AddAnswerOptionComponent>\r\n                                    {props}\r\n                                </AddAnswerOptionComponent>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                            <Button variant=\"contained\" size=\"large\" color=\"primary\" \r\n                                    onClick={ () => props.onSubmit(props.model)}>\r\n                                Submit\r\n                            </Button>\r\n                            </CardActions>\r\n                        </form>\r\n        }\r\n                    </Card>\r\n                   \r\n        );\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '70%',\r\n        marginBottom: '1%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nexport default AddMcq;","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\nimport { LogoutCurrentUser } from './UserActions';\r\nimport { FETCH_CATEGORIES_SUCCESS, FETCH_CATEGORIES_FAIL } from './CategoryActions';\r\n\r\nexport const ADD_MCQ_BEGIN = 'ADD_MCQ_BEGIN';\r\nexport const ADD_MCQ_SUCCESS = 'ADD_MCQ_SUCCESS';\r\nexport const ADD_MCQ_FAIL = 'ADD_MCQ_FAIL';\r\nexport const MCQ_SEARCH_END = 'MCQ_SEARCH_END';\r\nexport const MCQ_SEARCH_BEGIN = 'MCQ_SEARCH_BEGIN';\r\nexport const MCQ_SEARCH_SUCCESS = 'MCQ_SEARCH_SUCCESS';\r\nexport const UPDATE_MCQ_BEGIN = 'UPDATE_MCQ_BEGIN';\r\nexport const UPDATE_MCQ_SUCCESS = 'UPDATE_MCQ_SUCCESS';\r\nexport const UPDATE_MCQ_FAIL = 'UPDATE_MCQ_FAIL';\r\nexport const DELETE_MCQ_SUCCESS = 'DELETE_MCQ_SUCCESS';\r\nexport const DELETE_MCQ_FAIL = 'DELETE_MCQ_FAIL';\r\nexport const SELECT_MCQ = 'SELECT_MCQ';\r\nexport const CURRENT_MCQ_FIELD_CHANGE = 'CURRENT_MCQ_FIELD_CHANGE';\r\nexport const CURRENT_MCQ_FIELD_CHANGE_END = 'CURRENT_MCQ_FIELD_CHANGE_END';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE = 'CURRENT_ANSWER_FIELD_CHANGE';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE_END = 'CURRENT_ANSWER_FIELD_CHANGE_END';\r\nexport const CHOICE_ADDED_TO_MCQ = 'CHOICE_ADDED_TO_MCQ';\r\nexport const FETCH_MCQ_BEGIN = 'FETCH_MCQ_BEGIN';\r\nexport const FETCH_MCQ_SUCCESS = 'FETCH_MCQ_SUCCESS';\r\nexport const FETCH_MCQ_FAIL = 'FETCH_MCQ_FAIL';\r\nexport const FETCH_SKILLS_SUCCESS = 'FETCH_SKILLS_SUCCESS';\r\nexport const FETCH_SKILLS_FAIL = 'FETCH_SKILLS_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const CurrentMcqFieldChange = (val, field, model) => dispatch => {\r\n    switch(field)\r\n    {\r\n        case 'question':\r\n        {\r\n            model.mcq_meta.question = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'description':\r\n        {\r\n            model.mcq_meta.description = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'category':\r\n        {\r\n            model.mcq_meta.category = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'skill':\r\n        {\r\n            model.mcq_meta.skill = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'minimumExperience':\r\n        {\r\n            model.mcq_meta.minimumExperience = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'maximumExperience':\r\n        {\r\n            model.mcq_meta.maximumExperience = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'score':\r\n        {\r\n            model.mcq_meta.score = val;\r\n            dispatch({\r\n                type: CURRENT_MCQ_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n        }\r\n    }\r\n    console.log('model.mcq_meta.description',model.mcq_meta.description);\r\n    dispatch({\r\n        type: CURRENT_MCQ_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const CurrentAnswerFieldChange = (val, field, model) => dispatch => {\r\n    switch(field)\r\n    {\r\n        case 'content':\r\n        {\r\n            model.content = val;\r\n            dispatch({\r\n                type: CURRENT_ANSWER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'isCorrect':\r\n        {\r\n            model.isCorrect = val;\r\n            dispatch({\r\n                type: CURRENT_ANSWER_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n        }\r\n    }\r\n    console.log('model.content',model.content);\r\n    dispatch({\r\n        type: CURRENT_ANSWER_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddAnswerChoice = (answerModel, mcqModel) => dispatch => {\r\n    if(mcqModel) {\r\n        if(!mcqModel.mcq_meta.choices && mcqModel.mcq_meta.choices.length === 0) {\r\n            mcqModel.mcq_meta.choices = [];\r\n            answerModel.key = config.instance.OrderedAlphabets[0];\r\n        }\r\n        if(!answerModel.key) {\r\n            let answerKeyIndex = mcqModel.mcq_meta.choices.length === 0 ? 0 : mcqModel.mcq_meta.choices.length; \r\n            answerModel.key = config.instance.OrderedAlphabets[answerKeyIndex];\r\n        }\r\n\r\n\r\n        mcqModel.mcq_meta.choices.push(answerModel);\r\n    }\r\n    dispatch({\r\n        type: CHOICE_ADDED_TO_MCQ,\r\n        payload: mcqModel\r\n    })\r\n}\r\n\r\nexport const AddMcq = (mcqModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        dispatch({\r\n            type: ADD_MCQ_BEGIN\r\n        });\r\n        let url = config.instance.getAdminApiUrl() + 'mcq';\r\n        repository.saveData(url, mcqModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: ADD_MCQ_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: ADD_MCQ_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n\r\n    });\r\n}\r\n\r\nexport const UpdateMcq = (mcqModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        dispatch({\r\n            type: UPDATE_MCQ_BEGIN\r\n        });\r\n        let url = config.instance.getAdminApiUrl() + 'mcq';\r\n        repository.updateData(url, mcqModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: UPDATE_MCQ_SUCCESS\r\n                });\r\n            })\r\n            .then((res) => {\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: UPDATE_MCQ_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const DeleteMcq = (mcqModel) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'mcq';\r\n    repository.deleteData(url, mcqModel)\r\n        .then((res) => {\r\n            dispatch(FetchMcqs(true));\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: DELETE_MCQ_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const BulkDeleteMcq = (mcqs) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'bulkmcq';\r\n    let mcqIdsToDelete = [];\r\n    mcqs.map((item, index) => {\r\n        mcqIdsToDelete.push(item.id);\r\n    })\r\n    let data = {\r\n        mcqIdsToDelete: mcqIdsToDelete\r\n    }\r\n    repository.deleteData(url, data)\r\n        .then((res) => {\r\n            dispatch(FetchMcqs(true));\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: DELETE_MCQ_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const BeginSearch = () => dispatch => {\r\n    dispatch({\r\n        type: MCQ_SEARCH_BEGIN\r\n    });\r\n}\r\n\r\nexport const EndSearch = () => dispatch => {\r\n    dispatch({\r\n        type: MCQ_SEARCH_END\r\n    });\r\n}\r\n\r\nconst matchesQuestion = (item, searchTerm) => {\r\n    return  item.question && \r\n            searchTerm &&\r\n            item.question.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n}\r\n\r\nconst matchesDescription = (item, searchTerm) => {\r\n    return  item.description &&\r\n            searchTerm &&\r\n            item.description.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n}\r\n\r\nconst matchesSkill = (item, searchTerm) => {\r\n    let skillArray = searchTerm.split(\",\");\r\n    return  item.skill &&\r\n            skillArray &&\r\n            skillArray.includes(item.skill);\r\n            // item.skill.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n}\r\n\r\nconst matchesCategory = (item, searchTerm) => {\r\n    return  item.category &&\r\n            searchTerm &&\r\n            item.category.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n}\r\n\r\n export const SearchMcq = (searchCriteria, searchTerm, mcqList) => dispatch => {\r\n    if(mcqList && mcqList.length > 0) {\r\n        let filteredCategories = mcqList;\r\n        if(searchTerm === 'ALL') {\r\n            dispatch({\r\n                type: MCQ_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredCategories,\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n        switch(searchCriteria) {\r\n            case 'QUEST_OR_DESC': {\r\n                filteredCategories = mcqList.filter((mcqItem) => {\r\n                    let item = mcqItem.mcq_meta;\r\n                    return  matchesQuestion(item, searchTerm) ||\r\n                            matchesDescription(item, searchTerm);\r\n                });\r\n                \r\n                break;\r\n            }\r\n            case 'SKILL': {\r\n                filteredCategories = mcqList.filter((mcqItem) => {\r\n                    let item = mcqItem.mcq_meta;\r\n                    return  matchesSkill(item, searchTerm);\r\n                });\r\n                break;\r\n            }\r\n            case 'CATEGORY': {\r\n                console.log('category filter', searchTerm);\r\n                filteredCategories = mcqList.filter((mcqItem) => {\r\n                    let item = mcqItem.mcq_meta;\r\n                    return  matchesCategory(item, searchTerm);\r\n                });\r\n                break;\r\n            }\r\n        }\r\n        if(filteredCategories && filteredCategories.length > 0) {\r\n            dispatch({\r\n                type: MCQ_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredCategories,\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            dispatch({\r\n                type: MCQ_SEARCH_SUCCESS,\r\n                payload: {\r\n                    filteredCategories: [],\r\n                    searchTerm\r\n                }\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        dispatch({\r\n            type: MCQ_SEARCH_SUCCESS,\r\n            payload: {\r\n                filteredCategories: [],\r\n                searchTerm\r\n            }\r\n        });\r\n    }\r\n }\r\n\r\n export const FetchCategories = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllCategories';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CATEGORIES_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchSkills = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllSkills';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const SelectMcq = (mcqModel) => dispatch => {\r\n    dispatch({\r\n        type: SELECT_MCQ,\r\n        payload: mcqModel\r\n    })\r\n}\r\n\r\n\r\nexport const FetchMcqs = (isDeleted) => dispatch => {\r\n    dispatch({\r\n        type: FETCH_MCQ_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllMcqs';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            let payload = {\r\n                data: res.data,\r\n                message: 'MCQs fetched successfully'\r\n            };\r\n            if(isDeleted) {\r\n                payload.message = 'MCQ deleted successfully';\r\n            }\r\n            dispatch({\r\n                type: FETCH_MCQ_SUCCESS,\r\n                payload: payload\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_MCQ_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddMcqComponent from '../components/Mcq/AddMcq';\r\nimport {    AddMcq, FetchMcqs, UpdateMcq, FetchCategories, FetchSkills, \r\n            CloseSnackbar, CurrentMcqFieldChange, CurrentAnswerFieldChange,\r\n            OpenSnackbar, SelectMcq, AddAnswerChoice,\r\n            BeginSearch, SearchMcq } from '../actions/McqActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport draftToHtml from 'draftjs-to-html';\r\n\r\nclass McqContainer extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questionEditorState: EditorState.createEmpty(),\r\n            choiceEditorState: EditorState.createEmpty(),\r\n        }\r\n    }\r\n\r\n    onQuestionEditorStateChange = (questionEditorState) => {\r\n        this.setState({\r\n            questionEditorState,\r\n        });\r\n        let data = draftToHtml(convertToRaw(questionEditorState.getCurrentContent()));\r\n        this.props.CurrentMcqFieldChange(data, 'description', this.props.current_mcq);\r\n    };\r\n\r\n    onChoiceEditorChange = (choiceEditorState) => {\r\n        this.setState({\r\n            choiceEditorState,\r\n        });\r\n        let data = draftToHtml(convertToRaw(choiceEditorState.getCurrentContent()));\r\n        this.props.CurrentAnswerFieldChange(data, 'content', this.props.currentAnswer);\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    componentWillUpdate = () => {\r\n        if(this.props.success_message !== '') {\r\n            this.props.FetchCategories();\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchCategories();\r\n        this.props.FetchSkills();\r\n    }\r\n\r\n    onAddMcq = (model) => {\r\n        let { state } = this.props.location;\r\n        let editMode = false;\r\n        if(state && state.mcq) {\r\n            editMode = true;\r\n            this.props.UpdateMcq(model)\r\n                .then((res) => {\r\n                    this.props.history.push('/mcqs');\r\n                });\r\n        }\r\n        else {\r\n            this.props.AddMcq(model)\r\n                    .then((res) => {\r\n                        this.props.history.push('/mcqs');\r\n                    });\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        let { state } = this.props.location;\r\n        let mcq = null;\r\n        if(state && state.mcq) {\r\n            mcq = state.mcq;\r\n        }\r\n        let { questionEditorState, choiceEditorState } = this.state;\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                    <AddMcqComponent \r\n                        onSubmit={ (model) => this.onAddMcq(model) }\r\n                        onAnswerAdd={ (model) => this.props.AddAnswerChoice(model, this.props.current_mcq) }\r\n                        // model={this.props.current_mcq}\r\n                        model={mcq ? mcq : this.props.current_mcq}\r\n                        categories={this.props.categories}\r\n                        skills={this.props.skills}\r\n                        currentAnswer={this.props.currentAnswer}\r\n                        editMode={mcq ? true : false}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentMcqFieldChange(val, field, model) } \r\n                        onAnswerFieldChange={ (val, field, model) => this.props.CurrentAnswerFieldChange(val, field, model) } \r\n                        history={this.props.history}\r\n                        questionEditorState={questionEditorState}\r\n                        onQuestionEditorStateChange={this.onQuestionEditorStateChange}\r\n                        choiceEditorState={choiceEditorState}\r\n                        onChoiceEditorChange={this.onChoiceEditorChange}\r\n                        />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.mcqReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddMcq: (model, editMode) => dispatch(AddMcq(model, editMode)),\r\n    AddAnswerChoice: (model, mcqModel) => dispatch(AddAnswerChoice(model, mcqModel)),\r\n    UpdateMcq: (model) => dispatch(UpdateMcq(model)),\r\n    SelectMcq: (model) => dispatch(SelectMcq(model)),\r\n    FetchCategories: () => dispatch(FetchCategories()),\r\n    FetchSkills: () => dispatch(FetchSkills()),\r\n    FetchMcqs: () => dispatch(FetchMcqs()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    BeginSearch: () => dispatch(BeginSearch()),\r\n    SearchMcq: (searchTerm, mcqList) => dispatch(SearchMcq(searchTerm, mcqList)),\r\n    CurrentMcqFieldChange: (val, field, model) => dispatch(CurrentMcqFieldChange(val, field, model)),\r\n    CurrentAnswerFieldChange: (val, field, model) => dispatch(CurrentAnswerFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(McqContainer);","import React from 'react';\r\nimport CSVReader from 'react-csv-reader';\r\nimport { Typography, Button } from '@material-ui/core';\r\nimport repository from '../../repository';\r\nimport config from '../../config';\r\n\r\nclass BulkUpload extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: \"\",\r\n            finalJson: {}\r\n        };\r\n    }\r\n\r\n    handleFileLoaded = (content, fileName) => {\r\n        console.log('fileName', fileName);\r\n        console.log('content', content);\r\n        let matrixArray = content;\r\n        let finalJson = {\r\n            mcqs: []\r\n        };\r\n        let headers = [];\r\n        let firstRow = matrixArray[0];\r\n        firstRow.map((item, columnIndex) => {\r\n            headers.push(item);\r\n        });\r\n        if (!this.validateHeaders(headers)) {\r\n            this.setState({\r\n                message: \"Invalid Headers. Please check the file format and try again.\"\r\n            });\r\n            return;\r\n        }\r\n        if (!this.validCount(matrixArray)) {\r\n            this.setState({\r\n                message: `Invalid number of records. Min: ${config.instance.minBulkCount}, Max: ${config.instance.maxBulkCount}`\r\n            });\r\n            return;\r\n        }\r\n        matrixArray.map((itemArray, rowIndex) => {\r\n            if (rowIndex === 0) {\r\n\r\n            }\r\n            else {\r\n                let mcq = {};\r\n                mcq.mcq_meta = {\r\n                    choices: []\r\n                };\r\n                let correctAnswer = \"\";\r\n                itemArray.map((colValue, colIndex) => {\r\n                    let filteredHeaders = config.instance.validHeaders.filter((item) => {\r\n                        return item.name === headers[colIndex];\r\n                    });\r\n\r\n                    if(filteredHeaders && filteredHeaders.length > 0) {\r\n                        let prop = filteredHeaders[0].prop;\r\n                        if(prop.startsWith(\"choice\")) {\r\n                            if(colValue) {\r\n                                mcq.mcq_meta.choices.push({\r\n                                    content: colValue,\r\n                                    isCorrect: correctAnswer \r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            mcq.mcq_meta[prop] = colValue;\r\n                        }\r\n                    }\r\n                });\r\n                if(mcq.mcq_meta.question && mcq.mcq_meta.question !== '') {\r\n                    finalJson.mcqs.push(mcq);\r\n                }\r\n            }\r\n        });\r\n        this.setState({\r\n            finalJson: finalJson\r\n        });\r\n    }\r\n\r\n    onUpload = () => {\r\n        let { finalJson } = this.state;\r\n        let url = config.instance.getAdminApiUrl() + 'bulkMcq';\r\n        repository.saveData(url, finalJson)\r\n            .then((res) => {\r\n                this.setState({\r\n                    message: \"Successfully uploaded.\",\r\n                    finalJson: {}\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    message: \"Error in uploading file. Please try again.\"\r\n                });\r\n            })\r\n    }\r\n\r\n    validateHeaders = (headers) => {\r\n        \r\n        let isValid = true;\r\n        headers.map((item, idx) => {\r\n            let filteredHeaders = config.instance.validHeaders.filter((vh) => {\r\n                return vh.name === item;\r\n            });\r\n            if(filteredHeaders && filteredHeaders.length > 0) {\r\n            } else {\r\n                isValid = false;\r\n            }\r\n        });\r\n        return isValid;\r\n    }\r\n    \r\n    validCount = (matrix) => {\r\n        let matrixLength = matrix.length;\r\n        if(matrixLength < config.instance.minBulkCount || matrixLength > config.instance.maxBulkCount) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    handleError = (error) => {\r\n        console.log('error on upload', error);\r\n    }\r\n\r\n    render = () => {\r\n        const { message, finalJson } = this.state;\r\n        return (\r\n            <div>\r\n                <CSVReader\r\n                    cssClass=\"csv-reader-input\"\r\n                    label=\"Select CSV with Multiple Choice Questions\"\r\n                    onFileLoaded={this.handleFileLoaded}\r\n                    onError={this.handleError}\r\n                    inputId=\"bulkmcq\"\r\n                    inputStyle={{color: 'red'}}\r\n                />\r\n                <br></br>\r\n                <Typography color=\"primary\" variant=\"subtitle1\">{message}</Typography>\r\n                {finalJson && finalJson.mcqs && finalJson.mcqs.length > 0 &&\r\n                <Button color=\"primary\" variant=\"contained\" \r\n                        size=\"large\"\r\n                        onClick={this.onUpload}\r\n                        >Upload</Button>\r\n                }\r\n                {message === \"Successfully uploaded.\" && \r\n                    <Button color=\"primary\" variant=\"contained\" \r\n                    size=\"small\"\r\n                    onClick={() => this.props.history.goBack()}\r\n                    >Go Back</Button>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BulkUpload;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddCandidateComponent from '../components/Candidates/AddCandidate';\r\nimport {    AddCandidate, UpdateCandidate, FetchSkills,  \r\n            CloseSnackbar, CurrentCandidateFieldChange,\r\n            OpenSnackbar } from '../actions/CandidateActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\n\r\nclass CandidateContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    componentWillReceiveProps = (newprops, oldprops) => {\r\n        if(newprops.success_message !== '' && newprops.success_message !== undefined) {\r\n            console.log('newprops.success_message');\r\n            console.log(newprops.success_message);\r\n            this.props.OpenSnackbar();\r\n            setTimeout(() => {\r\n                this.props.history.push('/candidates');\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchSkills();\r\n    }\r\n\r\n    onAddCandidate = (model) => {\r\n        this.props.AddCandidate(model, this.props.editMode);\r\n    }\r\n\r\n    render = () => {\r\n        console.log('this.props.current_candidate');\r\n        console.log(this.props.snack_open);\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                    <AddCandidateComponent \r\n                        onSubmit={ (model) => this.onAddCandidate(model) }\r\n                        model={this.props.current_candidate}\r\n                        skills={this.props.skills}\r\n                        editMode={this.props.editMode}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentCandidateFieldChange(val, field, model) } \r\n                        />\r\n                    \r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n            </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.candidateReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddCandidate: (model, editMode) => dispatch(AddCandidate(model, editMode)),\r\n    UpdateCandidate: (model) => dispatch(UpdateCandidate(model)),\r\n    FetchSkills: () => dispatch(FetchSkills()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentCandidateFieldChange: (val, field, model) => dispatch(CurrentCandidateFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateContainer);","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, DialogContent, Dialog, DialogTitle, DialogActions, Divider } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport SelectCandidateExperience from '../Candidates/SelectCandidateExperience';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\nimport { Close  } from '@material-ui/icons';\r\n\r\nclass AddTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n        \r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log('handle close');\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      console.log('submit called');\r\n      this.props.onSubmit(this.props.model);\r\n      this.handleClose();\r\n    }\r\n    \r\n    onSubmitExperience = (years, months) => {\r\n        this.props.onFieldChange(years, 'experienceLevel', this.props.model)\r\n    }\r\n\r\n    render = () => {\r\n        let { model } = this.props;\r\n        console.log('current_test');\r\n        console.log(model);\r\n        return (\r\n            <div>\r\n            {!model && <LoadingComponent /> } \r\n            {model && \r\n            <Card>   \r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>Create Test</Button>\r\n                \r\n                <Dialog\r\n                fullWidth={true}\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                >\r\n                <DialogTitle onClose={this.handleClose}>Create a New Test</DialogTitle>\r\n                <Divider />\r\n                <DialogContent style={{padding: '4%'}}>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <InputLabel htmlFor=\"outlined-skill-simple\">\r\n                                    Skill\r\n                                </InputLabel>\r\n                                <Select\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'skill', this.props.model)}\r\n                                    value={model.test_meta.skill}\r\n                                    input={\r\n                                    <OutlinedInput\r\n                                        labelWidth={65}\r\n                                        name=\"skill\"\r\n                                        id=\"outlined-skill-simple\"\r\n                                    />\r\n                                    }>\r\n                                    <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                    </MenuItem>\r\n                                    {this.props.skills && this.props.skills.length > 0 &&\r\n                                        this.props.skills.map((skillItem, index) => {\r\n                                            let item = skillItem.skill_meta;\r\n                                        return (\r\n                                            <MenuItem key={index} value={item.skill}>{item.skill}</MenuItem>\r\n                                        )\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-testname\"\r\n                                    label=\"Test Name\"\r\n                                    className={styles.dense}\r\n                                    value={model.test_meta.testName}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'testName', this.props.model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-email\"\r\n                                    label=\"Test Duration (mins)\"\r\n                                    className={styles.dense}\r\n                                    value={model.test_meta.duration}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'duration', this.props.model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <SelectCandidateExperience \r\n                                        isTestAdmin={true}\r\n                                        onSubmitExperience={ (years, months) => this.onSubmitExperience(years, months) } />\r\n                            </FormControl>\r\n                    </form>\r\n                    </DialogContent>\r\n                    <Divider />\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                        onClick={ () => this.handleSubmit(this.props.model)}>\r\n                            Create Test\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Card>}\r\n        \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nexport default AddTest;","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\n\r\nimport { FETCH_SKILLS_BEGIN, FETCH_SKILLS_FAIL, FETCH_SKILLS_SUCCESS } from './SkillActions';\r\n\r\nexport const ADD_CANDIDATE_BEGIN = 'ADD_CANDIDATE_BEGIN';\r\nexport const ADD_CANDIDATE_SUCCESS = 'ADD_CANDIDATE_SUCCESS';\r\nexport const ADD_CANDIDATE_FAIL = 'ADD_CANDIDATE_FAIL';\r\nexport const CANDIDATE_SEARCH_BEGIN = 'CANDIDATE_SEARCH_BEGIN';\r\nexport const CANDIDATE_SEARCH_SUCCESS = 'CANDIDATE_SEARCH_SUCCESS';\r\nexport const UPDATE_CANDIDATE_BEGIN = 'UPDATE_CANDIDATE_BEGIN';\r\nexport const UPDATE_CANDIDATE_SUCCESS = 'UPDATE_CANDIDATE_SUCCESS';\r\nexport const UPDATE_CANDIDATE_FAIL = 'UPDATE_CANDIDATE_FAIL';\r\nexport const SELECT_CANDIDATE = 'SELECT_CANDIDATE';\r\nexport const CURRENT_CANDIDATE_FIELD_CHANGE = 'CURRENT_CANDIDATE_FIELD_CHANGE';\r\nexport const CURRENT_CANDIDATE_FIELD_CHANGE_END = 'CURRENT_CANDIDATE_FIELD_CHANGE_END';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE = 'CURRENT_ANSWER_FIELD_CHANGE';\r\nexport const CURRENT_ANSWER_FIELD_CHANGE_END = 'CURRENT_ANSWER_FIELD_CHANGE_END';\r\nexport const CHOICE_ADDED_TO_CANDIDATE = 'CHOICE_ADDED_TO_CANDIDATE';\r\nexport const FETCH_CANDIDATE_BEGIN = 'FETCH_CANDIDATE_BEGIN';\r\nexport const FETCH_CANDIDATE_SUCCESS = 'FETCH_CANDIDATE_SUCCESS';\r\nexport const FETCH_CANDIDATE_FAIL = 'FETCH_CANDIDATE_FAIL';\r\n// export const FETCH_SKILLS_SUCCESS = 'FETCH_SKILLS_SUCCESS';\r\n// export const FETCH_SKILLS_FAIL = 'FETCH_SKILLS_FAIL';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const CurrentCandidateFieldChange = (val, field, model) => dispatch => {\r\n    console.log('CANDIDATE field change: ' + field);\r\n    console.log(val);\r\n    switch(field)\r\n    {\r\n        case 'fullName':\r\n        {\r\n            model.fullName = val;\r\n            dispatch({\r\n                type: CURRENT_CANDIDATE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'email':\r\n        {\r\n            model.email = val;\r\n            dispatch({\r\n                type: CURRENT_CANDIDATE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'contactno':\r\n        {\r\n            model.contactno = val;\r\n            dispatch({\r\n                type: CURRENT_CANDIDATE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'experienceYears':\r\n        {\r\n            model.experienceYears = val;\r\n            dispatch({\r\n                type: CURRENT_CANDIDATE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'experienceMonths':\r\n        {\r\n            model.experienceMonths = val;\r\n            dispatch({\r\n                type: CURRENT_CANDIDATE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        default:\r\n        {\r\n        }\r\n    }\r\n    dispatch({\r\n        type: CURRENT_CANDIDATE_FIELD_CHANGE_END\r\n    });\r\n}\r\n\r\nexport const AddCandidate = (candidateModel, editMode) => dispatch => {\r\n    dispatch({\r\n        type: ADD_CANDIDATE_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'candidate';\r\n        repository.saveData(url, candidateModel)\r\n            .then((res) => {\r\n                console.log('CANDIDATE saved: ' + res);\r\n                dispatch({\r\n                    type: ADD_CANDIDATE_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: ADD_CANDIDATE_FAIL,\r\n                    payload: err\r\n                });\r\n            });\r\n}\r\n\r\nexport const BeginSearch = () => dispatch => {\r\n    dispatch({\r\n        type: CANDIDATE_SEARCH_BEGIN\r\n    });\r\n}\r\n\r\n\r\n export const FetchCandidates = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getAllCandidates';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchSkills = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_SKILLS_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'getAllSkills';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_SKILLS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const SelectCandidate = (candidateModel) => dispatch => {\r\n    dispatch({\r\n        type: SELECT_CANDIDATE,\r\n        payload: candidateModel\r\n    })\r\n}\r\n\r\nexport const UpdateCandidate = (candidateModel) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_CANDIDATE_BEGIN\r\n    });\r\n    let url = config.instance.getAdminApiUrl() + 'candidate';\r\n    repository.updateData(url, candidateModel)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: UPDATE_CANDIDATE_SUCCESS\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: UPDATE_CANDIDATE_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { PersonAdd } from '@material-ui/icons';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { CanSendInvite } from '../../common/HelperFunctions';\r\n\r\nconst TestList = (props) => {\r\n    let { tests } = props;\r\n    return (\r\n        <div>\r\n        {!tests && <LoadingComponent /> }\r\n        {tests && tests.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No Tests Found </Typography> }\r\n        {tests && tests.length > 0 && \r\n        <Table>\r\n            <TableHead>\r\n            <TableRow>\r\n                <CustomTableCell>Test</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Status</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Created On</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Author</CustomTableCell>\r\n                <CustomTableCell align=\"right\"></CustomTableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {tests.map((test, index) => (\r\n                <TableRow key={index}>\r\n                <CustomTableCell component=\"th\" scope=\"row\">\r\n                    <Link to={ {pathname: \"/testConsole\", state: { testId: test.id } }}>\r\n                        {test.test_meta.testName}\r\n                    </Link>\r\n                </CustomTableCell>\r\n                <CustomTableCell align=\"left\"><Typography variant=\"subtitle2\" >{test.test_meta.status.toUpperCase()}</Typography></CustomTableCell>\r\n                <CustomTableCell align=\"left\">{test.test_meta.createdOn}</CustomTableCell>\r\n                <CustomTableCell align=\"left\">{test.user_meta.name}</CustomTableCell>\r\n                <CustomTableCell align=\"right\" scope=\"row\" component=\"th\">\r\n                    {CanSendInvite(test.test_meta.status) &&\r\n                    <Link to={ {pathname: \"/inviteConsole\", state: { testId: test.id } }}>\r\n                        <PersonAdd />\r\n                    </Link>\r\n                    }\r\n                </CustomTableCell>\r\n                </TableRow>\r\n            ))}\r\n            </TableBody>\r\n        </Table>\r\n        }\r\n        </div>\r\n    );\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n    //   backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.black,\r\n      fontSize: 16\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default TestList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddTestComponent from '../components/AdminTest/AddTest';\r\nimport {    AddTest, UpdateTest, FetchSkills, FetchTests,  \r\n            CloseSnackbar, CurrentTestFieldChange,\r\n            OpenSnackbar } from '../actions/AdminTestActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\nimport { Button, Card, CardHeader } from '@material-ui/core';\r\nimport TestList from '../components/AdminTest/TestList';\r\nimport config from '../config';\r\n\r\nclass AdminTestContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n\r\n\r\n    reload = () => {\r\n        this.props.FetchSkills();\r\n        this.props.FetchTests();\r\n    }\r\n\r\n    onAddTest = (model) => {\r\n        model.test_meta.settings = {\r\n            testVisibility: config.instance.TestVisibility.InvitedCandidates\r\n        }\r\n        this.props.AddTest(model, this.props.editMode, this.props.history)\r\n                .then((res) => {\r\n                    this.reload();  \r\n                });\r\n    }\r\n\r\n    render = () => {\r\n        console.log('render admin test container');\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                <Card>\r\n                    <CardHeader action={\r\n                    <AddTestComponent \r\n                        onSubmit={ (model) => this.onAddTest(model) }\r\n                        model={this.props.current_test}\r\n                        skills={this.props.skills}\r\n                        editMode={this.props.editMode}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentTestFieldChange(val, field, model) } \r\n                        />\r\n                    }\r\n                    title=\"Tests\" />\r\n                <TestList tests={this.props.tests} />\r\n                </Card>\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.adminTestReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddTest: (model, editMode) => dispatch(AddTest(model, editMode)),\r\n    UpdateTest: (model) => dispatch(UpdateTest(model)),\r\n    FetchSkills: () => dispatch(FetchSkills()),\r\n    FetchTests: () => dispatch(FetchTests()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentTestFieldChange: (val, field, model) => dispatch(CurrentTestFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminTestContainer);","import React, { Component, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {    FetchMcqs, DeleteMcq, BulkDeleteMcq,\r\n            CloseSnackbar,\r\n            OpenSnackbar, \r\n            BeginSearch, EndSearch, SearchMcq } from '../../actions/McqActions';\r\n\r\nimport { FetchCategories } from '../../actions/CategoryActions';\r\nimport { FetchSkills } from '../../actions/SkillActions';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { FormControl, Grid, Card, CardHeader, Button, CardContent, \r\n         List, ListItem, ListItemText, ListItemSecondaryAction,\r\n         Checkbox, TextField } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport McqItem from '../../Containers/TestConsole/McqItem';\r\nimport SnackbarComponent from '../lib/SnackbarComponent';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { Add, Search, ArrowUpward, Delete, Refresh } from '@material-ui/icons';\r\nimport LoadingComponent from '../lib/LoadingComponent';\r\nimport User401 from '../../Containers/User/User401';\r\n\r\nimport { Input, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n\r\n\r\n//import BaseComponent from '../lib/BaseComponent';\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n  \r\n  const names = [\r\n    'Oliver Hansen',\r\n    'Van Henry',\r\n    'April Tucker',\r\n    'Ralph Hubbard',\r\n    'Omar Alexander',\r\n    'Carlos Abbott',\r\n    'Miriam Wagner',\r\n    'Bradley Wilkerson',\r\n    'Virginia Andrews',\r\n    'Kelly Snyder',\r\n  ];\r\n  \r\n\r\nclass McqList extends Component {\r\n\r\n    constructor (props) {\r\n       super(props);\r\n       this.state = {\r\n          selectedMcqs: [],\r\n          selectedSkills: []\r\n       }\r\n    }\r\n\r\n//     [personName, setPersonName] = useState([]);\r\n\r\n//    handleChange = (event) => {\r\n//     setPersonName(event.target.value);\r\n//   };\r\n\r\n//    handleChangeMultiple = (event) => {\r\n//     const { options } = event.target;\r\n//     const value = [];\r\n//     for (let i = 0, l = options.length; i < l; i += 1) {\r\n//       if (options[i].selected) {\r\n//         value.push(options[i].value);\r\n//       }\r\n//     }\r\n//     setPersonName(value);\r\n//   };\r\n\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchMcqs();\r\n        this.props.FetchCategories();\r\n        this.props.FetchSkills();\r\n    }\r\n\r\n    onAddMcqToTest = (mcqId) => {\r\n        this.props.AddMcqToTest(mcqId);\r\n    }\r\n\r\n    onEditClick = (mcq) => {\r\n        this.props.history.push({\r\n            pathname:  '/addMcq',\r\n            state: {\r\n                mcq: mcq\r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteMcq = (mcq) => {\r\n        this.props.DeleteMcq(mcq);\r\n    }\r\n\r\n    bulkDeleteMcq = () => {\r\n        let { selectedMcqs } = this.state;\r\n        if(selectedMcqs && selectedMcqs.length > 0) {\r\n            this.props.BulkDeleteMcq(selectedMcqs);\r\n        }        \r\n    }\r\n\r\n    markForDeletion = (mcq) => {\r\n        let { selectedMcqs } = this.state;\r\n        let filteredMcqs = selectedMcqs.filter((item)=>{\r\n            return item.id === mcq.id;\r\n        });\r\n        if(filteredMcqs && filteredMcqs.length > 0) {\r\n        } else {\r\n            selectedMcqs.push(mcq);\r\n            this.setState({selectedMcqs});\r\n        }\r\n    }\r\n\r\n    handleFilterChange = (e) => {\r\n        let criteria = e.target.attributes.getNamedItem(\"data-criteria\").value;\r\n        console.log('criteria', criteria);\r\n        switch(criteria) {\r\n            case 'SKILL': {\r\n                this.setState({\r\n                    selectedSkills: e.target.value\r\n                })\r\n                break;\r\n            }\r\n            case 'CATEGORY': {\r\n                \r\n                break;\r\n            }\r\n            case 'QUEST_DESC': {\r\n                break;\r\n            }\r\n        }\r\n        console.log('e.target', e.target.value);\r\n        let searchTerm = e.target.value;\r\n        if(!searchTerm) {\r\n            searchTerm = e.target.innerHTML;\r\n            if(searchTerm && \r\n                searchTerm.toLowerCase() === 'programming' &&\r\n                criteria === 'CATEGORY') {\r\n                this.setState({\r\n                    skillCriteriaEnabled: true\r\n                })\r\n            }\r\n            else if (criteria === 'CATEGORY') {\r\n                this.setState({\r\n                    skillCriteriaEnabled: false\r\n                })\r\n            }\r\n        }\r\n        this.props.SearchMcq(criteria, searchTerm, this.props.mcqs);\r\n    }\r\n\r\n    clearFilters = () => {\r\n        this.props.SearchMcq('ALL', '', this.props.mcqs);\r\n        this.setState({\r\n            skillCriteriaEnabled: false\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        let { mcqs, search_term, filteredCategories, search_enabled, error, \r\n            categoryList, skillList } = this.props;\r\n        let { selectedMcqs } = this.state;\r\n        let mcqToDisplay = filteredCategories ? filteredCategories : mcqs;\r\n        if(!mcqToDisplay){\r\n            return (\r\n                <LoadingComponent />\r\n            )\r\n        }\r\n        // search_enabled = true;\r\n        console.log('categoryList', categoryList);\r\n        console.log('skillList', skillList);\r\n        let criteriaObj = { \r\n            categoryList, \r\n            skillList, \r\n            skillCriteriaEnabled: this.state.skillCriteriaEnabled,\r\n            clearFilters: this.clearFilters\r\n        };\r\n        \r\n        return (\r\n            <Card>\r\n                <CardHeader\r\n                    action={\r\n                        <div>\r\n                            {selectedMcqs && selectedMcqs.length > 0 &&\r\n                            <Link onClick={() => this.bulkDeleteMcq()} size=\"small\" title=\"Delete Selected\">\r\n                                <Delete color=\"secondary\" />\r\n                            </Link>}\r\n                            {/* {!search_enabled &&\r\n                            <Button className={styles.hide} color=\"primary\" onClick={() => this.props.BeginSearch()} size=\"small\">\r\n                                <Search />\r\n                            </Button>} */}\r\n                            <Button color=\"primary\" onClick={() => this.reload()} size=\"small\">\r\n                                <Refresh color=\"secondary\" />\r\n                            </Button>\r\n                            <Link to=\"/addMcq\" title=\"Add New MCQ\">\r\n                                <Add color=\"secondary\" />\r\n                            </Link>\r\n                            <Link to=\"/bulkMcq\" title=\"Bulk Upload MCQs\" >\r\n                                <ArrowUpward color=\"secondary\" />\r\n                                {/* <Button variant=\"contained\" color=\"primary\">Bulk Upload Mcq</Button> */}\r\n                            </Link>\r\n                        </div>\r\n                    }\r\n                    title={`MCQ List (${mcqToDisplay.length})`}\r\n                    subheader=\"Multiple Choice Questions\">\r\n                </CardHeader>\r\n                <CardContent>\r\n                    {renderFilters(criteriaObj, this.handleFilterChange)}\r\n                    {search_enabled &&\r\n                    <div>\r\n                        <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                            <TextField\r\n                                id=\"outlined-name\"\r\n                                label=\"Search\"\r\n                                value={search_term}\r\n                                className={styles.dense}\r\n                                // onChange={(e) => this.props.SearchMcq(e.target.value, mcqs)}\r\n                                onChange={this.handleFilterChange}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                inputProps={{ 'data-criteria': 'QUEST_OR_DESC' }}\r\n                            />\r\n                            <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\r\n                            <Select\r\n                                id=\"demo-mutiple-checkbox\"\r\n                                multiple\r\n                                value={this.state.selectedSkills}\r\n                                onChange={this.handleFilterChange}\r\n                                inputProps={{ 'data-criteria': 'SKILL' }}\r\n                                input={<Input />}\r\n                                renderValue={(selected) => selected.join(', ')}\r\n                                // MenuProps={MenuProps}\r\n                                >\r\n                                {skills.map((name) => (\r\n                                    <MenuItem key={name} value={name}>\r\n                                    <Checkbox checked={this.state.selectedSkills.indexOf(name) > -1} />\r\n                                    <ListItemText primary={name} />\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" style={{width: '10%', marginTop: '2%'}}>\r\n                            <Button  color=\"primary\" size=\"small\" onClick={() => this.props.EndSearch()} >\r\n                                Hide Search\r\n                            </Button>\r\n                        </FormControl>\r\n                    </div>\r\n                    }\r\n                    {/* {mcqToDisplay && \r\n                                    <Typography variant=\"caption\">\r\n                                        {mcqToDisplay.length} MCQs\r\n                                    </Typography>} */}\r\n                    <Link to=\"/addMcq\" >\r\n                        <Fab color=\"primary\" aria-label=\"Add\" style={{right: 20, position: 'fixed', bottom: 20}}>\r\n                            <Add />\r\n                        </Fab>\r\n                    </Link>\r\n                    <List dense={true}>\r\n                        { mcqToDisplay && mcqToDisplay.length > 0 &&\r\n                          mcqToDisplay.map((item, index) => {\r\n                            return (\r\n                                <McqItem    mcqItem={item} key={index}\r\n                                            onEditClick={(mcq) => this.onEditClick(item)}\r\n                                            onDeleteMcq={() => this.onDeleteMcq(item)}\r\n                                            markForDeletion={() => this.markForDeletion(item)}\r\n                                            isSelectable={false} \r\n                                            isEditable={true} />\r\n                            )\r\n                        } )}\r\n                    </List>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nconst renderFilters = (criteriaObj, handleFilterChange) => {\r\n    // console.log('categories', criteriaObj);\r\n    return (\r\n        <>\r\n            <>\r\n                {criteriaObj.categoryList && criteriaObj.categoryList.length > 0 &&\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-2 text-primary\">Categories</div>\r\n                        <div className=\"col-md-10\">\r\n                            {criteriaObj.categoryList.map((categoryItem, ix) => {\r\n                                return (\r\n                                        <button key={ix} type=\"button\" className=\"ml-1 btn btn-secondary btn-sm\" data-criteria='CATEGORY' onClick={handleFilterChange}>{categoryItem.category_meta.title}</button>\r\n                                )\r\n                            })}\r\n                            <button type=\"button\" className=\"ml-1 btn btn-warning btn-sm\" data-criteria='CATEGORY' onClick={criteriaObj.clearFilters}>All</button>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </>\r\n            <>\r\n                    \r\n                {criteriaObj.skillCriteriaEnabled && criteriaObj.skillList && criteriaObj.skillList.length > 0 &&\r\n                    <div className=\"row mt-2\">\r\n                        <div className=\"col-md-2 text-primary\">Skills</div>\r\n                        <div className=\"col-md-10\">\r\n                            {criteriaObj.skillList.map((skillItem) => {\r\n                                return (\r\n                                        <button type=\"button\" className=\"ml-1 btn btn-secondary btn-sm\" data-criteria='SKILL' onClick={handleFilterChange}>{skillItem.skill_meta.skill}</button>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                }\r\n\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.mcqReducer,\r\n    ...state.categoryReducer,\r\n    ...state.skillReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchMcqs: () => dispatch(FetchMcqs()),\r\n    DeleteMcq: (mcq) => dispatch(DeleteMcq(mcq)),\r\n    BulkDeleteMcq: (mcqs) => dispatch(BulkDeleteMcq(mcqs)),\r\n    FetchCategories: () => dispatch(FetchCategories()),\r\n    FetchSkills: () => dispatch(FetchSkills()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    BeginSearch: () => dispatch(BeginSearch()),\r\n    EndSearch: () => dispatch(EndSearch()),\r\n    SearchMcq: (searchCriteria, searchTerm, mcqList) => dispatch(SearchMcq(searchCriteria, searchTerm, mcqList)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(McqList);\r\nconst styles = {\r\n    formControl: {\r\n        width: '70%'\r\n    },\r\n    hide: {\r\n        display: 'none'\r\n    }\r\n}\r\n\r\nconst skills = [\r\n    'JAVA',\r\n    'ANGULAR',\r\n    'REACT',\r\n    'PLSQL',\r\n    'DEVOPS'\r\n]","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {    FetchCandidates, \r\n            CloseSnackbar,\r\n            OpenSnackbar, \r\n            BeginSearch//, SearchCandidate \r\n        } from '../../actions/CandidateActions';\r\nimport { Link } from 'react-router-dom';\r\nimport { FormControl, Grid, Card, CardHeader, Button, CardContent, List, ListItem } from '@material-ui/core';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nclass CandidateList extends Component {\r\n\r\n    componentDidMount = () => {\r\n        this.props.FetchCandidates();\r\n    }\r\n\r\n    render = () => {\r\n        let { candidates } = this.props;\r\n        return (\r\n            <Card>\r\n                <CardHeader\r\n                    action={\r\n                        <Link to=\"/addCandidate\" >\r\n                            <Button variant=\"contained\" color=\"primary\">Add Candidate</Button>\r\n                        </Link>\r\n                    }\r\n                    title=\"Candidate List\"\r\n                    subheader={\"For current recruiter\"}>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <List>\r\n                        { candidates && candidates.length > 0 &&\r\n                          candidates.map((item, index) => {\r\n                            return (\r\n                                <ListItem divider={false} key={index} >\r\n                                    <ExpansionPanel style={{width:'100%'}}>\r\n                                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                                        <Grid container spacing={16}>\r\n                                            <Grid item xs={6} sm={6}>\r\n                                                <Typography variant=\"h6\">{item.fullName}</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={3} sm={3}>\r\n                                                <Typography variant=\"subtitle1\" >{item.email}</Typography>\r\n                                            </Grid>\r\n                                            <Grid item xs={2} sm={2}>\r\n                                                <Typography variant=\"subtitle1\" >\r\n                                                    {item.experienceYears} years {item.experienceMonths} months\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        </ExpansionPanelSummary>\r\n                                        <ExpansionPanelDetails>\r\n                                            <div style={styles.formControl}>\r\n                                                {item.description && \r\n                                                    <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                                        <Typography variant=\"subtitle1\">\r\n                                                            No description\r\n                                                        </Typography>\r\n                                                    </FormControl>\r\n                                                }\r\n                                            </div>\r\n                                        </ExpansionPanelDetails>\r\n                                        <ExpansionPanelActions>\r\n                                        <Button variant=\"outlined\" size=\"small\" color=\"primary\" >\r\n                                            Edit\r\n                                        </Button>\r\n                                        </ExpansionPanelActions>\r\n                                    </ExpansionPanel>\r\n                                </ListItem>\r\n                            )\r\n                        } )}\r\n                    </List>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.candidateReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchCandidates: () => dispatch(FetchCandidates()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    BeginSearch: () => dispatch(BeginSearch())\r\n    //SearchCandidate: (searchTerm, candidateList) => dispatch(SearchCandidate(searchTerm, candidateList)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateList);\r\nconst styles = {\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport {    CloseSnackbar,\r\n            OpenSnackbar } from '../../actions/TestConsoleActions';            \r\nimport { FetchInvitations, EvaluateResults } from '../../actions/InviteConsoleActions';            \r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../../components/lib/SnackbarComponent';\r\nimport { Button, Card, CardHeader, CardContent, CardActions } from '@material-ui/core';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport InviteList from './InviteList';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\n\r\nclass InviteConsoleContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    componentWillReceiveProps = (newprops, oldprops) => {\r\n        if(newprops.success_message !== '' && newprops.success_message !== undefined) {\r\n            // this.props.OpenSnackbar();\r\n        }\r\n        if(newprops.inviteAdded === 'yes') {\r\n            this.props.history.push({\r\n                pathname:  '/tests'\r\n            });\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchInvitations();\r\n    }\r\n\r\n    render = () => {\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12} md={12}>\r\n                    <Card>\r\n                        <CardHeader\r\n                            title={`Invitations (${this.props.invitations ? this.props.invitations.length : 'loading..'})`} />\r\n                        <CardContent>\r\n                            <InviteList \r\n                                invitations={this.props.invitations}\r\n                                evaluateResults={(responseId) => this.props.EvaluateResults(responseId) }/>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.inviteConsoleReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    FetchInvitations: () => dispatch(FetchInvitations()),\r\n    EvaluateResults: (responseId) => dispatch(EvaluateResults(responseId))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InviteConsoleContainer);\r\nconst styles = {\r\n    actionButton: {\r\n        marginLeft: '80%'\r\n    }\r\n}","import React from 'react';\r\nimport { FormControl,\r\n         TextField, \r\n         Button,\r\n         Typography,\r\n         Divider} from '@material-ui/core';\r\n// import { EditorState, convertToRaw, ContentState } from 'draft-js';\r\n// import { Editor } from 'react-draft-wysiwyg';\r\n// import draftToHtml from 'draftjs-to-html';\r\n// import htmlToDraft from 'html-to-draftjs';\r\n\r\n// import '../../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\r\n// import 'draft-js/dist/Draft.css';\r\n\r\n\r\nconst SendTestInvite = (props) => {\r\n    let { currentTest, inviteInfo } = props;\r\n    \r\n    return (\r\n        <div>\r\n                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                    <TextField\r\n                        id=\"outlined-name\"\r\n                        label=\"Candidate Name\"\r\n                        value={inviteInfo ? inviteInfo.name : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'name')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        helperText=\"Full name of the candidate\"\r\n                    />\r\n                </FormControl>\r\n                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                    <TextField\r\n                        id=\"outlined-email\"\r\n                        label=\"Candidate Email\"\r\n                        value={inviteInfo ? inviteInfo.emailTo : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'emailTo')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        helperText=\"e.g. john@hotmail.com\"\r\n                    />\r\n                </FormControl>\r\n                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                    <TextField\r\n                        id=\"outlined-subject\"\r\n                        label=\"Subject\"\r\n                        value={inviteInfo ? inviteInfo.emailSubject : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'emailSubject')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </FormControl>\r\n                    <Typography align=\"center\" variant=\"subtitle1\">\r\n                    You have been invited to attend the \r\n                    <Typography color=\"secondary\"> {currentTest.test_meta.testName}\r\n                    </Typography> \r\n                    challenge. Wish you all the best!\r\n                    </Typography>\r\n\r\n                    <div style={styles.margintop}>\r\n                    <Typography variant=\"button\" align=\"center\">\r\n                    Duration: {currentTest.test_meta.duration} mins\r\n                    <br></br><br></br>\r\n                    <a href=\"#\" style={styles.margintop}>\r\n                    <Button variant=\"contained\" align=\"center\" size=\"large\" color=\"secondary\">\r\n                                Start Challenge\r\n                    </Button>\r\n                    </a>\r\n                    </Typography>\r\n                    </div>\r\n                    <Divider style={styles.margintop}/>\r\n                    <Typography gutterBottom align=\"center\" variant=\"subtitle2\" style={styles.margintop}>\r\n                        It is recommended to use Chrome or Firefox browser to take the test.\r\n                    </Typography>\r\n                    <Typography gutterBottom align=\"center\" variant=\"subtitle2\" style={styles.margintop}>\r\n                        This is an automated message. Do not reply to this email as it is not being monitored.\r\n                    </Typography>\r\n                    <Typography gutterBottom align=\"center\" variant=\"subtitle2\" style={styles.margintop}>\r\n                        For any technical queries, please refer to <a href=\"#\">FAQ</a> or email us at support@techassessment.com\r\n                    </Typography>\r\n        </div>\r\n    );\r\n}\r\nexport default SendTestInvite;\r\nconst styles ={\r\n    container: {\r\n        marginLeft: '15%'\r\n    },\r\n    formControl: {\r\n        width: '70%',\r\n        marginBottom: '1%',\r\n        marginLeft: '15%'\r\n    },\r\n    margintop: {\r\n        marginTop: '2%',\r\n        // marginLeft: '30%'\r\n    },\r\n    duration: {\r\n        marginTop: '4%',\r\n    },\r\n    editorControl: {\r\n        height: '100%'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../../components/lib/SnackbarComponent';\r\nimport { Button, Card, CardHeader, CardContent, CardActions } from '@material-ui/core';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport SendTestInvite from './SendTestInvite';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { SendInvite, InviteInfoFieldChange } from '../../actions/InviteConsoleActions';            \r\nimport { FetchTest, CloseSnackbar, OpenSnackbar } from '../../actions/TestConsoleActions';            \r\n\r\nclass InviteContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            snackOpen: false,\r\n            snackMessage: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        let { state } = this.props.location;\r\n        console.log('reload: location state');\r\n        console.log(state);\r\n        if(state){\r\n            if(state.testId){\r\n                this.props.FetchTest(state.testId);\r\n            }\r\n        }\r\n    }\r\n    \r\n    onSendInvite = () => {\r\n        /*let { current_test, inviteInfo } = this.props;\r\n        \r\n        let model = {\r\n            testId: current_test.id,\r\n            emailSubject: inviteInfo.emailSubject,\r\n            invitations: [\r\n                {\r\n                    invitation_meta: {\r\n                        name: inviteInfo.name,\r\n                        testId: current_test.id\r\n                    }\r\n                }\r\n            ]\r\n        }*/\r\n\r\n\r\n        let { current_test, inviteInfo } = this.props;\r\n        let model = {\r\n            testId: current_test.id,\r\n            invitees: []\r\n        }\r\n        let invitee = {\r\n            emailId: inviteInfo.emailTo,\r\n            name: inviteInfo.name\r\n        }\r\n        model.invitees.push(invitee);\r\n        \r\n        // this.props.SendInvite(current_test, inviteInfo).then((res) => {\r\n        this.props.SendInvite(model).then((res) => {\r\n            this.setState({\r\n                snackOpen: true,\r\n                snackMessage: 'Invitation sent successfully'\r\n            });\r\n            this.props.history.push({\r\n                pathname: '/testConsole', state: { testId: current_test.id, selectedTabIndex: 1 }\r\n            });\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        let { current_test, inviteInfo, inviteAdded } = this.props;\r\n        console.log('invite console current_test', current_test);\r\n        return (\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12} md={8}>\r\n                {!current_test && <LoadingComponent />}\r\n                {current_test && current_test.test_meta &&\r\n                <Card>\r\n                    <CardHeader \r\n                        action={\r\n                        // <Button color=\"primary\" size=\"large\" variant=\"outlined\"\r\n                        //         onClick={() => this.props.history.goBack() }>\r\n                        //     <KeyboardBackspace />\r\n                        // </Button>\r\n                        <Link color=\"inherit\" to=\"/testConsole\" >\r\n                            Back to Test\r\n                        </Link>\r\n                        }\r\n                        title=\"Send Test Invites\"\r\n                        subheader={current_test.test_meta.testName}\r\n                    />\r\n                    <CardContent>\r\n                        <SendTestInvite\r\n                            // onSendInvite={(testInfo, inviteInfo) => this.onSendInvite(testInfo, inviteInfo) }\r\n                            selectedMcqs={current_test.test_meta.selectedMcqs} \r\n                            currentTest={current_test}\r\n                            inviteInfo={inviteInfo}\r\n                            onFieldChange={(val, field) => this.props.InviteInfoFieldChange(val, field, inviteInfo)}\r\n                        />\r\n                    </CardContent>\r\n                    <CardActions style={styles.actionButton}>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                onClick={() => this.onSendInvite() }>\r\n                            Send Invite\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n                }\r\n                \r\n                <SnackbarComponent \r\n                    openSnack={this.state.snackOpen} handleClose={() => this.setState({snackOpen: false})}\r\n                    snackMessage={this.state.snackMessage} \r\n                    /> \r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.inviteConsoleReducer,\r\n    ...state.testConsoleReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SendInvite: (inviteInfo, testModel) => dispatch(SendInvite(inviteInfo, testModel)),\r\n    FetchTest: (testId) => dispatch(FetchTest(testId)),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    InviteInfoFieldChange: (val, field, inviteInfo) => dispatch(InviteInfoFieldChange(val, field, inviteInfo))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InviteContainer);\r\nconst styles = {\r\n    actionButton: {\r\n        marginLeft: '80%'\r\n    }\r\n}","import React from 'react';\r\nimport { Typography, Card, CardHeader, CardContent, FormControl,\r\n         FormLabel, CardActions,\r\n         Button, \r\n         Avatar,\r\n         Badge} from '@material-ui/core';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\n\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { EscapeSpecialCharacters } from '../../common/HelperFunctions';\r\n\r\nconst Question = (props) => {\r\n    console.log('q-props', props);\r\n    const { model, selectedAnswers } = props;\r\n    return (\r\n        <div>\r\n            <Typography variant=\"subtitle1\">\r\n                {/* {model.mcq.mcq_meta.description} */}\r\n                <div\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: EscapeSpecialCharacters(model.mcq.mcq_meta.description)\r\n                    }}>\r\n                </div>\r\n            </Typography>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Options</FormLabel>\r\n                {model.mcq.mcq_meta.choices && model.mcq.mcq_meta.choices.length > 0 &&\r\n                <div className=\"list-group\">\r\n                    {model.mcq.mcq_meta.choices.map((choiceItem, choiceIndex) => {\r\n                        return (\r\n                            <div\r\n                                onClick={event => props.onResponseChange(choiceItem.key)}\r\n                                className={`noBorderRadius btn text-left list-group-item border-primary ${model.candidateResponse.responseKeys.indexOf(choiceItem.key) > -1 ? 'bg-warning' : ''}`}\r\n                                >\r\n                                    <div className=\"col-md-2\">\r\n                                            <Avatar className=\"bg-primary\">\r\n                                                {choiceItem.key}\r\n                                            </Avatar>\r\n                                            {/* <Badge color=\"secondary\" badgeContent={choiceItem.key} /> */}\r\n                                    </div>\r\n                                    <div className=\"col-md-10\">\r\n                                        {/* {choiceItem.content} */}\r\n                                        <div\r\n                                            dangerouslySetInnerHTML={{\r\n                                                __html: EscapeSpecialCharacters(choiceItem.content)\r\n                                            }}>\r\n                                        </div>\r\n                                    </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                }\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n/*      \r\nconst Question = (props) => {\r\n    console.log('q-props', props);\r\n    const { model, selectedAnswers } = props;\r\n    return (\r\n        <div>\r\n            <Typography variant=\"subtitle1\">\r\n                {model.mcq.mcq_meta.description}\r\n            </Typography>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Options</FormLabel>\r\n                {model.mcq.mcq_meta.choices && model.mcq.mcq_meta.choices.length > 0 &&\r\n                <List>\r\n                    {model.mcq.mcq_meta.choices.map((choiceItem, choiceIndex) => {\r\n                        return (\r\n                            <ListItem\r\n                            key={choiceIndex}\r\n                            button\r\n                            className=\"alert alert-primary\"\r\n                            selected={model.candidateResponse.responseKeys.indexOf(choiceItem.key) > -1}\r\n                            onClick={event => props.onResponseChange(choiceItem.key)}>\r\n                            <ListItemIcon>\r\n                                <Avatar>\r\n                                    {choiceItem.key}\r\n                                </Avatar>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={choiceItem.content} />\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n                }\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}*/\r\nexport default Question;\r\nconst styles = {\r\n    noRadius: {\r\n        borderLeftRadius: '0px ! important'\r\n    }\r\n}","import React from 'react';\r\nimport { Typography, Card, CardHeader, CardContent, FormControl,\r\n         FormLabel, CardActions,\r\n         Button } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport TickComponent from '../../components/lib/TickComponent';\r\nimport Question from '../../components/Simulator/Question';\r\n\r\nclass QuestionSimulatorConsoleContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let userInfo = AuthHelper.GetUserInfo();\r\n        console.log('userInfo', userInfo);\r\n        this.state = {\r\n            mcq: {},\r\n            selectedAnswers : []\r\n        };\r\n    }\r\n\r\n    render = () => {\r\n        let { model, currentQuestion, classes } = this.props;\r\n        let { selectedAnswers } = this.state;\r\n        let qEntity = {};\r\n        let questionNumberText = '';\r\n        let currentQuestionIndex = 0;\r\n        let totalQuestions = 0;\r\n        let testDurtion = 90;\r\n        if(model && currentQuestion) {\r\n            qEntity = currentQuestion;\r\n            if(model.response_meta && model.response_meta.mcqs) {\r\n                currentQuestionIndex = (qEntity.questionOrderIndex+1);\r\n                totalQuestions = model.response_meta.mcqs.length;\r\n                questionNumberText = 'Q.' + currentQuestionIndex + ' of ' + totalQuestions;\r\n                testDurtion = model.response_meta.duration;\r\n                console.log('current-q: ', currentQuestion);\r\n            }\r\n        }\r\n        if(!qEntity) {\r\n            return (\r\n                <LoadingComponent />\r\n            )\r\n        }\r\n        else {\r\n        return (\r\n                <Card>\r\n                    <CardHeader\r\n                            action={\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-8\">\r\n                                        <TickComponent \r\n                                            onTimeElapse={() => this.props.submitAnswers() }\r\n                                            minutes={testDurtion}/>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                    <Button color=\"secondary\" size=\"large\" variant=\"contained\"\r\n                                            onClick={() => this.props.submitAnswers() }>\r\n                                        Submit\r\n                                    </Button>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            title={qEntity.mcq.mcq_meta.question}\r\n                            subheader={<span text=\"text-dark\">{questionNumberText}</span>}>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                        <Question\r\n                            classes={classes}\r\n                            model = {qEntity}\r\n                            onResponseChange = {(choiceKey) => this.props.onResponseChange(choiceKey)}\r\n                        />\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        {currentQuestionIndex !== 1 &&\r\n                        <Button variant=\"contained\" size=\"small\"\r\n                                onClick={() => this.props.goToPrevious()} >Previous</Button>\r\n                        }\r\n                        {currentQuestionIndex !== totalQuestions &&\r\n                        <Button variant=\"contained\" size=\"small\" color=\"primary\"\r\n                                onClick={() => this.props.goToNext()}>Next</Button>\r\n                        }\r\n                    </CardActions>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default QuestionSimulatorConsoleContainer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from '@material-ui/core';\r\nimport QuestionSimulatorConsoleContainer from './QuestionSimulatorConsoleContainer';\r\nimport { LoadExamSimulator, LoadRegisteredExamSimulator,\r\n        ResponseChange, SubmitAnswers, SubmitRegisteredTestAnswers,\r\n        GetInvitation,\r\n        GoToPrevious, GoToNext } from '../../actions/QuestionSimulatorConsoleActions';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { RecordingComponent } from '../../components/lib/RecordingComponent';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport config from '../../config';\r\n\r\nclass SimulatorConsoleContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            deviceAccess: 'denied'\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        config.instance.initialize();\r\n        let { inviteid, registrationId } = this.props.match.params;\r\n        console.log('this.props.location', this.props.location);\r\n        let pathName = (this.props.location && this.props.location.pathname) ? this.props.location.pathname : '';\r\n        if(pathName.indexOf('startRegisteredTest') > -1) {\r\n            this.props.LoadRegisteredExamSimulator(registrationId);\r\n        }\r\n        else {\r\n            this.props.LoadExamSimulator(inviteid, registrationId);\r\n        }\r\n    }\r\n\r\n    submitAnswers = (candidateTestObject) => {\r\n        console.log('this.props.location', this.props.location);\r\n        let pathName = (this.props.location && this.props.location.pathname) ? this.props.location.pathname : '';\r\n        if(pathName.indexOf('startRegisteredTest') > -1) {\r\n            this.props.SubmitRegisteredTestAnswers(candidateTestObject);\r\n        }\r\n        else {\r\n            this.props.SubmitAnswers(candidateTestObject);\r\n        }\r\n    }\r\n\r\n    SetDeviceAccess = (access) => {\r\n        this.setState({\r\n            deviceAccess: access\r\n        });\r\n        // this.props.history.push('/testLanding/3');\r\n    }\r\n\r\n    render = () => {\r\n        let { candidateTestObject, currentQuestion, status, classes } = this.props;\r\n        let { deviceAccess } = this.state;\r\n\r\n        console.log('sc-props', this.props);\r\n        console.log('deviceAccess', deviceAccess);\r\n\r\n        if(!candidateTestObject) {\r\n            if(status) {\r\n                return (\r\n                    <div>\r\n                        <div className=\"alert alert-info\">\r\n                            {status.message}\r\n                        </div>\r\n                        <br/>\r\n                            <a href=\"#\" onClick={() => window.close()} \r\n                            className=\"btn btn-secondary\">Close and exit the test session</a>\r\n                        \r\n                    </div>\r\n                )\r\n            }\r\n            return <LoadingComponent />\r\n        }\r\n        /*if(candidateTestObject &&\r\n            candidateTestObject.response_meta && \r\n            candidateTestObject.response_meta.videoMonitoringRequired && \r\n            deviceAccess === 'denied') {\r\n            return (\r\n                <>\r\n                    <RecordingComponent \r\n                        setDeviceAccess={(access) => this.SetDeviceAccess(access)}    \r\n                    />\r\n                </>\r\n            )\r\n        }*/\r\n        return (\r\n        <div>\r\n            {\r\n                candidateTestObject &&\r\n                candidateTestObject.response_meta && \r\n                candidateTestObject.response_meta.videoMonitoringRequired &&\r\n                <RecordingComponent   \r\n                    responseId={candidateTestObject.id}\r\n                    setDeviceAccess={(access) => this.SetDeviceAccess(access)}    \r\n                />\r\n            }\r\n        {     \r\n            (deviceAccess === 'granted' || \r\n            candidateTestObject &&\r\n                candidateTestObject.response_meta && \r\n                !candidateTestObject.response_meta.videoMonitoringRequired) &&\r\n            <QuestionSimulatorConsoleContainer \r\n                classes={classes}\r\n                model={candidateTestObject}\r\n                currentQuestion={currentQuestion} \r\n                onResponseChange={ (choiceKey) => this.props.ResponseChange(choiceKey, currentQuestion, candidateTestObject.response_meta.mcqs)}\r\n                goToPrevious={() => this.props.GoToPrevious(currentQuestion, candidateTestObject.response_meta.mcqs)}\r\n                goToNext={() => this.props.GoToNext(currentQuestion, candidateTestObject.response_meta.mcqs)}\r\n                submitAnswers={() => this.submitAnswers(candidateTestObject)}/>\r\n        }\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.questionSimulatorConsoleReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    GetInvitation: (invitationId) => dispatch(GetInvitation(invitationId)),\r\n    LoadExamSimulator: (invitationId) => dispatch(LoadExamSimulator(invitationId)),\r\n    LoadRegisteredExamSimulator: (registrationId) => dispatch(LoadRegisteredExamSimulator(registrationId)),\r\n    ResponseChange: (choiceKey, currentQuestion, mcqList) => dispatch(ResponseChange(choiceKey, currentQuestion, mcqList)),\r\n    GoToPrevious: (currentQuestion, mcqs) => dispatch(GoToPrevious(currentQuestion, mcqs)),\r\n    GoToNext: (currentQuestion, mcqs) => dispatch(GoToNext(currentQuestion, mcqs)),\r\n    SubmitAnswers: (candidateTestObject) => dispatch(SubmitAnswers(candidateTestObject)),\r\n    SubmitRegisteredTestAnswers: (candidateTestObject) => dispatch(SubmitRegisteredTestAnswers(candidateTestObject))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SimulatorConsoleContainer);\r\n","import config from '../config';\r\nimport repository from '../repository';\r\nimport AuthHelper from '../AuthHelper';\r\n\r\nexport const LOAD_EXAM_SIMULATOR_SUCCESS = 'LOAD_EXAM_SIMULATOR_SUCCESS';\r\nexport const GO_TO_PREVIOUS = 'GO_TO_PREVIOUS';\r\nexport const GO_TO_NEXT = 'GO_TO_NEXT';\r\nexport const CANDIDATE_RESPONSE_CHANGED = 'CANDIDATE_RESPONSE_CHANGED';\r\nexport const SUBMIT_ANSWERS_SUCCESS = 'SUBMIT_ANSWERS_SUCCESS';\r\nexport const SET_CANDIDATE_INFO = 'SET_CANDIDATE_INFO';\r\nexport const INVITATION_FETCH_FAILED = 'INVITATION_FETCH_FAILED';\r\nexport const SHOW_RESPONSE_ALREADY_SUBMITTED = 'SHOW_RESPONSE_ALREADY_SUBMITTED';\r\n\r\nexport const ResponseChange = (responseKey, currentQuestion, mcqList) => dispatch => {\r\n    console.log('response changed', currentQuestion);\r\n    let mcqsWithResponses = [];\r\n    let mcqWithResponse = {\r\n        mcqId: currentQuestion.id\r\n    }\r\n    mcqList.map((mcqItem, index) => {\r\n        if (mcqItem.mcqId === currentQuestion.mcqId) {\r\n            if(mcqItem.candidateResponse &&\r\n                mcqItem.candidateResponse.responseKeys) {\r\n                    let removeKeyIndex = mcqItem.candidateResponse.responseKeys.indexOf(responseKey);\r\n                    if(removeKeyIndex > -1) {\r\n                        mcqItem.candidateResponse.responseKeys.splice(removeKeyIndex, 1);\r\n                    }\r\n                    else {\r\n                        mcqItem.candidateResponse.responseKeys.push(responseKey);\r\n                    }\r\n                    \r\n                    dispatch({\r\n                        type: CANDIDATE_RESPONSE_CHANGED,\r\n                        payload: mcqItem\r\n                    })\r\n                }\r\n        }\r\n    });\r\n}\r\n\r\nexport const GetInvitation = (invitationId) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getCandidateApiUrl() + 'invitaion';\r\n        let invitationModel = {\r\n            invitationId: invitationId\r\n        };\r\n        repository.getData(url)\r\n                    .then((res) => {\r\n                        AuthHelper.Login(res);\r\n                        let userInfo = AuthHelper.GetUserInfo();\r\n                        dispatch({\r\n                            type: SET_CANDIDATE_INFO,\r\n                            payload: userInfo\r\n                        });\r\n                        resolve(true);\r\n                    })\r\n                    .catch((err) => {\r\n                        dispatch({\r\n                            type: INVITATION_FETCH_FAILED,\r\n                            payload: err\r\n                        });\r\n                        reject(err);\r\n                    });\r\n\r\n    })\r\n}\r\n\r\nexport const LoadExamSimulator = (invitationId) => dispatch => {\r\n    let userInfo = AuthHelper.GetUserInfo();\r\n    let url = config.instance.getCandidateApiUrl() + 'startTest';\r\n    let invitationModel = {\r\n        invitationId: invitationId\r\n    };\r\n    repository.saveData(url, invitationModel)\r\n            .then((res) => {\r\n                console.log('loadexamsimulator', res);\r\n                if(res && res.data && res.data.message) {\r\n                    dispatch({\r\n                        type: SUBMIT_ANSWERS_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                    AuthHelper.LogOut();\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: LOAD_EXAM_SIMULATOR_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                }\r\n            })\r\n}\r\n\r\nexport const LoadRegisteredExamSimulator = (registrationId) => dispatch => {\r\n    let userInfo = AuthHelper.GetUserInfo();\r\n    let url = config.instance.getCandidateApiUrl() + 'startRegisteredTest';\r\n    let model = {\r\n        registrationId: registrationId\r\n    };\r\n    repository.saveData(url, model)\r\n            .then((res) => {\r\n                console.log('loadregisteredexamsimulator', res);\r\n                if(res && res.data && res.data.message) {\r\n                    dispatch({\r\n                        type: SUBMIT_ANSWERS_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                    AuthHelper.LogOut();\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: LOAD_EXAM_SIMULATOR_SUCCESS,\r\n                        payload: res.data\r\n                    });\r\n                }\r\n            })\r\n}\r\n\r\nexport const GoToPrevious = (currentQuestion, mcqList) => dispatch => {\r\n    if(mcqList && mcqList.length > 1){\r\n        let questionOrderIndex = currentQuestion.questionOrderIndex;\r\n        if(questionOrderIndex <= 0) return;\r\n        let newQuestion = mcqList.find((item) => {\r\n            return item.questionOrderIndex === questionOrderIndex - 1;\r\n        });\r\n        dispatch({\r\n            type: GO_TO_PREVIOUS,\r\n            payload: newQuestion \r\n        });\r\n    }\r\n}\r\n\r\nexport const GoToNext = (currentQuestion, mcqList) => dispatch => {\r\n    if(mcqList && mcqList.length > 1){\r\n        let questionOrderIndex = currentQuestion.questionOrderIndex;\r\n        if(questionOrderIndex >= mcqList.length-1) return;\r\n        let newQuestion = mcqList.find((item) => {\r\n            return item.questionOrderIndex === questionOrderIndex + 1;\r\n        });\r\n        dispatch({\r\n            type: GO_TO_NEXT,\r\n            payload: newQuestion \r\n        });\r\n    }\r\n}\r\n\r\nexport const SubmitAnswers = (candidateTestObject) => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'submitAnswers';\r\n    \r\n    repository.saveData(url, candidateTestObject)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: SUBMIT_ANSWERS_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .then(() => {\r\n                AuthHelper.LogOut();\r\n            });\r\n}\r\n\r\nexport const SubmitRegisteredTestAnswers = (candidateTestObject) => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'submitRegisteredTest';\r\n    \r\n    repository.saveData(url, candidateTestObject)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: SUBMIT_ANSWERS_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .then(() => {\r\n                AuthHelper.LogOut();\r\n            });\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, Typography } from '@material-ui/core';\r\n\r\n\r\nconst RmaCustomerDetails = (props) => {\r\n    let { model } = props;\r\n    // console.log('rmacustomermodel', model);\r\n    // console.log('model.telephone ? model.telephone : ',model.telephone ? model.telephone : '');\r\n    return (\r\n        <div>\r\n            {model && \r\n        <Card style={{padding: \"1%\"}}>\r\n            <CardHeader \r\n                title={<Typography variant=\"subtitle1\">Customer Details</Typography>}>\r\n            </CardHeader>\r\n            <CardContent>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                \r\n                    <FormControl variant=\"outlined\" style={styles.fullWidth}>\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Customer Name\"\r\n                            value={model.customerName ? model.customerName : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'customerName')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl variant=\"outlined\" style={styles.fullWidth}>\r\n                        <TextField\r\n                            id=\"outlined-address\"\r\n                            label=\"Address\"\r\n                            value={model.address ? model.address : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'address')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl variant=\"outlined\" style={styles.width50}>\r\n                        <TextField\r\n                            id=\"outlined-tel\"\r\n                            label=\"Tel\"\r\n                            value={model.telephone ? model.telephone : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'telephone')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl variant=\"outlined\" style={styles.width50}>\r\n                        <TextField\r\n                            id=\"outlined-fax\"\r\n                            label=\"Fax\"\r\n                            value={model.fax ? model.fax : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'fax')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl variant=\"outlined\" style={styles.width50}>\r\n                        <TextField\r\n                            id=\"outlined-email\"\r\n                            label=\"Email\"\r\n                            value={model.email ? model.email : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'email')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl variant=\"outlined\" style={styles.width50}>\r\n                        <TextField\r\n                            id=\"outlined-contact\"\r\n                            label=\"Contact Person\"\r\n                            value={model.contactPerson ? model.contactPerson : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'contactPerson')}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n            </form>\r\n            </CardContent>\r\n        </Card>}\r\n        </div>\r\n    );\r\n}\r\nexport default RmaCustomerDetails;\r\n\r\nconst styles={\r\n    fullWidth: {\r\n        width: '100%',\r\n        paddingLeft: '2%',\r\n        // paddingRight: '2%'\r\n    },\r\n    width50: {\r\n        width: '40%',\r\n        paddingLeft: '2%',\r\n        paddingRight: '2%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, DialogContent, Dialog, DialogTitle, DialogActions, Divider, Grid } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Close, Add } from '@material-ui/icons';\r\n\r\nclass AddRmaProduct extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false\r\n        };\r\n    }\r\n        \r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      this.props.onSubmit(this.props.model);\r\n      this.handleClose();\r\n    }\r\n    \r\n    render = () => {\r\n        let { model } = this.props;\r\n        // console.log('current_product', model);\r\n        return (\r\n            <div>\r\n            {model && \r\n            <Card>   \r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}><Add /></Button>\r\n                <Dialog\r\n                fullWidth\r\n                maxWidth='lg'\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                >\r\n                <DialogTitle onClose={this.handleClose}>Add product to RMA</DialogTitle>\r\n                <Divider />\r\n                <DialogContent style={{padding: '4%'}}>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                        <Grid container spacing={16}>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-modelNo\"\r\n                                        label=\"Model No\"\r\n                                        className={styles.dense}\r\n                                        value={model.modelNo ? model.modelNo : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'modelNo')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-desc\"\r\n                                        label=\"Description\"\r\n                                        className={styles.dense}\r\n                                        value={model.description ? model.description : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'description')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                                <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-qty\"\r\n                                        label=\"Qty\"\r\n                                        className={styles.dense}\r\n                                        value={model.quantity ? model.quantity : 0}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'quantity')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-invoice\"\r\n                                        label=\"Invoice#\"\r\n                                        className={styles.dense}\r\n                                        value={model.invoiceNo ? model.invoiceNo : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'invoiceNo')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-deliveryChallanNo\"\r\n                                        label=\"Delivery Challan#\"\r\n                                        className={styles.dense}\r\n                                        value={model.deliveryChallanNo ? model.deliveryChallanNo : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'deliveryChallanNo')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-serialNo\"\r\n                                        label=\"Serial#\"\r\n                                        className={styles.dense}\r\n                                        value={model.serialNo ? model.serialNo : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'serialNo')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-productUseAddress\"\r\n                                        label=\"Location of product use\"\r\n                                        className={styles.dense}\r\n                                        value={model.productUseAddress ? model.productUseAddress : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'productUseAddress')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                            <Grid item sm={12} xs={12} md={5}>\r\n                                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                    <TextField\r\n                                        id=\"outlined-failureDescription\"\r\n                                        label=\"Failure Description\"\r\n                                        multiline\r\n                                        rows=\"4\"\r\n                                        className={styles.dense}\r\n                                        value={model.failureDescription ? model.failureDescription : ''}\r\n                                        onChange={(e) => this.props.onFieldChange(e.target.value, 'failureDescription')}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                </FormControl>\r\n                                </Grid>\r\n                                </Grid>\r\n                    </form>\r\n                    </DialogContent>\r\n                    <Divider />\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" size=\"small\" color=\"default\"\r\n                                        onClick={ () => this.handleSubmit(this.props.model)}>\r\n                            Add Product\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Card>}\r\n        \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nexport default AddRmaProduct;","import React, { Fragment } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, CardContent, Typography } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport AddRmaProduct from './AddRmaProduct';\r\n\r\nconst RmaProductList = (props) => {\r\n    return (\r\n        <Card style={{padding: \"1%\"}}>\r\n            <CardHeader \r\n                action={\r\n                    <AddRmaProduct\r\n                        onSubmit={ (product) => props.onAddRmaProduct(product) }\r\n                        model={props.current_product}\r\n                        onFieldChange={ (val, field) => props.onProductFieldChange(val, field) } \r\n                        />\r\n                }         \r\n            title={<Typography variant=\"subtitle1\">{`Products ${props.productList ? \"(\"+props.productList.length+\")\" : \"\" }`}</Typography>}>\r\n            </CardHeader>\r\n            <CardContent>\r\n                <Table>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <CustomTableCell>Model No.</CustomTableCell>\r\n                        <CustomTableCell>Description</CustomTableCell>\r\n                        <CustomTableCell>Qty</CustomTableCell>\r\n                        <CustomTableCell>Invoice#</CustomTableCell>\r\n                        <CustomTableCell>Delivery Challan#</CustomTableCell>\r\n                        <CustomTableCell>Serial#</CustomTableCell>\r\n                        <CustomTableCell>Location of product use (complete address)</CustomTableCell>\r\n                        <CustomTableCell>Failure Description</CustomTableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {props.productList.map((product, index) => (\r\n                        <Fragment key={index}>\r\n                        <TableRow >\r\n                            <CustomTableCell>{product.modelNo}</CustomTableCell>\r\n                            <CustomTableCell>{product.description}</CustomTableCell>\r\n                            <CustomTableCell>{product.quantity}</CustomTableCell>\r\n                            <CustomTableCell>{product.invoiceNo}</CustomTableCell>\r\n                            <CustomTableCell>{product.deliveryChallanNo}</CustomTableCell>\r\n                            <CustomTableCell>{product.serialNo}</CustomTableCell>\r\n                            <CustomTableCell>{product.productUseAddress}</CustomTableCell>\r\n                            <CustomTableCell>{product.failureDescription}</CustomTableCell>\r\n                        </TableRow>\r\n                        </Fragment>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n            {(!props.productList || props.productList.length === 0) &&\r\n            <Typography variant=\"subtitle1\" align=\"center\">\r\n                Please add product details\r\n            </Typography>}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n    //   backgroundColor: theme.palette.common.black,\r\n    //   color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default RmaProductList;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, Typography } from '@material-ui/core';\r\n\r\n\r\nconst RmaVendorDetails = (props) => {\r\n    let { model } = props;\r\n    return (\r\n        <div>\r\n            {model && \r\n        <Card style={{padding: \"1%\"}}>\r\n            <CardHeader \r\n                title={<Typography variant=\"caption\">If the product was not bought from us, please mention the details of purchase-</Typography>}>\r\n            </CardHeader>\r\n            <CardContent>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                <FormControl variant=\"outlined\" style={styles.halfWidth}>\r\n                    <TextField\r\n                        id=\"outlined-purchaseDate\"\r\n                        label=\"Date of Purchase\"\r\n                        className={styles.dense}\r\n                        value={model.purchaseDate ? model.purchaseDate : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'purchaseDate')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </FormControl>\r\n                <FormControl variant=\"outlined\" style={styles.halfWidth}>\r\n                    <TextField\r\n                        id=\"outlined-vendorName\"\r\n                        label=\"Vendor / Supplier Name\"\r\n                        className={styles.dense}\r\n                        value={model.vendorName ? model.vendorName : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'vendorName')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </FormControl>\r\n                <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                    <TextField\r\n                        id=\"outlined-address\"\r\n                        label=\"Location / Address\"\r\n                        multiline\r\n                        rows=\"4\"\r\n                        className={styles.dense}\r\n                        value={model.address ? model.address : ''}\r\n                        onChange={(e) => props.onFieldChange(e.target.value, 'address')}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                    />\r\n                </FormControl>\r\n            </form>\r\n            </CardContent>\r\n        </Card>}\r\n        </div>\r\n    );\r\n}\r\nexport default RmaVendorDetails;\r\n\r\nconst styles = {\r\n    formControl: {\r\n        width: '90%',\r\n        marginLeft: '2%'\r\n    },\r\n    halfWidth: {\r\n        width: '40%',\r\n        marginLeft: '2%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst RmaTermsAndConditions = (props) => {\r\n    return (\r\n        <div className=\"divContainer\">\r\n        <Typography variant=\"subtitle1\">1) All Accessories including cables &amp; power supply must only be returned back along with the product unless otherwise specified by us. </Typography>\r\n        <Typography variant=\"subtitle1\">2) Warranty claim may be rejected if product is physically damaged. </Typography>\r\n        <Typography variant=\"subtitle1\">3) All road tax, Octroi or any entry tax is payable by customer. </Typography>\r\n        <Typography variant=\"subtitle1\">4) Customer should send the product to our warehouse address mentioned below on freight prepaid basis. </Typography>\r\n        </div>\r\n    );\r\n}\r\nexport default RmaTermsAndConditions;","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst HiTechAddress = (props) => {\r\n    return (\r\n        <div className=\"divContainer\">\r\n            <Typography variant=\"caption\">\r\n            Highness Microelectronics Pvt. Ltd.<br></br>\r\n            RMA Department (RMA#XXXXXXXX)</Typography>\r\n            <Typography variant=\"subtitle1\">\r\n            8-C, 1 st Floor, New Tejpal Industrial Estate.,<br></br>\r\n            Kurla Andheri Road, Sakinaka, Mumbai - 400072.</Typography><br></br>\r\n        </div>\r\n    );\r\n}\r\nexport default HiTechAddress;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, Typography } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Loading from '../components/lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport RmaCustomerDetails from './RmaCustomerDetails';\r\nimport RmaProductList from './RmaProductList';\r\nimport RmaVendorDetails from './RmaVendorDetails';\r\nimport RmaTermsAndConditions from './RmaTermsAndConditions';\r\nimport HiTechAddress from './HiTechAddress';\r\nimport Book from '@material-ui/icons/Book';\r\n\r\nconst AddRmaRequestComponent = (props) => {\r\n    let { model } = props;\r\n    model.customerDetails = !model.customerDetails ? {} : model.customerDetails;\r\n    model.productList = !model.productList ? [] : model.productList;\r\n    model.current_product = !model.current_product ? {} : model.current_product;\r\n    model.vendorDetails = !model.vendorDetails ? {} : model.vendorDetails;\r\n    \r\n    let display = (props) ? 'block' : 'none';\r\n    return (\r\n        <Card style={{padding: \"1%\"}}>\r\n                    <CardHeader \r\n                        avatar={\r\n                            <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                                <Book />\r\n                            </Avatar>\r\n                            }\r\n                            title=\"Create RMA Request\">\r\n                    </CardHeader>\r\n                <CardContent>\r\n                    <RmaCustomerDetails\r\n                        model={model.customerDetails}\r\n                        onFieldChange={(val, field) => props.onFieldChange(val, field, model)}\r\n                    />\r\n                    <br></br>\r\n                    <RmaProductList\r\n                        current_product={model.current_product}\r\n                        productList={model.productList}\r\n                        onProductFieldChange={(val, field) => props.onProductFieldChange(val, field, model)}\r\n                        onAddRmaProduct={(productItem) => props.onAddRmaProduct(productItem, model)}\r\n                        />\r\n                    <br></br>\r\n                    <RmaVendorDetails\r\n                        model={model.vendorDetails}\r\n                        onFieldChange={(val, field) => props.onVendorDetailsFieldChange(val, field, model)}\r\n                        />\r\n                    <RmaTermsAndConditions />\r\n                    <HiTechAddress />\r\n                    \r\n                    <FormControl variant=\"outlined\" style={styles.width50}>\r\n                        <TextField\r\n                            id=\"outlined-emailTo\"\r\n                            label=\"Notify At\"\r\n                            value={model.emailTo ? model.emailTo : ''}\r\n                            onChange={(e) => props.onFieldChange(e.target.value, 'emailTo', model)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </FormControl>\r\n                </CardContent>\r\n                <CardActions style={styles.actionButton}>\r\n                    <Button variant=\"contained\" size=\"large\" color=\"primary\" \r\n                                onClick={ () => props.onSubmit(model) }>\r\n                                Submit\r\n                    </Button>\r\n                </CardActions>\r\n        </Card>\r\n    );\r\n}\r\nexport default AddRmaRequestComponent;\r\nconst styles={\r\n    fullWidth: {\r\n        width: '100%',\r\n        paddingLeft: '2%',\r\n        // paddingRight: '2%'\r\n    },\r\n    width50: {\r\n        width: '40%',\r\n        paddingLeft: '2%',\r\n        paddingRight: '2%'\r\n    },\r\n    actionButton: {\r\n        // marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardHeader, CardContent, Typography, Button } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nconst RmaRequestList = (props) => {\r\n    let { rmaRequests } = props;\r\n    let requestList = rmaRequests;\r\n    if(rmaRequests && rmaRequests.length > 0) {\r\n        requestList = rmaRequests.reverse();\r\n    }\r\n    return (\r\n        <Card style={{padding: \"1%\"}}>\r\n            <CardHeader \r\n                action={\r\n                    <Link to={ { pathname: \"/createRma\" }}>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\" >\r\n                                Create RMA Request\r\n                        </Button>\r\n                    </Link>\r\n                }         \r\n            title={<Typography variant=\"subtitle1\">{`RMA Requests ${props.rmaRequests ? \"(\"+props.rmaRequests.length+\")\" : \"\" }`}</Typography>}>\r\n            </CardHeader>\r\n            <CardContent>\r\n                <Table>\r\n                    <TableHead>\r\n                    <TableRow>\r\n                        <CustomTableCell>Customer Name</CustomTableCell>\r\n                        <CustomTableCell>Email</CustomTableCell>\r\n                        <CustomTableCell>Contact Person</CustomTableCell>\r\n                        <CustomTableCell>Telephone</CustomTableCell>\r\n                        <CustomTableCell></CustomTableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {requestList && requestList.map((rmaRequest, index) => (\r\n                        <Fragment key={index}>\r\n                        <TableRow >\r\n                            <CustomTableCell>{rmaRequest.customerDetails.customerName}</CustomTableCell>\r\n                            <CustomTableCell>{rmaRequest.customerDetails.email}</CustomTableCell>\r\n                            <CustomTableCell>{rmaRequest.customerDetails.contactPerson}</CustomTableCell>\r\n                            <CustomTableCell>{rmaRequest.customerDetails.telephone}</CustomTableCell>\r\n                            <CustomTableCell align=\"right\" scope=\"row\" component=\"th\">\r\n                                <Button color=\"primary\" onClick={() => props.onViewRma(rmaRequest)}>View</Button>\r\n                            </CustomTableCell>\r\n                        </TableRow>\r\n                        </Fragment>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n            {(!props.rmaRequests || props.rmaRequests.length === 0) &&\r\n            <Typography variant=\"subtitle1\" align=\"center\">\r\n                No RMA requests found\r\n            </Typography>}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n    //   backgroundColor: theme.palette.common.black,\r\n    //   color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default RmaRequestList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddRmaRequestComponent from './AddRmaRequest';\r\nimport RmaRequestList from './RmaRequestList';\r\nimport {    AddRmaRequest, FetchRmaRequests, \r\n            CloseSnackbar, CurrentRmaRequestFieldChange,\r\n            ProductFieldChange, VendorDetailsFieldChange,\r\n            AddProductToRma, InitializeRmaFields,\r\n            OpenSnackbar } from './RmaRequestActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nclass AddRmaRequestContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.InitializeRmaFields();\r\n    }\r\n\r\n    componentWillUpdate = () => {\r\n        console.log('component updated');\r\n        if(this.props.success_message) {\r\n            console.log('this.props.success_message');\r\n            this.props.history.push({\r\n                pathname: '/rmaRequests'\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps = () => {\r\n        console.log('component will receive props');\r\n        if(this.props.success_message) {\r\n            console.log('receive props this.props.success_message');\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        return(\r\n            <div>\r\n                {this.props.current_rma_request && \r\n                    <AddRmaRequestComponent \r\n                        onSubmit={ (model) => this.props.AddRmaRequest(model) }\r\n                        model={this.props.current_rma_request}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentRmaRequestFieldChange(val, field, model) } \r\n                        onVendorDetailsFieldChange={ (val, field, model) => this.props.VendorDetailsFieldChange(val, field, model) } \r\n                        onAddRmaProduct={(productItem, model) => this.props.AddProductToRma(productItem, model) }\r\n                        onProductFieldChange={(val, field, model) => this.props.ProductFieldChange(val, field, model)}\r\n                        />\r\n                }\r\n                {this.props.success_message && !this.props.saving && \r\n                    <SnackbarComponent \r\n                        openSnack={true} handleClose={() => this.props.CloseSnackbar()} \r\n                        snackMessage={\"RMA request Saved Successfully!\"} /> \r\n                }\r\n                {this.props.saving && \r\n                    <SnackbarComponent \r\n                        openSnack={true} handleClose={() => this.props.CloseSnackbar()} \r\n                        snackMessage={\"Saving...\"} /> \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.rmaReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddRmaRequest: (model) => dispatch(AddRmaRequest(model)),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentRmaRequestFieldChange: (val, field, model) => dispatch(CurrentRmaRequestFieldChange(val, field, model)),\r\n    ProductFieldChange: (val, field, model) => dispatch(ProductFieldChange(val, field, model)),\r\n    VendorDetailsFieldChange: (val, field, model) => dispatch(VendorDetailsFieldChange(val, field, model)),\r\n    AddProductToRma: (productItem, model) => dispatch(AddProductToRma(productItem, model)),\r\n    InitializeRmaFields: () => dispatch(InitializeRmaFields())\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRmaRequestContainer);\r\nconst styles={\r\n    fullWidth: {\r\n        width: '100%',\r\n        paddingLeft: '2%',\r\n        paddingRight: '2%'\r\n    },\r\n    width50: {\r\n        width: '50%',\r\n        paddingLeft: '2%',\r\n        paddingRight: '2%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const INITIALIZE_RMA_FIELDS = 'INITIALIZE_RMA_FIELDS';\r\nexport const ADD_RMAREQUESTS_BEGIN = 'ADD_RMAREQUESTS_BEGIN';\r\nexport const ADD_RMAREQUESTS_SUCCESS = 'ADD_RMAREQUESTS_SUCCESS';\r\nexport const ADD_RMAREQUESTS_FAIL = 'ADD_RMAREQUESTS_FAIL';\r\nexport const FETCH_RMAREQUESTS_BEGIN = 'FETCH_RMAREQUESTS_BEGIN';\r\nexport const FETCH_RMAREQUESTS_SUCCESS = 'FETCH_RMAREQUESTS_SUCCESS';\r\nexport const FETCH_RMAREQUEST_SUCCESS = 'FETCH_RMAREQUEST_SUCCESS';\r\nexport const FETCH_RMAREQUEST_FAIL = 'FETCH_RMAREQUEST_FAIL';\r\nexport const SELECT_RMA_REQUEST = 'SELECT_RMA_REQUEST';\r\nexport const GOBACK_TO_ALL_REQUESTS = 'GOBACK_TO_ALL_REQUESTS';\r\nexport const FETCH_RMAREQUESTS_FAIL = 'FETCH_RMAREQUESTS_FAIL';\r\nexport const UPDATE_RMAREQUESTS_BEGIN = 'UPDATE_RMAREQUESTS_BEGIN';\r\nexport const UPDATE_RMAREQUESTS_SUCCESS = 'UPDATE_RMAREQUESTS_SUCCESS';\r\nexport const UPDATE_RMAREQUESTS_FAIL = 'UPDATE_RMAREQUESTS_FAIL';\r\nexport const CURRENT_RMAREQUESTS_FIELD_CHANGE = 'CURRENT_RMAREQUESTS_FIELD_CHANGE';\r\nexport const CURRENT_RMAREQUESTS_FIELD_CHANGE_END = 'CURRENT_RMAREQUESTS_FIELD_CHANGE_END';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const InitializeRmaFields = () => dispatch => {\r\n    dispatch({\r\n        type: INITIALIZE_RMA_FIELDS\r\n    })\r\n} \r\n\r\nexport const CurrentRmaRequestFieldChange = (val, field, model) => dispatch => {\r\n    if(field === 'emailTo'){\r\n        model.emailTo = val;\r\n    }\r\n    else {\r\n        if(!model.customerDetails) model.customerDetails = {};\r\n        model.customerDetails[field] = val;\r\n        model.field_version = model.field_version++;\r\n    }\r\n    dispatch({\r\n        type: CURRENT_RMAREQUESTS_FIELD_CHANGE,\r\n        payload: model\r\n    });\r\n}\r\n\r\nexport const AddProductToRma = (productItem, model) => dispatch => {\r\n    if(!model.productList) model.productList = [];\r\n    model.productList.push(productItem);\r\n    console.log('model.productList', model.productList.length);\r\n    dispatch({\r\n        type: CURRENT_RMAREQUESTS_FIELD_CHANGE,\r\n        payload: model\r\n    });\r\n}\r\n\r\nexport const VendorDetailsFieldChange = (val, field, model) => dispatch => {\r\n    if(!model.vendorDetails) model.vendorDetails = {};\r\n    model.vendorDetails[field] = val;\r\n    dispatch({\r\n        type: CURRENT_RMAREQUESTS_FIELD_CHANGE,\r\n        payload: model\r\n    });\r\n}\r\n\r\nexport const ProductFieldChange = (val, field, model) => dispatch => {\r\n    if(!model.current_product) model.current_product = {};\r\n    model.current_product[field] = val;\r\n    dispatch({\r\n        type: CURRENT_RMAREQUESTS_FIELD_CHANGE,\r\n        payload: model\r\n    });\r\n}\r\n\r\nexport const AddRmaRequest = (rmaRequestModel) => dispatch => {\r\n    dispatch({\r\n        type: ADD_RMAREQUESTS_BEGIN\r\n    });\r\n    let url = config.hitechApiUrl + 'rmaRequest';\r\n    console.log('action model');\r\n    console.log(rmaRequestModel);\r\n    //return;\r\n    repository.saveData(url, rmaRequestModel)\r\n        .then((res) => {\r\n            console.log('rma request saved: ' + res);\r\n            dispatch({\r\n                type: ADD_RMAREQUESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: ADD_RMAREQUESTS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const UpdateRmaRequest = (rmaRequestModel) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_RMAREQUESTS_BEGIN\r\n    });\r\n    let url = config.hitechApiUrl + 'rmaRequest';\r\n    repository.updateData(url, rmaRequestModel)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: UPDATE_RMAREQUESTS_SUCCESS\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: UPDATE_RMAREQUESTS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchRmaRequests = () => dispatch => {\r\n    dispatch({\r\n        type: FETCH_RMAREQUESTS_BEGIN\r\n    });\r\n    let url = config.hitechApiUrl + 'rmaRequests';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            console.log('rma requests fetched');\r\n            dispatch({\r\n                type: FETCH_RMAREQUESTS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_RMAREQUESTS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchRmaRequest = (rmaRequestId) => dispatch => {\r\n    \r\n    let url = config.hitechApiUrl + 'rmaRequest/' + rmaRequestId;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            console.log('rma single request fetched');\r\n            dispatch({\r\n                type: FETCH_RMAREQUEST_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_RMAREQUEST_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const SelectRmaRequest = (rmaRequest) => dispatch => {\r\n    dispatch({\r\n        type: SELECT_RMA_REQUEST,\r\n        payload: rmaRequest\r\n    })\r\n}\r\n\r\nexport const GoBackToAllRequests = () => dispatch => {\r\n    dispatch({\r\n        type: GOBACK_TO_ALL_REQUESTS\r\n    })\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { Card, CardHeader, CardContent, Grid, Paper, Button, Divider, Chip } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom';\r\nimport RmaProductList from './RmaProductList';\r\nimport RmaVendorDetails from './RmaVendorDetails';\r\n\r\nclass ViewRmaRequest extends React.Component {\r\n    \r\n    renderCustomerDetails = (customerDetails) => {\r\n        return (\r\n            <Grid container spacing={16} style={styles.group}>\r\n                        <Grid item sm={3}>\r\n                            Customer Name\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            <strong>{customerDetails.customerName}</strong>\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            Contact Person\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            <strong>{customerDetails.contactPerson}</strong>\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            Telephone\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            <strong>{customerDetails.telephone}</strong>\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            Email\r\n                        </Grid>\r\n                        <Grid item sm={3}>\r\n                            <strong>{customerDetails.email}</strong>\r\n                        </Grid>\r\n\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    renderVendorDetails = (vendorDetails) => {\r\n        return (\r\n            <Grid container spacing={16} style={styles.group}> \r\n            <Grid item sm={3}>\r\n            Purchase Date\r\n        </Grid>\r\n        <Grid item sm={3}>\r\n            <strong>{vendorDetails.purchaseDate}</strong>\r\n        </Grid>\r\n        <Grid item sm={3}>\r\n            Vendor Name\r\n        </Grid>\r\n        <Grid item sm={3}>\r\n            <strong>{vendorDetails.vendorName}</strong>\r\n        </Grid>\r\n        <Grid item sm={3}>\r\n            Location\r\n        </Grid>\r\n        <Grid item sm={3}>\r\n            <strong>{vendorDetails.address}</strong>\r\n        </Grid>\r\n        </Grid>\r\n        );\r\n    }\r\n\r\n    render = () => {\r\n        let { model } = this.props;\r\n        console.log('view rma', model);\r\n        return (\r\n            <Card>\r\n                <CardHeader\r\n                    action={\r\n                        // <Link to={ { pathname: \"/rmaRequests\" }}>\r\n                            <Button color=\"primary\" size=\"small\" \r\n                                onClick={() => this.props.onBackToAllRequests()}>\r\n                                    Back to all requests\r\n                            </Button>\r\n                        // </Link>\r\n                    }         \r\n                    title={`RMA Request # ${model['$loki']}`}\r\n                />\r\n                <CardContent>\r\n                    <Grid container spacing={16}>\r\n                        {this.renderCustomerDetails(model.customerDetails)}\r\n                        <br></br>\r\n                        {this.renderVendorDetails(model.vendorDetails)}\r\n                        <RmaProductList\r\n                            productList={model.productList}\r\n                        />\r\n                        {model.emailTo && <Grid item sm={3}>\r\n                            <Chip label={`Notified to: ${model.emailTo}`}></Chip>\r\n                        </Grid>}\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default ViewRmaRequest;\r\nconst styles = {\r\n    group: {\r\n        padding: '2%'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddRmaRequestComponent from './AddRmaRequest';\r\nimport RmaRequestList from './RmaRequestList';\r\nimport {    FetchRmaRequests, SelectRmaRequest, \r\n            CloseSnackbar, GoBackToAllRequests,\r\n            OpenSnackbar } from './RmaRequestActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\nimport { Link } from 'react-router-dom';\r\nimport ViewRmaRequest from './ViewRmaRequest';\r\n\r\nclass RmaRequestListContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        console.log('did mount');\r\n        this.reload();\r\n    }\r\n\r\n    componentWillUpdate = () => {\r\n        if(this.props.success_message !== '') {\r\n            this.props.FetchRmaRequests();\r\n        }\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchRmaRequests();\r\n    }\r\n\r\n    render = () => {\r\n        let rmaRequests = [];\r\n        rmaRequests = this.props.rmaRequests;\r\n        if(rmaRequests)console.log('rmaRequests length', rmaRequests.length);\r\n        return(\r\n            <div>\r\n                {this.props.selectedRmaRequestModel === null &&\r\n                <RmaRequestList \r\n                    rmaRequests={rmaRequests}\r\n                    onViewRma={(rmaRequest) => this.props.SelectRmaRequest(rmaRequest)} \r\n                />}\r\n                {this.props.selectedRmaRequestModel &&\r\n                <ViewRmaRequest\r\n                    model={this.props.selectedRmaRequestModel}\r\n                    onBackToAllRequests={() => this.props.GoBackToAllRequests()}\r\n                />}\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data fetched Successfully!\"} /> \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.rmaReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchRmaRequests: () => dispatch(FetchRmaRequests()),\r\n    SelectRmaRequest: (rmaRequest) => dispatch(SelectRmaRequest(rmaRequest)),\r\n    GoBackToAllRequests: () => dispatch(GoBackToAllRequests()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RmaRequestListContainer);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport RedirectFromAction from '../../actions/RedirectFromAction';\r\nimport config from '../../config';\r\n\r\n\r\nconst PrivateRoute = ({ component: Component, authed, ...rest}) => {\r\n    console.log('isauth', isAuthorized());\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isAuthorized() === true\r\n                ? <Component {...rest} {...props} />\r\n                : <Redirect to={{pathname: '/login'}} />}\r\n        />\r\n    );\r\n}\r\n\r\nconst isAuthorized = () => {\r\n    let token = localStorage.getItem('auth-token');\r\n    if(token) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n/*\r\nclass PrivateRoute extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isCheckingToken: true,\r\n            isUserAuthorized: false\r\n        }\r\n        \r\n        // this.componentDidMountDummy();\r\n\r\n        config.instance.initialize()\r\n            .then((res) => {\r\n                console.log('config initialized in private ', res);\r\n                if(res){\r\n                    this.setState({\r\n                        isCheckingToken: false,\r\n                        isUserAuthorized: true\r\n                    })\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                // alert('err in shell');\r\n                this.setState({\r\n                    isCheckingToken: false,\r\n                    isUserAuthorized: false\r\n                })\r\n            })\r\n    }\r\n\r\n    componentDidMountDummy = () => {\r\n        let token = localStorage.getItem('auth-token');\r\n        \r\n        if(token) {\r\n            validateToken(token)\r\n                .then((res) => {\r\n                    if(res === true) {\r\n                        this.setState({\r\n                            isCheckingToken: false,\r\n                            isUserAuthorized: true\r\n                        })\r\n                    }\r\n                    else {\r\n                        this.setState({\r\n                            isCheckingToken: false,\r\n                            isUserAuthorized: false\r\n                        })\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.setState({\r\n                        isCheckingToken: false,\r\n                        isUserAuthorized: false\r\n                    })\r\n                })\r\n        }   \r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <Route \r\n                render={() => this.state.isUserAuthorized === true\r\n                    ? <this.props.component {...this.props} />\r\n                    : <Redirect to={{pathname: '/login'}} />}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst validateToken = (token) => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let domain = 'http://localhost:3001';\r\n        let apiUrl = this.isdevEnv() ? domain : '';\r\n        let url = apiUrl + '/api/validateUserToken';\r\n        \r\n        let options = {\r\n            headers: {\r\n            \"x-access-token\": token\r\n            }\r\n        };\r\n\r\n        axios.get(url, options)\r\n            .then((res) => {\r\n                console.log('res', res);\r\n                if(res.status === 401) {\r\n                    console.log('in resolve not authorized error received');\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('err', err);\r\n                if(err.data && err.data.message === 'Invalid token.') {\r\n                    AuthHelper.LogOut();\r\n                    // RedirectFromAction('userForbidden');\r\n                    // AuthHelper.LogOut();\r\n                    // RedirectFromAction('login');\r\n                }\r\n                reject(err);\r\n            })\r\n    })\r\n}\r\n\r\nconst isdevEnv = () => {\r\n    let locationHref = window.location.href;\r\n    return (locationHref.indexOf('localhost:3000') > -1 ||\r\n            locationHref.indexOf('localhost:3001') > -1);\r\n}\r\n*/\r\nexport default PrivateRoute;","import React, { Component, useState } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Typography, Grid, Card, CardContent, Avatar } from '@material-ui/core';\r\nimport { Assessment } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { getDateTime, formatToDecimals } from '../../Utils';\r\n\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { EscapeSpecialCharacters } from '../../common/HelperFunctions';\r\n\r\nclass CandidateResponseReport extends Component {\r\n\r\n    componentDidMount = () => {\r\n        console.log('this.props.candidateId', this.props.candidateId);\r\n        console.log('this.props.responseId', this.props.responseId);\r\n        this.props.fetchCandidateResponseReport(this.props.responseId, this.props.candidateId);\r\n    }\r\n\r\n    // formatScore = (score) => {\r\n    //     if(score && !isNaN(score)) return score.toFixed(2);\r\n    //     return 'NA';\r\n    // }\r\n\r\n    render = () => {\r\n        let { candidateResponses } = this.props;\r\n        let { response_meta, invitation_meta, evaluation_meta,\r\n              mcqCorrectAnswers } = candidateResponses || {}; \r\n        let { mcqs } = response_meta || {}; \r\n\r\n        let summary = {\r\n            totalQuestions:  mcqs ? mcqs.length : 0,\r\n            correctAnswersCount: 0,\r\n            totalScore: 'NA', \r\n            candidateScore: 'NA', \r\n            result: 'NA', \r\n            completedOn: 'NA'\r\n        };\r\n        let responsesToRender = [];\r\n        if(mcqs && mcqs.length > 0){\r\n            mcqs.map((mcqItem, index) => {\r\n                let mcq = mcqItem.mcq.mcq_meta;\r\n                let candidateResponse = mcqItem.candidateResponse ? mcqItem.candidateResponse.responseKeys.sort().join(\"\") : '';\r\n                let matchingMcqItem = mcqCorrectAnswers.filter((item) => {\r\n                    return item.mcqId === mcqItem.mcq.id;\r\n                })\r\n                let correctAnswer = '';\r\n                if(matchingMcqItem && matchingMcqItem.length > 0) {\r\n                    correctAnswer = matchingMcqItem[0].correctAnswer;\r\n                }\r\n                if(!correctAnswer) { // for unregistered candidates\r\n                    mcq.choices.forEach((choiceItem) => {\r\n                        if(choiceItem.isCorrect === true) {\r\n                            correctAnswer += choiceItem.key;\r\n                        }\r\n                    })\r\n                }\r\n                if(candidateResponse === correctAnswer) {\r\n                    summary.correctAnswersCount++;\r\n                }\r\n                responsesToRender.push({\r\n                    mcq,\r\n                    candidateResponse,\r\n                    correctAnswer,\r\n                    isCorrect: candidateResponse === correctAnswer,\r\n                })\r\n            });\r\n        }\r\n        if(response_meta && response_meta.scorePercentage) {\r\n            summary.candidateScore = formatToDecimals(response_meta.scorePercentage, 2);\r\n            summary.totalScore = response_meta.totalScore;\r\n            summary.result = response_meta.result;\r\n        }\r\n        else if(evaluation_meta && evaluation_meta.scorePercentage) {\r\n            summary.candidateScore = formatToDecimals(evaluation_meta.scorePercentage, 2);\r\n            summary.totalScore = evaluation_meta.totalScore;\r\n            summary.result = evaluation_meta.result;\r\n        }\r\n        if(invitation_meta && invitation_meta.completedOn) {\r\n            summary.completedOn = getDateTime(invitation_meta.completedOn);\r\n        }\r\n        else if(evaluation_meta && evaluation_meta.completedOn) {\r\n            summary.completedOn = getDateTime(evaluation_meta.completedOn);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {!mcqs && <LoadingComponent />}\r\n                {mcqs && mcqs.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No Responses Found </Typography>}\r\n                {mcqs && mcqs.length > 0 &&\r\n                <>\r\n                {this.renderSummary(summary)}\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <CustomTableCell align=\"left\">Number</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Topic</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Question</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Correct</CustomTableCell>\r\n                            <CustomTableCell align=\"left\">Response</CustomTableCell>\r\n                            {/* <CustomTableCell align=\"left\">Send Reminder</CustomTableCell> */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {responsesToRender.map((responseItem, index) => {\r\n                            // let mcq = mcqItem.mcq.mcq_meta;\r\n                            // let candidateResponse = mcqItem.candidateResponse ? mcqItem.candidateResponse.responseKeys.sort().join(\"\") : '';\r\n                            // let matchingMcqItem = mcqCorrectAnswers.filter((item) => {\r\n                            //     return item.mcqId === mcqItem.mcq.id;\r\n                            // })\r\n                            // let correctAnswer = '';\r\n                            // if(matchingMcqItem && matchingMcqItem.length > 0) {\r\n                            //     correctAnswer = matchingMcqItem[0].correctAnswer;\r\n                            // }\r\n                            // if(!correctAnswer) {\r\n                            //     mcq.choices.forEach((choiceItem) => {\r\n                            //         if(choiceItem.isCorrect === true) {\r\n                            //             correctAnswer += choiceItem.key;\r\n                            //         }\r\n                            //     })\r\n                            // }\r\n                            // if(candidateResponse === correctAnswer) {\r\n                            //     correctAnswersCount++;\r\n                            // }\r\n                            // console.log('mcq_meta', mcq);\r\n                        return (\r\n                            <TableRow key={index}\r\n                                className={responseItem.isCorrect ? 'bg-warning' : 'bg-danger text-white'}    \r\n                            >\r\n                                <CustomTableCell align=\"center\">{responseItem.mcq.questionOrderIndex+1}</CustomTableCell>\r\n                                <CustomTableCell align=\"left\">{responseItem.mcq.question}\r\n                                </CustomTableCell>\r\n                                <CustomTableCell align=\"left\"\r\n                                    dangerouslySetInnerHTML={{\r\n                                        __html: EscapeSpecialCharacters(responseItem.mcq.description)\r\n                                    }}>\r\n                                </CustomTableCell>\r\n                                {/* <CustomTableCell align=\"left\">{mcq.description}</CustomTableCell> */}\r\n                                <CustomTableCell align=\"center\">{responseItem.correctAnswer}</CustomTableCell>\r\n                                <CustomTableCell align=\"center\">{responseItem.candidateResponse}</CustomTableCell>\r\n                            </TableRow>\r\n                        )})}\r\n                    </TableBody>\r\n                </Table>\r\n                </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSummary = (summary) => {\r\n        return (\r\n            <>\r\n                <div className=\"card bg-secondary text-light\">\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-10\">\r\n                                        Correct Response: {summary.correctAnswersCount} / {summary.totalQuestions}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-10\">\r\n                                    Score: {summary.candidateScore} %\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-10\">\r\n                                    Result: {summary.result}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"row mt-4\">\r\n                            <div className=\"col-md-12\">\r\n                            Completed On: {summary.completedOn}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n        color: theme.palette.common.black,\r\n        fontSize: 16,\r\n        fontWeight: 600\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default CandidateResponseReport;","import React, { Component, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { ListItem, List, ListItemText, Grid, Typography,\r\n        Avatar, \r\n        ListItemAvatar,\r\n        Button} from '@material-ui/core';\r\nimport { AccountBox , Email, Call} from '@material-ui/icons';\r\nimport { getDateTime, formatToDecimals } from '../../Utils';\r\n\r\nclass CandidateResponseDetail extends Component {\r\n\r\n    componentDidMount = () => {\r\n        this.props.fetchCandidateDetails(this.props.candidateId);\r\n    }\r\n\r\n    render = () => {\r\n        let { classes, candidateDetails} = this.props;\r\n        console.log('candidateDetails', candidateDetails);\r\n        if(candidateDetails && candidateDetails.length > 0 && candidateDetails[0].isRegistered) {\r\n            return this.renderRegisteredCandidateDetails(candidateDetails);\r\n        }\r\n        else {\r\n            return this.renderCandidateDetails(candidateDetails);\r\n        }\r\n    }\r\n\r\n    \r\n    renderRegisteredCandidateDetails = (candidateDetails) => {\r\n        let registrations = candidateDetails ? candidateDetails : [];\r\n        let basicDetails = (candidateDetails && candidateDetails.length > 0) ? candidateDetails[0].candidate_meta : {};\r\n        let pendingRegistrations = [], completedRegistrations = [];\r\n        registrations.forEach((registration) => {\r\n            console.log('registration.status', registration.status);\r\n            if(registration.status === 'Completed') {\r\n                completedRegistrations.push(registration);\r\n            }\r\n            else {\r\n                pendingRegistrations.push(registration);\r\n            }\r\n        })\r\n        console.log('completedRegistrations', completedRegistrations);\r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                        <AccountBox color=\"primary\" /> {basicDetails.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                            <Email color=\"primary\"  /> {basicDetails.email}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                        <Call color=\"primary\"  /> {basicDetails.cellNumber ? basicDetails.cellNumber : ' - '}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card bg-default\">\r\n                        <div className=\"card-header\">\r\n                            <p>Recent Test Performances</p>\r\n                        </div>\r\n                        {completedRegistrations && completedRegistrations.length > 0 &&\r\n                        completedRegistrations.map((registration, index) => {\r\n                            return (\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-bold\">\r\n                                            {registration.test_meta.testName}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {registration.test_meta.skill}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {registration.test_meta.grade}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-italic\">\r\n                                            {`${registration.status === 'Completed' ? \r\n                                                    'Completed on ' : ''}\r\n                                                    ${getDateTime(registration.modified_on, true)} \r\n                                                `}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"font-weight-bold\">\r\n                                            {registration.evaluation_meta && `Scored ${formatToDecimals(registration.evaluation_meta.scorePercentage, 2)} %`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card bg-default\">\r\n                        <div className=\"card-header\">\r\n                            <p>Pending Tests</p>\r\n                        </div>\r\n                        {pendingRegistrations && pendingRegistrations.length === 0 &&\r\n                                    <div className=\"card-body\">\r\n                                    <div className=\"alert alert-info\">No Pending Registrations</div>\r\n                                    </div>\r\n                        }\r\n                        {pendingRegistrations && pendingRegistrations.length > 0 &&\r\n                        pendingRegistrations.map((registration, index) => {\r\n                            return (\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-bold\">\r\n                                            {registration.test_meta.testName}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {registration.test_meta.skill}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {registration.test_meta.grade}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-light\">\r\n                                            {registration.evaluation_meta && formatToDecimals(registration.evaluation_meta.scorePercentage, 2)}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-italic\">\r\n                                            {`${registration.created_on ? \r\n                                                    'Registered on ' : ''}\r\n                                                    ${getDateTime(registration.created_on, true)} \r\n                                                `}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n    renderCandidateDetails = (candidateDetails) => {\r\n        let invitations = candidateDetails ? candidateDetails : [];\r\n        let basicDetails = (candidateDetails && candidateDetails.length > 0) ? candidateDetails[0].candidate_meta : {};\r\n        let pendingInvitations = [], completedInvitations = [];\r\n        invitations.forEach((invitation) => {\r\n            console.log('invitation.invitation_meta.status', invitation.invitation_meta.status);\r\n            if(invitation.invitation_meta.status === 'COMPLETED') {\r\n                completedInvitations.push(invitation);\r\n            }\r\n            else {\r\n                pendingInvitations.push(invitation);\r\n            }\r\n        })\r\n        console.log('completedInvitations', completedInvitations);\r\n\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                        <AccountBox color=\"primary\" /> {basicDetails.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                            <Email color=\"primary\"  /> {basicDetails.email}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"font-weight-bold\">\r\n                        <Call color=\"primary\"  /> {basicDetails.cellNumber ? basicDetails.cellNumber : ' - '}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card bg-default\">\r\n                        <div className=\"card-header\">\r\n                            <p>Recent Test Performances</p>\r\n                        </div>\r\n                        {completedInvitations && completedInvitations.length > 0 &&\r\n                        completedInvitations.map((invitation, index) => {\r\n                            return (\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-bold\">\r\n                                            {invitation.test_meta.testName}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {invitation.test_meta.skill}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-italic\">\r\n                                            {`${invitation.invitation_meta.completedOn ? \r\n                                                    'Completed on ' : ''}\r\n                                                    ${getDateTime(invitation.invitation_meta.completedOn, true)} \r\n                                                `}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"font-weight-bold\">\r\n                                            {invitation.response_meta && `Scored ${formatToDecimals(invitation.response_meta.scorePercentage, 2)} %`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <div className=\"card bg-default\">\r\n                        <div className=\"card-header\">\r\n                            <p>Pending Tests</p>\r\n                        </div>\r\n                        {pendingInvitations && pendingInvitations.length === 0 &&\r\n                                    <div className=\"card-body\">\r\n                                    <div className=\"alert alert-info\">No Pending Invitations</div>\r\n                                    </div>\r\n                        }\r\n                        {pendingInvitations && pendingInvitations.length > 0 &&\r\n                        pendingInvitations.map((invitation, index) => {\r\n                            return (\r\n                                    <div className=\"card-body\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-bold\">\r\n                                            {invitation.test_meta.testName}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            {invitation.test_meta.skill}\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-light\">\r\n                                            {invitation.response_meta && formatToDecimals(invitation.response_meta.scorePercentage, 2)}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"text-italic\">\r\n                                            {`${invitation.invitation_meta.invitedOn ? \r\n                                                    'Completed on ' : ''}\r\n                                                    ${getDateTime(invitation.invitation_meta.invitedOn, true)} \r\n                                                `}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    }\r\n}\r\nexport default CandidateResponseDetail;","import React, { Component, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { ListItem, List, ListItemText, Grid, Typography,\r\n        Avatar, \r\n        ListItemAvatar,\r\n        Button} from '@material-ui/core';\r\nimport { AccountBox } from '@material-ui/icons';\r\nimport { getDateTime, formatToDecimals } from '../../Utils';\r\nimport config from '../../config';\r\n\r\nclass CandidateRecording extends Component {\r\n\r\n    componentDidMount = () => {\r\n        this.props.fetchRecordings(this.props.responseId);\r\n    }\r\n\r\n    render = () => {\r\n        let { classes, responseId, responseRecordings} = this.props;\r\n        console.log('responseRecordings', responseRecordings);\r\n        let baseApiUrl = `${config.instance.getCandidateApiUrl()}getRecording?`;\r\n        \r\n        if(responseRecordings && responseRecordings.length === 0) {\r\n            return (\r\n                <div className=\"alert alert-info\">\r\n                    No recordings found\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <div className=\"row\">\r\n                    {responseRecordings && responseRecordings.length > 0 &&\r\n                    responseRecordings.map((recordingItem, index) => {\r\n                        \r\n                        return (   \r\n                            <div className=\"col-md-3\">\r\n                                <video key={index} width=\"160\" height=\"120\" controls>\r\n                                    <source src={`${baseApiUrl}fileName=${recordingItem}&responseId=${responseId}`}\r\n                                        type=\"video/webm\" />\r\n                                </video>\r\n                                <p class=\"card-text\">\r\n                                {recordingItem}\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CandidateRecording;","import React, { Component } from 'react';\r\nimport { AppBar, Tabs, Tab, Typography, Button,\r\n    Toolbar, Link } from '@material-ui/core';\r\nimport { Link as InternalLink } from 'react-router-dom';\r\n\r\nimport CandidateResponseReport from './CandidateResponseReport';\r\nimport CandidateResponseDetail from './CandidateResponseDetails';\r\nimport CandidateRecording from './CandidateRecording';\r\n\r\nclass CandidateConsoleTabs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: props.selectedTabIndex || 1\r\n        };\r\n    }\r\n\r\n    handleChange = (event, value) => {\r\n        this.setState({ value });\r\n    };\r\n\r\n    render = () => {\r\n        let { value } = this.state;\r\n        value = this.props.selectedTabIndex || value;\r\n        let { candidateDetails, candidateResponses, responseRecordings, classes } = this.props;\r\n        return(\r\n        <div>\r\n            {/* <InternalLink to={ {pathname: `${this.props.backLink}`, state: { responseId: this.props.responseId } } }>\r\n                <Button >Back</Button>\r\n            </InternalLink> */}\r\n            <AppBar position=\"static\">\r\n                <Tabs variant=\"fullWidth\" value={value} onChange={this.handleChange}>\r\n                    <LinkTab label=\"Candidate Response Report\" href=\"page1\" />\r\n                    <LinkTab label=\"Candidate Details\" href=\"page2\" />\r\n                    <LinkTab label=\"Recording\" href=\"page3\" />\r\n                </Tabs>\r\n            </AppBar>\r\n            {value === 0 && \r\n            <TabContainer>\r\n                <CandidateResponseReport   \r\n                    classes={classes}\r\n                    responseId={this.props.responseId}\r\n                    candidateId={this.props.candidateId}\r\n                    fetchCandidateResponseReport={(responseId, candidateId) => this.props.FetchCandidateResponseReport(responseId, candidateId)}\r\n                    candidateResponses={candidateResponses}\r\n                /> \r\n            </TabContainer>}\r\n            {value === 1 && \r\n            <TabContainer>\r\n                <CandidateResponseDetail\r\n                    classes={classes}\r\n                    candidateId={this.props.candidateId}\r\n                    fetchCandidateDetails={this.props.FetchCandidateDetails}\r\n                    candidateDetails={candidateDetails}\r\n                /> \r\n            </TabContainer>}\r\n            {value === 2 && \r\n            <TabContainer>\r\n                <CandidateRecording   \r\n                    classes={classes}\r\n                    responseId={this.props.responseId}\r\n                    fetchRecordings={this.props.FetchRecordings}\r\n                    responseRecordings={responseRecordings}\r\n                /> \r\n            </TabContainer>}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst TabContainer = (props) => {\r\n    return (\r\n      <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n        {props.children}\r\n      </Typography>\r\n    );\r\n}\r\n\r\nconst LinkTab = (props) => {\r\n    return <Tab component=\"a\" onClick={event => event.preventDefault()} {...props} />;\r\n}\r\nexport default CandidateConsoleTabs;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button, Card, CardHeader, CardContent, CardActions } from '@material-ui/core';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { KeyboardBackspace } from '@material-ui/icons';\r\n// import OrgList from './OrgList';\r\n// import AddOrgComponent from './AddOrg';\r\nimport { FetchCandidateResponseReport, \r\n        FetchCandidateDetails,\r\n        FetchRecordings\r\n        } from '../../actions/CandidateConsoleActions';\r\nimport CandidateConsoleTabs from './CandidateConsoleTabs';\r\n\r\nclass CandidateConsoleContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        // this.props.FetchCandidateResponse();\r\n    }\r\n\r\n    onUpdateCandidateDetails = (model) => {\r\n            // this.props.UpdateCandidateDetails(model)\r\n            //         .then((res) => {\r\n            //             this.props.FetchCandidateDetails();\r\n            //         })\r\n    }\r\n\r\n    render = () => {\r\n        let { candidateDetails, candidateResponses, classes } = this.props;\r\n        let { state } = this.props.location;\r\n        let responseId = state ? state.responseId : 0;\r\n        let candidateId = state ? state.candidateId : 0;\r\n        let backLink = state ? state.backLink : '/invitations';\r\n        console.log(`responseId: ${responseId}, candidateId: ${candidateId}`);\r\n\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                    <CandidateConsoleTabs\r\n                        classes={classes}\r\n                        backLink={backLink}\r\n                        responseId={responseId}\r\n                        candidateId={candidateId}\r\n                        {...this.props}\r\n                        />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.candidateConsoleReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchCandidateResponseReport: (responseId, candidateId) => dispatch(FetchCandidateResponseReport(responseId, candidateId)),\r\n    FetchCandidateDetails: (candidateId) => dispatch(FetchCandidateDetails(candidateId)),\r\n    FetchRecordings: (responseId) => dispatch(FetchRecordings(responseId))\r\n    // FetchOrgs: () => dispatch(FetchOrgs()),\r\n    // AddOrg: (model) => dispatch(AddOrg(model)),\r\n    // UpdateOrg: (model) => dispatch(UpdateOrg(model)),\r\n    // SelectOrg: (model) => dispatch(SelectOrg(model)),\r\n    // CurrentOrgFieldChange: (val, field, model) => dispatch(CurrentOrgFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CandidateConsoleContainer);","import config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const FETCH_CANDIDATE_RESPONSE_REPORT_SUCCESS = 'FETCH_CANDIDATE_RESPONSE_REPORT_SUCCESS';\r\nexport const FETCH_CANDIDATE_RESPONSE_REPORT_FAIL = 'FETCH_CANDIDATE_RESPONSE_REPORT_FAIL';\r\nexport const FETCH_CANDIDATE_DETAILS_SUCCESS = 'FETCH_CANDIDATE_DETAILS_SUCCESS';\r\nexport const FETCH_CANDIDATE_DETAILS_FAIL = 'FETCH_CANDIDATE_DETAILS_FAIL';\r\nexport const FETCH_RECORDINGS_SUCCESS = 'FETCH_RECORDINGS_SUCCESS';\r\nexport const FETCH_RECORDINGS_FAIL = 'FETCH_RECORDINGS_FAIL';\r\n\r\nexport const FetchCandidateResponseReport = (responseId, candidateId) => dispatch => {\r\n    let url = `${config.instance.getAdminApiUrl()}getCandidateResponseReport?responseId=${responseId}&candidateId=${candidateId}`;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_RESPONSE_REPORT_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_RESPONSE_REPORT_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchCandidateDetails = (candidateId) => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'getCandidateDetails' + '?candidateId=' + candidateId;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_DETAILS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_CANDIDATE_DETAILS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}\r\n\r\nexport const FetchRecordings = (responseId) => dispatch => {\r\n    let url = config.instance.getCandidateApiUrl() + 'getRecordingFileNames' + '?responseId=' + responseId;\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_RECORDINGS_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: FETCH_RECORDINGS_FAIL,\r\n                payload: err\r\n            });\r\n        });\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport { CardContent, FormControl, TextField, \r\n    FormLabel, RadioGroup, Radio, FormControlLabel } from '@material-ui/core';\r\n\r\nimport { AddUser, CurrentUserFieldChange,\r\n     } from '../../actions/UserActions';\r\nimport repository from '../../repository';\r\n\r\nconst OpSignup  = () => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userType, setUserType] = useState('');\r\n    const [signupButtonText, setSignupButtonText] = useState('SIGN UP');\r\n    const [signupStatus, setSignupStatus] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        config.instance.initialize();\r\n    }, []);\r\n\r\n    const validateInputs = () => {\r\n        let errors = [];\r\n        if(!name) {\r\n            errors.push('Name is required');\r\n        }\r\n        if(!email) {\r\n            errors.push('Email is required');\r\n        }\r\n        if(!password) {\r\n            errors.push('Password is required');\r\n        }\r\n        if(!userType) {\r\n            errors.push('Select either Student or Professional')\r\n        }\r\n        if(name && name.length < 5) {\r\n            errors.push('Please enter valid name');\r\n        }\r\n        if(email && !/\\S+@\\S+\\.\\S+/.test(email)) {\r\n            errors.push('Please enter valid email id');\r\n        }\r\n        if(password && password.length < 6) {\r\n            errors.push('Password length should be at least 6');\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    const localHandler = (event) => {\r\n        event.preventDefault()\r\n        let errors = validateInputs();\r\n        if(errors && errors.length > 0) {\r\n            setErrorMessage(errors.join('\\n'));\r\n            return;\r\n        }\r\n        let data = {\r\n            name: name,\r\n            emailId: email,\r\n            password: password,\r\n            role: userType\r\n        }\r\n        setSignupButtonText('Working..');\r\n        let model ={\r\n            user_meta: data\r\n        };\r\n        let url = config.instance.getCandidateApiUrl() + 'user';\r\n        repository.saveData(url, model)\r\n                .then((res) => {\r\n                    setSignupStatus('success');\r\n                })\r\n                .catch((err) => {\r\n                    setSignupStatus(err);\r\n                    setSignupButtonText('SIGN UP')\r\n                });\r\n    \r\n    }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    {signupStatus && signupStatus === 'success' &&\r\n                        <div className=\"alert alert-success\">\r\n                            Submitted successfully. Please check your email id and complete the registration. \r\n                        </div>\r\n                    }\r\n                    {signupStatus !== '' && signupStatus !== 'success' &&\r\n                        <div className=\"alert alert-danger\">\r\n                            Some error occurred. Please try after some time.\r\n                        </div>\r\n                    }\r\n                    {signupStatus !== 'success' &&\r\n                        <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <form noValidate autoComplete=\"off\" onSubmit={(e) => localHandler(e)}>\r\n                                {/* <div className=\"row\">\r\n                                    <h2 className=\"col-md-12 text-center\">Sign Up</h2>\r\n                                </div> */}\r\n                                <div className=\"row\">\r\n                                    <FormControl variant=\"outlined\" className=\"col-md-12\" >\r\n                                        <TextField\r\n                                            id=\"outlined-name\"\r\n                                            label=\"Full Name\"\r\n                                            value={name}\r\n                                            onChange={(e) => setName(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Email Id\"\r\n                                            value={email}\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            className=\"text-lg\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Password\"\r\n                                            type=\"password\"\r\n                                            value={password}\r\n                                            onChange={(e) => setPassword(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\" />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        {/* <FormLabel component=\"legend\">Pop quiz: Material-UI is...</FormLabel> */}\r\n                                        <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={userType} \r\n                                                    onChange={(e) => setUserType(e.target.value)}>\r\n                                            <FormControlLabel value=\"student\" control={<Radio />} label=\"Student\" />\r\n                                            <FormControlLabel value=\"candidate\" control={<Radio />} label=\"Professional\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row mt-4\">\r\n                                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                        {signupButtonText}\r\n                                    </button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n                        <pre className=\"col-md-12 text-danger\">{errorMessage}</pre>\r\n                        </div>\r\n\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\nexport default OpSignup;","import React, { Component } from \"react\";\r\n// import { withRouter } from 'react-router-dom';\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport { CardContent, FormControl, TextField, CardActions, Button, CardHeader } from '@material-ui/core';\r\nimport { GetCurrentUserRole } from \"../../common/HelperFunctions\";\r\nimport AuthHelper from \"../../AuthHelper\";\r\nimport { connect } from 'react-redux';\r\nimport { SetUserInfo } from '../../actions/UserActions';\r\n\r\nclass OpLogin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emailId: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            logInButtonText: 'LOG IN'\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        config.instance.initialize();\r\n    }\r\n\r\n    localHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'auth/local';\r\n        let data = {\r\n            emailId: this.state.emailId,\r\n            password: this.state.password\r\n        }\r\n        this.setState({\r\n            logInButtonText: 'Working...'\r\n        })\r\n        axios.post(url, data).then((res) => {\r\n            const token = res.headers['x-auth-token'];\r\n            console.log('login token', token);\r\n            if (token) {\r\n                this.props.SetUserInfo(res).then((res) => {\r\n                    let userRole = GetCurrentUserRole();\r\n                    console.log('user role', userRole);\r\n                    if(userRole === 'admin' || userRole === 'orgadmin') {\r\n                        if(this.props.history){\r\n                            this.props.history.push({\r\n                                pathname: '/dashboard'\r\n                            });  \r\n                        }\r\n                    }\r\n                    else if(userRole === config.instance.Roles.Student) {\r\n                        this.props.history.push({\r\n                            pathname: '/ophome'\r\n                        });\r\n                    }\r\n                    else if(userRole === config.instance.Roles.Teacher) {\r\n                        this.props.history.push({\r\n                            pathname: '/dashboard'\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.props.history.push({\r\n                            pathname: '/ophome'\r\n                        });\r\n                    }\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    logInButtonText: 'LOG IN',\r\n                    errorMessage: 'Wrong Credentials. Please try again.'\r\n                });\r\n            }\r\n        }).catch((err) => {\r\n            this.setState({\r\n                    logInButtonText: 'LOG IN',\r\n                    errorMessage: 'Invalid Credentials. Please check entered email and enter correct password.'\r\n            });\r\n        });\r\n    }\r\n\r\n    onEmailIdChange = (value) => {\r\n        this.setState({\r\n            emailId: value\r\n        });\r\n    }\r\n\r\n    onPasswordChange = (value) => {\r\n        this.setState({\r\n            password: value\r\n        });\r\n    }\r\n    \r\n    render = () => {\r\n        let { errorMessage, logInButtonText } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    {/* <div className=\"col-md-5\">\r\n\r\n                    </div> */}\r\n                    <div className=\"col-md-12\">\r\n                        <form noValidate autoComplete=\"off\" onSubmit={(e) => this.localHandler(e)}>\r\n                            <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                {/* <div className=\"row\">\r\n                                    <h2 className=\"col-md-12 text-center\">Login</h2>\r\n                                </div> */}\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Email Id\"\r\n                                            value={this.state.emailId}\r\n                                            onChange={(e) => this.onEmailIdChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            className=\"text-lg\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Password\"\r\n                                            type=\"password\"\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => this.onPasswordChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\" />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row mt-4\">\r\n                                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                        {logInButtonText}\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n\r\n                        </form>\r\n                    </div>\r\n                    <p className=\"col-md-12 text-center text-danger\">{errorMessage}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpLogin);","import React, { useState, useEffect } from \"react\";\r\nimport config from '../../config';\r\nimport axios from 'axios';\r\nimport { CardContent, FormControl, TextField, CardActions, Button, CardHeader } from '@material-ui/core';\r\n\r\nimport { AddUser, CurrentUserFieldChange,\r\n     } from '../../actions/UserActions';\r\nimport repository from '../../repository';\r\n\r\nconst OpInstituteSignup  = () => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [signupButtonText, setSignupButtonText] = useState('SIGN UP');\r\n    const [signupStatus, setSignupStatus] = useState('');\r\n\r\n    useEffect(() => {\r\n        config.instance.initialize();\r\n    }, []);\r\n\r\n    const localHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        let data = {\r\n            name: name,\r\n            emailId: email,\r\n            password: password,\r\n            role: config.instance.Roles.Teacher\r\n        }\r\n        setSignupButtonText('Working..');\r\n        let model ={\r\n            user_meta: data\r\n        };\r\n        let url = config.instance.getCandidateApiUrl() + 'user';\r\n        repository.saveData(url, model)\r\n                .then((res) => {\r\n                    setSignupStatus('success');\r\n                })\r\n                .catch((err) => {\r\n                    setSignupStatus(err);\r\n                    setSignupButtonText('SIGN UP')\r\n                });\r\n    \r\n    }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    {signupStatus && signupStatus === 'success' &&\r\n                        <div className=\"alert alert-success\">\r\n                            Submitted successfully. Please check your email id and complete the registration. \r\n                        </div>\r\n                    }\r\n                    {signupStatus !== '' && signupStatus !== 'success' &&\r\n                        <div className=\"alert alert-danger\">\r\n                            Some error occurred. Please try after some time.\r\n                        </div>\r\n                    }\r\n                    {signupStatus !== 'success' &&\r\n                        <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <form noValidate autoComplete=\"off\" onSubmit={(e) => localHandler(e)}>\r\n                                {/* <div className=\"row\">\r\n                                    <h2 className=\"col-md-12 text-center\">Sign Up</h2>\r\n                                </div> */}\r\n                                <div className=\"row\">\r\n                                    <FormControl variant=\"outlined\" className=\"col-md-12\" >\r\n                                        <TextField\r\n                                            id=\"outlined-name\"\r\n                                            label=\"Your Name / Institute Name\"\r\n                                            value={name}\r\n                                            onChange={(e) => setName(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Email Id\"\r\n                                            value={email}\r\n                                            onChange={(e) => setEmail(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            className=\"text-lg\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Password\"\r\n                                            type=\"password\"\r\n                                            value={password}\r\n                                            onChange={(e) => setPassword(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\" />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row mt-4\">\r\n                                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                        {signupButtonText}\r\n                                    </button>\r\n                                </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n\r\n                    }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\nexport default OpInstituteSignup;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import SwipeableViews from 'react-swipeable-views';\r\n// import { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Box from '@material-ui/core/Box';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport OpLogin from './OpLogin';\r\nimport OpSignup from './OpSignup';\r\nimport OpInstituteSignup from './OpInstituteSignup';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        // <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        // </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     backgroundColor: theme.palette.background.paper,\r\n//     width: 500,\r\n//   },\r\n// }));\r\n\r\nexport default function OpLoginSignup(props) {\r\n//   const classes = useStyles();\r\n//   const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n  \r\n  return (\r\n\r\n    <div className=\"container h-100\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-2\"></div>\r\n            <div className=\"col-md-8 h-100 justify-content-center align-items-center\">\r\n                <AppBar color=\"default\" position=\"static\">\r\n                    <Tabs variant=\"fullWidth\" value={value} \r\n                            onChange={(e, newVal) => setValue(newVal)}>\r\n                        <LinkTab label=\"LOG IN\" href=\"page1\" />\r\n                        <LinkTab disabled={false} label=\"SIGN UP\" href=\"page2\" />\r\n                        {/* <LinkTab disabled={false} label=\"INSTITUTE SIGN UP\" href=\"page3\" /> */}\r\n                    </Tabs>\r\n                </AppBar>\r\n                {value === 0 && \r\n                <TabContainer>\r\n                    <OpLogin {...props} />\r\n                </TabContainer>}\r\n                {value === 1 && \r\n                <TabContainer>\r\n                    <OpSignup />\r\n                </TabContainer>}\r\n                {value === 2 && \r\n                <TabContainer>\r\n                    <OpInstituteSignup />\r\n                </TabContainer>}        \r\n        \r\n            </div>\r\n            <div className=\"col-md-2\"></div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst TabContainer = (props) => {\r\n    return (\r\n      <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n        {props.children}\r\n      </Typography>\r\n    );\r\n}\r\n\r\nconst LinkTab = (props) => {\r\n    return <Tab onClick={event => event.preventDefault()} {...props} />;\r\n}\r\n\r\n// export default OpLoginSignup;\r\nconst styles = {\r\n  fillwindow: { \r\n    height: '100%',\r\n    position: 'absolute',\r\n    left: 0,\r\n    width: '100%',\r\n    overflow: 'hidden'\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from '@material-ui/core';\r\nimport AuthHelper from '../../AuthHelper';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport repository from '../../repository';\r\nimport config from '../../config';\r\n\r\nclass OpEmailVerifiedSuccess extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            progressText: 'Verifying',\r\n            isError: false\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let { userIv, userContent } = this.props.match.params;\r\n        console.log('this.props.match.params', this.props.match.params);\r\n        let url = config.instance.getCandidateApiUrl() + `verifyUser?userIv=${userIv}&userContent=${userContent}`;\r\n        repository.getData(url)\r\n            .then((res) => {\r\n                console.log('res from verify api', res);\r\n                this.setState({\r\n                    progressText: res.data\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log('err from verify api', err);\r\n                this.setState({\r\n                    progressText: err.data,\r\n                    isError: true\r\n                })\r\n            })\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div>\r\n                {/* <div className=\"alert alert-success text-center\">\r\n                    Email Id is verifed successfully. You can use your credentials to log in now. \r\n                </div> */}\r\n                <div className={`alert text-center ${this.state.isError ? 'alert-danger' : 'alert-success' }`}>\r\n                    {this.state.progressText}\r\n                </div>\r\n                \r\n                <div className=\"\">\r\n                    <div className=\"text-center\">\r\n                        <Link color=\"inherit\" href=\"/login\" onClick={() => AuthHelper.LogOut()} >\r\n                            {`${this.state.isError ? 'SIGN UP' : 'LOG IN'}`}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default OpEmailVerifiedSuccess;","import React, { Component } from 'react';\r\nconst OpTestList = (props) => {\r\n\r\n    let { tests } = props;\r\n    let upcomingExams = tests;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {upcomingExams && upcomingExams.length > 0 &&\r\n                    upcomingExams.map((upcomingExam) => {\r\n                        return (\r\n                    <div className=\"col-md-6 mt-3\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-secondary text-light\">\r\n                                <h5>{upcomingExam.test_meta.testName}</h5>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <p>{upcomingExam.test_meta.skill}</p>\r\n                                <div className=\"float-right\">\r\n                                    <button \r\n                                        onClick={(e) => props.onRegisterClick(e, upcomingExam.testId)}\r\n                                        className=\"btn btn-sm btn-primary \">\r\n                                        Register\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-footer bg-light text-dark\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-6\">\r\n                                            <span className=\"badge\">{upcomingExam.test_meta.startsAt}</span>\r\n                                        </div>\r\n                                        <div className=\"col-md-6\">\r\n                                            <span className=\"badge\">Duration:</span> <span className=\"badge\">{upcomingExam.test_meta.duration}</span> mins\r\n                                        </div>\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                        );\r\n                    })\r\n                    }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default OpTestList;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, DialogContent, Dialog, DialogTitle, DialogActions, Divider } from '@material-ui/core';\r\nimport { MenuItem, OutlinedInput, Select, InputLabel, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Close  } from '@material-ui/icons';\r\nimport config from '../../config';\r\n\r\nclass OpAddTest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            grades: config.instance.Grades\r\n        };\r\n    }\r\n        \r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log('handle close');\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSubmit = () => {\r\n      console.log('submit called');\r\n      this.props.onSubmit(this.props.model);\r\n      this.handleClose();\r\n    }\r\n\r\n    render = () => {\r\n        let { model } = this.props;\r\n        let { grades } = this.state;\r\n\r\n        console.log('current_test');\r\n        console.log(model);\r\n        return (\r\n            <div>\r\n            {!model && <LoadingComponent /> } \r\n            {model && \r\n            <Card>   \r\n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}>Create Test</Button>\r\n                \r\n                <Dialog\r\n                fullWidth={true}\r\n                open={this.state.open}\r\n                onClose={this.handleClose}\r\n                >\r\n                <DialogTitle onClose={this.handleClose}>Create a New Test</DialogTitle>\r\n                <Divider />\r\n                <DialogContent style={{padding: '4%'}}>\r\n                    <form  noValidate autoComplete=\"off\">\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <InputLabel htmlFor=\"outlined-grade\">\r\n                                    Grade\r\n                                </InputLabel>\r\n                                <Select\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'grade', this.props.model)}\r\n                                    value={model.test_meta.grade}\r\n                                    input={\r\n                                    <OutlinedInput\r\n                                        labelWidth={65}\r\n                                        name=\"grade\"\r\n                                        id=\"outlined-grade\"\r\n                                    />\r\n                                    }>\r\n                                    <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                    </MenuItem>\r\n                                    {grades && grades.length > 0 &&\r\n                                        grades.map((gradeItem, index) => {\r\n                                        return (\r\n                                            <MenuItem key={index} value={gradeItem}>{gradeItem}</MenuItem>\r\n                                        )\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-testname\"\r\n                                    label=\"Test Name\"\r\n                                    className={styles.dense}\r\n                                    value={model.test_meta.testName}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'testName', this.props.model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-subject\"\r\n                                    label=\"Subject\"\r\n                                    className={styles.dense}\r\n                                    value={model.test_meta.subject}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'subject', this.props.model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" style={styles.formControl}>\r\n                                <TextField\r\n                                    id=\"outlined-duration\"\r\n                                    label=\"Test Duration (mins)\"\r\n                                    className={styles.dense}\r\n                                    value={model.test_meta.duration}\r\n                                    onChange={(e) => this.props.onFieldChange(e.target.value, 'duration', this.props.model)}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </FormControl>\r\n                    </form>\r\n                    </DialogContent>\r\n                    <Divider />\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" size=\"large\" color=\"primary\"\r\n                                        onClick={ () => this.handleSubmit(this.props.model)}>\r\n                            Create Test\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Card>}\r\n        \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst styles = {\r\n    formControl: {\r\n        width: '80%',\r\n        marginBottom: '4%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n};\r\nexport default OpAddTest;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { PersonAdd } from '@material-ui/icons';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport { Typography } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport { CanSendInvite } from '../../common/HelperFunctions';\r\n\r\nconst OpMyTests = (props) => {\r\n    let { tests } = props;\r\n    return (\r\n        <div>\r\n        {!tests && <LoadingComponent /> }\r\n        {tests && tests.length === 0 && <Typography align=\"center\" variant=\"subtitle1\">No Tests Found </Typography> }\r\n        {tests && tests.length > 0 && \r\n        <Table>\r\n            <TableHead>\r\n            <TableRow>\r\n                <CustomTableCell>Test</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Status</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Created On</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Grade</CustomTableCell>\r\n                <CustomTableCell align=\"left\">Subject</CustomTableCell>\r\n                <CustomTableCell align=\"right\"></CustomTableCell>\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {tests.map((test, index) => (\r\n                <TableRow key={index}>\r\n                <CustomTableCell component=\"th\" scope=\"row\">\r\n                    <Link to={ {pathname: \"/opTestConsole\", state: { testId: test.id } }}>\r\n                        {test.test_meta.testName}\r\n                    </Link>\r\n                </CustomTableCell>\r\n                <CustomTableCell align=\"left\"><Typography variant=\"subtitle2\" >{test.test_meta.status.toUpperCase()}</Typography></CustomTableCell>\r\n                <CustomTableCell align=\"left\">{test.test_meta.createdOn}</CustomTableCell>\r\n                <CustomTableCell align=\"left\">{test.test_meta.grade}</CustomTableCell>\r\n                <CustomTableCell align=\"left\">{test.test_meta.subject}</CustomTableCell>\r\n                <CustomTableCell align=\"right\" scope=\"row\" component=\"th\">\r\n                    {CanSendInvite(test.test_meta.status) &&\r\n                    <Link to={ {pathname: \"/inviteConsole\", state: { testId: test.id } }}>\r\n                        <PersonAdd />\r\n                    </Link>\r\n                    }\r\n                </CustomTableCell>\r\n                </TableRow>\r\n            ))}\r\n            </TableBody>\r\n        </Table>\r\n        }\r\n        </div>\r\n    );\r\n}\r\nconst CustomTableCell = withStyles(theme => ({\r\n    head: {\r\n      color: theme.palette.common.black,\r\n      fontSize: 16\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nexport default OpMyTests;","import React, { Component } from \"react\";\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport { testListModes } from \"../Tests/OpTestContainer\";\r\n\r\nconst OpHeader = (props) => {\r\n    return (\r\n        <div className=\"\">\r\n            <div className=\"btn-group\">\r\n                <button className={`btn ${props.activeTestList===testListModes.PublicTests ? 'btn-primary' : 'btn-secondary'}`} \r\n                        onClick={() => props.showPublicTests()}>All Tests</button>\r\n                <button className={`btn ${props.activeTestList===testListModes.MyTests ? 'btn-primary' : 'btn-secondary'}`} \r\n                    onClick={() => props.showMyTests()}>My Tests</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default OpHeader;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FetchPublicTests, FetchMyTests } from '../../actions/OpTests/OpTestActions';\r\nimport { AddTest, CurrentTestFieldChange } from '../../actions/AdminTestActions';\r\nimport { PublishTest } from '../../actions/TestConsoleActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button, Card, CardHeader, CardContent } from '@material-ui/core';\r\nimport TestList from '../../components/AdminTest/TestList';\r\nimport OpTestList from './OpTestList';\r\nimport OpAddTest from './OpAddTest';\r\nimport config from '../../config';\r\nimport { GetCurrentUserRole } from '../../common/HelperFunctions';\r\nimport OpMyTests from './OpMyTests';\r\nimport OpHeader from '../Home/OpHeader';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport const testListModes = {\r\n    PublicTests: 'public-tests',\r\n    MyTests: 'my-tests',\r\n    MyInstituteTests: 'my-institute-tests'\r\n}\r\n\r\nclass OpTestContainer extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTestList: testListModes.MyTests\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        // this.props.FetchPublicTests();\r\n        this.props.FetchMyTests();\r\n    }\r\n    \r\n    showPublicTests = () => {\r\n        this.props.FetchPublicTests();\r\n        this.setState({\r\n            activeTestList: testListModes.PublicTests\r\n        })\r\n    }\r\n\r\n    showMyTests = () => {\r\n        this.props.FetchMyTests();\r\n        this.setState({\r\n            activeTestList: testListModes.MyTests\r\n        })\r\n    }\r\n\r\n    onAddTest = (model) => {\r\n        model.test_meta.settings = {\r\n            testVisibility: config.instance.TestVisibility.Public\r\n        }\r\n        model.category = 'Academic';\r\n        model.grade = model.test_meta.grade;\r\n        model.subject = model.test_meta.subject;\r\n        \r\n        this.props.AddTest(model, this.props.editMode, this.props.history)\r\n                .then((res) => {\r\n                    this.showMyTests();  \r\n                });\r\n    }\r\n\r\n    render = () => {\r\n        return(\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} sm={12}>\r\n                    {/* <OpHeader activeTestList={this.state.activeTestList} \r\n                            showMyTests={() => this.showMyTests()}\r\n                            showPublicTests={() => this.showPublicTests()}/> */}\r\n                    <Card>\r\n                        <CardHeader action={\r\n                            <OpAddTest \r\n                                onSubmit={ (model) => this.onAddTest(model) }\r\n                                model={this.props.current_test}\r\n                                skills={this.props.skills}\r\n                                editMode={this.props.editMode}\r\n                                onFieldChange={ (val, field, model) => this.props.CurrentTestFieldChange(val, field, model) } \r\n                                />\r\n                            }\r\n                            title=\"Tests\" />\r\n                        <CardContent>\r\n                            {\r\n                                this.state.activeTestList === testListModes.PublicTests &&\r\n                                <OpTestList tests={this.props.tests} />\r\n                            }\r\n                            {\r\n                                this.state.activeTestList === testListModes.MyTests &&\r\n                                <OpMyTests tests={this.props.tests} />\r\n                            }\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.adminTestReducer,\r\n    ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddTest: (model, editMode) => dispatch(AddTest(model, editMode)),\r\n    PublishTest: (model) => dispatch(PublishTest(model)),\r\n    FetchPublicTests: () => dispatch(FetchPublicTests()),\r\n    FetchMyTests: () => dispatch(FetchMyTests()),\r\n    // CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    // OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentTestFieldChange: (val, field, model) => dispatch(CurrentTestFieldChange(val, field, model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpTestContainer);","import React, { Component } from 'react';\r\nimport AdminTestContainer from '../../Containers/AdminTestContainer';\r\nimport OpTestContainer from '../Tests/OpTestContainer';\r\n\r\nconst OpContent = (props) => {\r\n\r\n    return (\r\n        <OpTestContainer {...props}/>\r\n    )\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                   {upcomingExams && upcomingExams.length > 0 &&\r\n                    upcomingExams.map((upcomingExam) => {\r\n                        return (\r\n                    <div className=\"col-md-6 mt-3\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-secondary text-light\">\r\n                                <h5>{upcomingExam.name}</h5>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <p>{upcomingExam.description}</p>\r\n                                <div className=\"float-right\">\r\n                                    <button \r\n                                        onClick={(e) => props.onRegisterClick(e, upcomingExam.testId)}\r\n                                        className=\"btn btn-sm btn-primary \">\r\n                                        Register\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-footer bg-light text-dark\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-6\">\r\n                                            <span className=\"badge\">{upcomingExam.startsAt}</span>\r\n                                        </div>\r\n                                        <div className=\"col-md-6\">\r\n                                            <span className=\"badge\">Duration:</span> <span className=\"badge\">{upcomingExam.duration}</span> mins\r\n                                        </div>\r\n                                    </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                        );\r\n                    })\r\n                    }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default OpContent;\r\n\r\nconst upcomingExams = [\r\n    {\r\n        testId: 1,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 2,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 3,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 4,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 5,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 6,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 7,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    },\r\n    {\r\n        testId: 8,\r\n        name: 'Science',\r\n        description: 'Semester 2 exam chapters 14-20',\r\n        startsAt: '2021-02-04 08:30',\r\n        endsAt: '2021-02-04 10:30',\r\n        duration: 120\r\n    }\r\n]","import React, { Component } from 'react';\r\nimport config from '../../config';\r\n\r\nclass TestLandingPage extends Component {\r\n\r\n    openSimulator = (inviteid) => {\r\n        let url = `${config.instance.getSiteUrl()}/simulatorShell/${inviteid}`;\r\n        var strWindowFeatures = \"location=yes,height=570,width=520,scrollbars=yes,status=yes\";\r\n        // window.open(url, '_blank', strWindowFeatures);\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    render = () => {\r\n        let { inviteid } = this.props.match.params;\r\n        \r\n        if(inviteid) {\r\n            return (\r\n                <>\r\n                    <p>\r\n                        You are about to start test. \r\n                        It is recommended to take the exam from a silent place, please press Start to continue when ready.\r\n                    </p>\r\n                    <button style={styles.btn} onClick={() => this.openSimulator(inviteid)}>START</button>\r\n                {/* <a href={`${config.instance.getSiteUrl()}/simulatorShell/${inviteid}`} target=\"_blank\">\r\n                        Start Exam\r\n                </a> */}\r\n                </>\r\n            )\r\n        }\r\n        else {\r\n                return (\r\n                    <p>\r\n                    Page you are trying to open could not be found. Please check with your recruiter.\r\n                    </p>\r\n                )\r\n        }\r\n    }\r\n}\r\nexport default TestLandingPage;\r\nconst styles={\r\n    btn: {\r\n        background: '#aaf',\r\n        color: '#fff',\r\n        borderRadius: '10px',\r\n        padding: '7px',\r\n        border: '0px'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { GetCurrentUserRole } from '../../common/HelperFunctions';\r\nimport config from '../../config';\r\n\r\nconst OpMenu = (props) => {\r\n  \r\n    let menuItems = [];\r\n    let userRole = GetCurrentUserRole();\r\n    switch(userRole) {\r\n        case config.instance.Roles.Teacher:\r\n        {\r\n            menuItems = teacherMenu;\r\n            break;\r\n        }\r\n        case config.instance.Roles.Candidate:\r\n        {\r\n            menuItems = candidateMenu;\r\n            break;\r\n        }\r\n        case config.instance.Roles.Student:\r\n        {\r\n            menuItems = studentMenu;\r\n            break;\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <ul className=\"nav justify-content-end\">\r\n                {menuItems && menuItems.length > 0 &&\r\n                    menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <li className=\"nav-item\" key={index}>\r\n                                <a className=\"nav-link active\" href={menuItem.path}>{menuItem.caption}</a>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n                {/* <li class=\"nav-item\">\r\n                    <a class=\"nav-link active\" href=\"#\">Active</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"#\">Link</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"#\">Link</a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"#\">Disabled</a>\r\n                </li> */}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OpMenu;\r\n\r\nconst candidateMenu = [\r\n    {\r\n        caption: \"Home\",\r\n        path: \"/ophome\"\r\n    },\r\n    {\r\n        caption: \"Tests\",\r\n        path: \"/optests\"\r\n    },\r\n    {\r\n        caption: \"My Profile\",\r\n        path: \"/myProfile\"\r\n    }\r\n]\r\nconst teacherMenu = [\r\n    {\r\n        caption: \"Home\",\r\n        path: \"/dashboard\"\r\n    },\r\n    {\r\n        caption: \"Tests\",\r\n        path: \"/optests\"\r\n    },\r\n    {\r\n        caption: \"MCQ Library\",\r\n        path: \"/mcqs\"\r\n    }\r\n]\r\nconst studentMenu = [\r\n    {\r\n        caption: \"Home\",\r\n        path: \"/ophome\"\r\n    },\r\n    // {\r\n    //     caption: \"Upcoming Tests\",\r\n    //     path: \"/dashboard\"\r\n    // },\r\n    {\r\n        caption: \"My Tests\",\r\n        path: \"/myTests\"\r\n    },\r\n    {\r\n        caption: \"My Profile\",\r\n        path: \"/myProfile\"\r\n    }\r\n]","import React, { Component } from \"react\";\r\nimport OpHeader from \"./OpHeader\";\r\nimport OpBanner from \"./OpBanner\";\r\nimport OpLoginSignup from \"./OpLoginSignup\";\r\nimport OpAuthHelper from '../Utils/OpAuthHelper';\r\nimport OpContent from \"./OpContent\";\r\nimport OpMenu from \"./OpMenu\";\r\n\r\nconst OpShell = () => {\r\n\r\n    return (\r\n        <div>\r\n            {/* <OpMenu /> */}\r\n            {/* <OpBanner /> */}\r\n            <OpContent />\r\n        </div>\r\n    );\r\n}\r\nexport default OpShell;","import React, { Component } from 'react';\r\nimport TestConsoleContainer from '../../Containers/TestConsole/TestConsoleContainer';\r\nimport OpMenu from '../Home/OpMenu';\r\nimport OpPublishTest from './OpPublishTest';\r\n\r\nconst OpTestConsole = (props) => {\r\n    \r\n    return(\r\n        <>\r\n            {/* <OpMenu /> */}\r\n            {/* <OpPublishTest\r\n                {...props}\r\n            /> */}\r\n            <TestConsoleContainer\r\n                {...props} \r\n                publishWithInvites={true}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default OpTestConsole;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { CardHeader, Typography } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Loading from '../lib/LoadingComponent';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nconst AddGradeComponent = (props) => {\r\n    let { model } = props;\r\n    let display = (props && props.editMode) ? 'block' : 'none';\r\n    return (\r\n        <Card>\r\n        {!model && <Loading />} \r\n        {model &&    \r\n            <form  noValidate autoComplete=\"off\">\r\n                <CardHeader \r\n                avatar={\r\n                    <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                       <AddIcon />\r\n                    </Avatar>\r\n                    }\r\n                    title=\"Add Class / Grade\">\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group row\">\r\n                                <label className=\"col-md-4 col-form-label\">Grade Name</label>\r\n                                <div className=\"col-md-8\">\r\n                                    <input  type=\"text\" \r\n                                            className=\"form-control\"\r\n                                            value={model.name}\r\n                                            onChange={(e) => props.onFieldChange(e.target.value, 'name', props.model)}\r\n                                            />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <button  className=\"btn btn-primary\" type=\"button\" \r\n                                        onClick={ () => props.onSubmit(props.model) }>\r\n                                Submit\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </CardContent>\r\n            </form>}\r\n        </Card>\r\n    );\r\n}\r\nexport default AddGradeComponent;\r\nconst styles={\r\n    formControl: {\r\n        width: '90%'\r\n    },\r\n    actionButton: {\r\n        marginLeft: '70%'\r\n    },\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Chip, Avatar } from '@material-ui/core';\r\n\r\nconst EditGrade = (props) => {\r\n\r\n    console.log('props.current_subject', props.current_subject);\r\n    return (\r\n        <>\r\n            <div className=\"card bg-default\">\r\n                <div className=\"card-header\">\r\n                    {props.grade_meta && props.grade_meta.name && \r\n                       <p><span className=\"font-weight-bold\">Grade {props.grade_meta.name}</span> Subjects</p>\r\n                    }\r\n                    {!props.grade_meta && <p>Select Grade to View/Add Subjects</p>}\r\n                </div>\r\n                <div className=\"card-body\">\r\n                   \r\n                            <div className=\"form-group row\">\r\n                                {/* <label className=\"col-md-3 col-form-label\">Subject</label> */}\r\n                                <div className=\"col-md-9\">\r\n                                    <input  type=\"text\" \r\n                                            disabled={!(props.grade_meta && props.grade_meta.name)}\r\n                                            className=\"form-control\"\r\n                                            value={props.current_subject && props.current_subject.subject ?\r\n                                                props.current_subject.subject : ''}\r\n                                            onChange={(e) => props.onFieldChange(e.target.value, 'subject')}\r\n                                        />\r\n                                </div>\r\n                                <div className=\"col-md-3\">\r\n                                    <button  className=\"btn btn-primary btn-sm\" type=\"button\" \r\n                                                onClick={ () => props.onAddSubject(props.current_subject) }>\r\n                                        Add\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                    <div className=\"row\">\r\n                        {props.grade_meta && props.grade_meta.subjects && props.grade_meta.subjects.length === 0 &&\r\n                        <div className=\"alert alert-info\">No subjects added yet for this class</div>\r\n                        }\r\n                        {props.grade_meta && props.grade_meta.subjects && props.grade_meta.subjects.length > 0 &&\r\n                        props.grade_meta.subjects.map((subjectItem, index) => {\r\n                            return (\r\n                                <>\r\n                                    <Chip label={subjectItem} key={index}\r\n                                        style={styles.chip}\r\n                                        avatar={\r\n                                            <Avatar>\r\n                                                {subjectItem ? subjectItem[0] : 'S'}\r\n                                            </Avatar>   \r\n                                        }/>\r\n                                </>\r\n                            )\r\n                        })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    chip: {\r\n        margin: 10\r\n    }\r\n}\r\nexport default EditGrade;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport EditGrade from './EditGrade';\r\n\r\nclass GradeList extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedGrade: {}\r\n        }\r\n    }\r\n\r\n    onCurrentSubjectChange = (val, field, model) => {\r\n        this.props.onFieldChange(val, field, this.props.current_grade);\r\n        console.log('changinh sub now');\r\n        this.props.onCurrentSubjectChange(val, this.props.current_subject);\r\n    }\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <Card style={{padding: \"4%\"}}>\r\n                <CardHeader \r\n                    avatar={\r\n                        <Avatar aria-label=\"Recipe\" style={styles.avatar}>\r\n                            <ListIcon />\r\n                        </Avatar>\r\n                    }      \r\n                    title={`Grades ${this.props.classList ? \"(\"+this.props.classList.length+\")\" : \"\" }`}>\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-5\">\r\n                        {this.props.classList && this.props.classList.length > 0\r\n                        && this.props.classList.map((gradeItem, index) => {\r\n                            let item = gradeItem.grade_meta;\r\n                            return(\r\n                                \r\n                                        <div \r\n                                        // className={`${this.state.selectedGrade.id == gradeItem.id ? 'card bg-warning' : 'card'}`}\r\n                                        className={`${this.props.current_grade && this.props.current_grade.id == gradeItem.id ? 'card bg-warning' : 'card'}`}\r\n                                            onClick={() => this.props.onSelectGrade(gradeItem)}\r\n                                            >\r\n                                            <div className=\"card-body\">\r\n                                                <h5 className=\"card-title text-center\">{item.name}</h5>\r\n                                            </div>\r\n                                        </div>\r\n                            )\r\n                        })}\r\n                        </div>\r\n                        <div className=\"col-md-7\">\r\n                            <EditGrade \r\n                                {...this.props.current_grade}\r\n                                current_subject={this.props.current_subject}\r\n                                onAddSubject={(model) => this.props.onAddSubject(model)}\r\n                                // onFieldChange={ (val, field) => this.props.onFieldChange(val, field, this.props.current_grade) } \r\n                                onFieldChange={ (val, field) => this.onCurrentSubjectChange(val, field, this.props.current_grade) } \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                        \r\n                {(!this.props.classList || this.props.classList.length === 0) &&\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    There are currently no Grades added\r\n                </Typography>}\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GradeList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    },\r\n    chip: {\r\n        margin: 10\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AddGradeComponent from '../components/Grades/AddGrade';\r\nimport GradeList from '../components/Grades/GradeList';\r\nimport {    AddGrade, FetchGrades,\r\n            CloseSnackbar, CurrentGradeFieldChange,\r\n            SelectCurrentGrade, CurrentSubjectChange,\r\n            UpdateGrade,\r\n            OpenSnackbar } from '../actions/GradeActions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SnackbarComponent from '../components/lib/SnackbarComponent';\r\n\r\nclass GradeContainer extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchGrades()\r\n            .then((firstGrade) => {\r\n                console.log('firstGrade', firstGrade);\r\n                this.props.SelectCurrentGrade(firstGrade);\r\n            })\r\n    }\r\n\r\n    submitNewGrade = (model) => {\r\n        this.props.AddGrade(model)\r\n            .then(() => {\r\n                this.reload();\r\n            })\r\n    }\r\n\r\n    render = () => {\r\n        console.log('GradeContainer',this.props);\r\n        let { classList, current_grade, current_subject } = this.props;\r\n        console.log('current_subject', current_subject);\r\n        return(\r\n            <div className=\"container mx-auto\">\r\n                <div className=\"row\">\r\n                <div className=\"col-md-7\">\r\n                    <AddGradeComponent \r\n                        onSubmit={ (model) => this.submitNewGrade(model) }\r\n                        model={this.props.current_grade}\r\n                        onAdd={() => this.reload()}\r\n                        onFieldChange={ (val, field, model) => this.props.CurrentGradeFieldChange(val, field, model) } />\r\n                </div>\r\n                </div>\r\n                <div className=\"row mt-4\">\r\n                    <div className=\"col-md-7\">\r\n                        <GradeList \r\n                            classList={classList} \r\n                            current_grade={current_grade}\r\n                            current_subject={current_subject}\r\n                            onSelectGrade={(model) => this.props.SelectCurrentGrade(model)}\r\n                            onCurrentSubjectChange={ (val, model) => this.props.CurrentSubjectChange(val, model) }\r\n                            onFieldChange={ (val, field, model) => this.props.CurrentGradeFieldChange(val, field, model) }\r\n                            onAddSubject={(model) => {this.props.UpdateGrade(model, this.props.current_grade); this.reload() }}\r\n                            />\r\n                    </div>\r\n                </div>\r\n                <SnackbarComponent \r\n                    openSnack={this.props.snack_open} handleClose={() => this.props.CloseSnackbar()} \r\n                    snackMessage={\"Data Saved Successfully!\"} \r\n                    /> \r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.gradeReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddGrade: (model) => dispatch(AddGrade(model)),\r\n    FetchGrades: () => dispatch(FetchGrades()),\r\n    CloseSnackbar: () => dispatch(CloseSnackbar()),\r\n    OpenSnackbar: () => dispatch(OpenSnackbar()),\r\n    CurrentGradeFieldChange: (val, field, model) => dispatch(CurrentGradeFieldChange(val, field, model)),\r\n    SelectCurrentGrade: (model) => dispatch(SelectCurrentGrade(model)),\r\n    CurrentSubjectChange: (val, model) => dispatch(CurrentSubjectChange(val, model)),\r\n    UpdateGrade: (model, grade) => dispatch(UpdateGrade(model, grade))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GradeContainer);","import axios from 'axios';\r\nimport config from '../config';\r\nimport repository from '../repository';\r\n\r\nexport const ADD_GRADE_SUCCESS = 'ADD_GRADE_SUCCESS';\r\nexport const ADD_GRADE_FAIL = 'ADD_GRADE_FAIL';\r\nexport const UPDATE_GRADE_SUCCESS = 'UPDATE_GRADE_SUCCESS';\r\nexport const UPDATE_GRADE_FAIL = 'UPDATE_GRADE_FAIL';\r\nexport const CURRENT_GRADE_FIELD_CHANGE = 'CURRENT_GRADE_FIELD_CHANGE';\r\nexport const FETCH_GRADES_SUCCESS = 'FETCH_GRADES_SUCCESS';\r\nexport const FETCH_GRADES_FAIL = 'FETCH_GRADES_FAIL';\r\nexport const SELECT_CURRENT_GRADE = 'SELECT_CURRENT_GRADE';\r\nexport const CURRENT_SUBJECT_CHANGE = 'CURRENT_SUBJECT_CHANGE';\r\nexport const CLOSE_SNACKBAR = 'CLOSE_SNACKBAR';\r\nexport const OPEN_SNACKBAR = 'OPEN_SNACKBAR';\r\n\r\nexport const SelectCurrentGrade = (current_grade) => dispatch => {\r\n    console.log('select grade', current_grade);\r\n    dispatch({\r\n        type: SELECT_CURRENT_GRADE,\r\n        payload: current_grade\r\n    });\r\n}\r\n\r\nexport const CurrentSubjectChange = (val, model) => dispatch => {\r\n    model.subject = val;\r\n    dispatch({\r\n        type: CURRENT_SUBJECT_CHANGE,\r\n        payload: model\r\n    })\r\n    console.log('subject model', model);\r\n}\r\n\r\nexport const CurrentGradeFieldChange = (val, field, model) => dispatch => {\r\n    \r\n    if(!model.grade_meta) {\r\n        model.grade_meta = {};\r\n    }\r\n    switch(field)\r\n    {\r\n        case 'name':\r\n        {\r\n            model.grade_meta.name = val;\r\n            dispatch({\r\n                type: CURRENT_GRADE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n        case 'addsubject':\r\n        {\r\n            if(!model.grade_meta.subjects) {\r\n                model.grade_meta.subjects = [];\r\n            }\r\n            else {\r\n                let alreadyExistSubject = model.grade_meta.subjects.filter((sub) => {\r\n                    return sub === val;\r\n                })\r\n                if(!(alreadyExistSubject && alreadyExistSubject.length > 0)){\r\n                    model.grade_meta.subjects.push(val);\r\n                }\r\n            }\r\n            model.subject = val;\r\n            console.log('grade model', model);\r\n            dispatch({\r\n                type: CURRENT_GRADE_FIELD_CHANGE,\r\n                payload: model\r\n            });\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nexport const AddGrade = (classModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'grade';\r\n        repository.saveData(url, classModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: ADD_GRADE_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: ADD_GRADE_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const UpdateGrade = (subjectModel, gradeModel) => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'grade';\r\n\r\n        if(!gradeModel.grade_meta.subjects) {\r\n            gradeModel.grade_meta.subjects = [];\r\n        }\r\n        else {\r\n            let alreadyExistSubject = gradeModel.grade_meta.subjects.filter((sub) => {\r\n                return sub === subjectModel.subject;\r\n            })\r\n            if(!(alreadyExistSubject && alreadyExistSubject.length > 0)){\r\n                gradeModel.grade_meta.subjects.push(subjectModel.subject);\r\n            }\r\n        }\r\n\r\n        repository.updateData(url, gradeModel)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: UPDATE_GRADE_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(true);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: UPDATE_GRADE_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n    })\r\n}\r\n\r\nexport const FetchGrades = () => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getAdminApiUrl() + 'getAllGrades';\r\n        repository.getData(url)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: FETCH_GRADES_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(res.data[0]);\r\n            })\r\n            .catch((err) => {\r\n                dispatch({\r\n                    type: FETCH_GRADES_FAIL,\r\n                    payload: err\r\n                });\r\n                reject(err);\r\n            });\r\n\r\n    })\r\n}\r\n\r\nexport const CloseSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: CLOSE_SNACKBAR\r\n    });\r\n}\r\nexport const OpenSnackbar = () => dispatch => {\r\n    dispatch({\r\n        type: OPEN_SNACKBAR\r\n    });\r\n}\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport { formatToDecimals, getDateTime } from '../../Utils';\r\n\r\nconst TestsTakenList = (props) => {\r\n        console.log('testTakenList',props.testsTakenList);\r\n        if(!props.testsTakenList || props.testsTakenList.length === 0) {\r\n            return(\r\n                <div className=\"container mt-4\">\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    You have not taken tests yet.\r\n                </Typography>\r\n                </div>\r\n                )\r\n        }\r\n        return (\r\n            <div className=\"card border-0\">\r\n                    <div className=\"card-body\">\r\n                \r\n                        {props.testsTakenList && props.testsTakenList.length > 0\r\n                        && props.testsTakenList.map((testsTakenItem, index) => {\r\n                            //let item = JSON.parse(testsTakenItem);\r\n                            // let evaluationMeta = JSON.parse(testsTakenItem.evaluation_meta);\r\n                            let evaluationMeta = testsTakenItem.evaluation_meta;\r\n                            return(\r\n                            <div className=\"border-bottom\">\r\n                                <div className=\"card-title text-center\">\r\n                                    {testsTakenItem.testName}\r\n                                </div>\r\n                                <div className=\"row ml-4\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Score</div>\r\n                                        <div className=\"col-md-9\">{formatToDecimals(evaluationMeta.scorePercentage,2)}%</div>\r\n                                </div>\r\n                                <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Taken On</div>\r\n                                        <div className=\"col-md-9\">{getDateTime(testsTakenItem.modifiedOn)}</div>\r\n                                </div>\r\n                                <div className=\"row ml-4 mt-3 mb-4\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Result</div>\r\n                                        <div className=\"col-md-9\">{evaluationMeta.result}</div>\r\n                                </div>\r\n                            </div>\r\n                            )\r\n                        })}\r\n            </div>\r\n            </div>\r\n                \r\n        );\r\n}\r\n\r\nexport default TestsTakenList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport { formatToDecimals } from '../../Utils';\r\n\r\nconst RegisteredTestsList = (props) => {\r\n        console.log('registeredTests',props.pendingTests);\r\n        if(props.pendingTests && props.pendingTests.length === 0) {\r\n            return(\r\n                <div className=\"container mt-4\">\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                    No tests scheduled.\r\n                </Typography>\r\n                </div>\r\n                )\r\n        }\r\n        return (\r\n            <div className=\"card border-0\">\r\n                    <div className=\"card-body\">\r\n                        {props.pendingTests && props.pendingTests.map((testItem) => {\r\n                            console.log('testitem: ', testItem);\r\n                            return (\r\n                                <div className=\"border-bottom\">\r\n                                    <div className=\"card-title text-center\">\r\n                                        {testItem.test_meta.testName}\r\n                                    </div>\r\n                                    <div className=\"row ml-4\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Grade</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.grade}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Subject</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.subject}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Questions</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.selectedMcqs.length}</div>\r\n                                    </div>\r\n                                    <div className=\"row ml-4 mt-3\">\r\n                                        <div className=\"col-md-3 font-weight-light\">Duration</div>\r\n                                        <div className=\"col-md-9\">{testItem.test_meta.duration} Minutes</div>\r\n                                    </div>\r\n                                    {/* <div className=\"row\">\r\n                                        Created By: {testItem.user_meta.name}\r\n                                    </div> */}\r\n                                    <div className=\"mt-5 mb-4\">\r\n                                        {RegistrationButton(testItem, props.startRegisteredTest)}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                {/* </div> */}\r\n            {/* </div> */}\r\n        </div>\r\n        );\r\n}\r\n\r\nconst RegistrationButton = (testItem, startTestHandler) => {\r\n    let st = new Date(`${testItem.scheduledStart}`);\r\n        return (\r\n            <>\r\n                <div>\r\n                    Scheduled for {`${st.getDate()}-${st.getMonth() + 1}-${st.getFullYear()} ${st.getHours()}:00`}\r\n                </div>\r\n                <hr />\r\n                <div>\r\n                    <button className=\"btn btn-primary\"\r\n                        onClick={() =>\r\n                            startTestHandler(testItem.registrationId)\r\n                        }>\r\n                        Start\r\n                    </button>\r\n                </div>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default RegisteredTestsList;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport { CardHeader, CardContent, IconButton } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListIcon from '@material-ui/icons/ViewHeadline';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport { formatToDecimals, getDateTime } from '../../Utils';\r\nimport TestsTakenList from './TestsTakenList';\r\nimport RegisteredTestsList from './RegisteredTestList';\r\nimport StudentDashboard from '../../components/StudentDashboard';\r\n\r\nconst RegisteredTestTab = (props) => {\r\n    return (\r\n        <>\r\n            <nav>\r\n                <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n                    <a  class=\"nav-item nav-link active\" id=\"nav-upcoming-tab\" \r\n                        data-toggle=\"tab\" href=\"#nav-upcoming\" role=\"tab\" aria-controls=\"nav-upcoming\" aria-selected=\"true\">\r\n                           Upcoming\r\n                    </a>\r\n                    <a  class=\"nav-item nav-link\" id=\"nav-home-tab\" \r\n                        data-toggle=\"tab\" href=\"#nav-home\" role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">\r\n                           Active\r\n                    </a>\r\n                    <a  class=\"nav-item nav-link\" id=\"nav-profile-tab\" \r\n                        data-toggle=\"tab\" href=\"#nav-profile\" role=\"tab\" aria-controls=\"nav-profile\" \r\n                        aria-selected=\"false\">\r\n                            Completed\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n            <div class=\"tab-content\" id=\"nav-tabContent\">\r\n                <div class=\"tab-pane fade show active\" id=\"nav-upcoming\" role=\"tabpanel\" \r\n                     aria-labelledby=\"nav-upcoming-tab\">\r\n                    <StudentDashboard {...props} />\r\n                </div>\r\n                <div class=\"tab-pane fade show\" id=\"nav-home\" role=\"tabpanel\" \r\n                     aria-labelledby=\"nav-home-tab\">\r\n                    <RegisteredTestsList {...props} />\r\n                </div>\r\n                <div class=\"tab-pane fade\" id=\"nav-profile\" role=\"tabpanel\" aria-labelledby=\"nav-profile-tab\">\r\n                    <TestsTakenList {...props} />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegisteredTestTab;\r\n\r\nconst styles = {\r\n    avatar: {\r\n        backgroundColor: '#555'\r\n    },\r\n    formControl: {\r\n        width: '70%'\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { FetchPublicTests, FetchMyRegisteredTests\r\n        } from '../../actions/RegisteredTestActions';\r\nimport { RegisterForTest } from '../../actions/OpTests/OpTestActions';\r\nimport TestsTakenList from './TestsTakenList';\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport RegisteredTestsList from './RegisteredTestList';\r\nimport RegisteredTestTab from './RegisteredTestTab';\r\nimport config from '../../config';\r\n\r\nclass TestsTakenContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n        this.reload();\r\n    }\r\n\r\n    reload = () => {\r\n        this.props.FetchMyRegisteredTests();\r\n        this.props.FetchPublicTests();\r\n    }\r\n    \r\n    registerForTest = (model) => {\r\n        this.props.RegisterForTest(model)\r\n            .then(() => {\r\n                this.reload();\r\n            });\r\n    }\r\n    \r\n    startRegisteredTest = (registrationId) => {\r\n        let url = `${config.instance.getSiteUrl()}/startRegisteredTest/${registrationId}`;\r\n        window.open(url, '_blank');\r\n        //this.props.history.push('/startRegisteredTest/' + registrationId);\r\n    }\r\n\r\n    render = () => {\r\n        let { upcomingTests, registeredTests } = this.props;\r\n        console.log('registeredTests', registeredTests);\r\n        if(registeredTests) {\r\n            let testsTakenList = registeredTests.filter((item) => {\r\n                return item.status === 'Completed';\r\n            })\r\n            let pendingTests = registeredTests.filter((item) => {\r\n                return item.status === 'Registered' || item.status === 'InProgress';\r\n            })\r\n\r\n            return(\r\n                <>\r\n                <RegisteredTestTab\r\n                            upcomingTests={upcomingTests} \r\n                            testsTakenList={testsTakenList} \r\n                            pendingTests={pendingTests}\r\n                            registerForTest={(model) => this.registerForTest(model)}\r\n                            startRegisteredTest={(registrationId) => this.startRegisteredTest(registrationId)}\r\n                />\r\n                        {/* <TestsTakenList \r\n                            testsTakenList={testsTakenList} \r\n                        />\r\n                        <RegisteredTestsList\r\n                            tests={pendingTests}\r\n                            startRegisteredTest={(registrationId) => this.startRegisteredTest(registrationId)}\r\n                        /> */}\r\n                </>\r\n            );\r\n        }\r\n        return (\r\n            <LoadingComponent />\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    ...state.registeredTestReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    FetchMyRegisteredTests: () => dispatch(FetchMyRegisteredTests()),\r\n    FetchPublicTests: () => dispatch(FetchPublicTests()),\r\n    RegisterForTest: (model) => dispatch(RegisterForTest(model))\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestsTakenContainer);\r\nconst styles = {\r\n    actionButton: {\r\n        marginLeft: '80%'\r\n    }\r\n}","import config from '../config';\r\nimport repository from '../repository';\r\nimport { LogoutCurrentUser } from './UserActions';\r\n\r\nexport const FETCH_MY_REGISTERED_TESTS = 'FETCH_MY_REGISTERED_TESTS';\r\nexport const FETCH_MY_REGISTERED_TESTS_SUCCESS = 'FETCH_MY_REGISTERED_TESTS_SUCCESS';\r\nexport const FETCH_MY_REGISTERED_TESTS_FAIL = 'FETCH_MY_REGISTERED_TESTS_FAIL';\r\nexport const FETCH_TESTS_AVAILABLE_FOR_ME_SUCCESS = 'FETCH_TESTS_AVAILABLE_FOR_ME_SUCCESS';\r\nexport const FETCH_TESTS_AVAILABLE_FOR_ME_FAIL = 'FETCH_TESTS_AVAILABLE_FOR_ME_FAIL';\r\n\r\nexport const FetchMyRegisteredTests = () => dispatch => {\r\n    return new Promise((resolve, reject) => {\r\n        let url = config.instance.getCandidateApiUrl() + 'getMyRegistrations';\r\n        repository.getData(url)\r\n            .then((res) => {\r\n                dispatch({\r\n                    type: FETCH_MY_REGISTERED_TESTS_SUCCESS,\r\n                    payload: res.data\r\n                });\r\n                resolve(res.data);\r\n            })\r\n            .catch((err) => {\r\n                if(err.data && err.data.message === 'Invalid token.') {\r\n                    dispatch(LogoutCurrentUser());\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: FETCH_MY_REGISTERED_TESTS_FAIL,\r\n                        payload: err\r\n                    });\r\n                }\r\n                reject(err);\r\n            });\r\n\r\n    })\r\n}\r\n\r\nexport const FetchPublicTests = () => dispatch => {\r\n    let url = config.instance.getAdminApiUrl() + 'testsAvailableForMe';\r\n    repository.getData(url)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: FETCH_TESTS_AVAILABLE_FOR_ME_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            if(err.data && err.data.message === 'Invalid token.') {\r\n                dispatch(LogoutCurrentUser());\r\n            }\r\n            else {\r\n                dispatch({\r\n                    type: FETCH_TESTS_AVAILABLE_FOR_ME_FAIL,\r\n                    payload: err.statusText\r\n                });\r\n            }\r\n        });\r\n}\r\n","import React from'react';\r\n\r\nclass OpProfile extends React.Component {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n            <>\r\n                My profile\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OpProfile;","import React from'react';\r\nimport config from '../../config';\r\nimport repository from '../../repository';\r\nimport { CardContent, FormControl, TextField, CardActions, Button, CardHeader } from '@material-ui/core';\r\nimport SnackbarComponent from '../../components/lib/SnackbarComponent';\r\n\r\nclass ChangePassword extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPassword: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            submitButtonText: 'Submit',\r\n            snackOpen: false,\r\n            snackMessage: ''\r\n        };\r\n    }\r\n\r\n    resetFields = () => {\r\n        this.setState({\r\n            currentPassword: '',\r\n            password: '',\r\n            errorMessage: '',\r\n            submitButtonText: 'Submit'\r\n        });\r\n    }\r\n    \r\n    localHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        let url = config.instance.getAdminApiUrl() + 'changePassword';\r\n        let data = {\r\n            currentPassword: this.state.currentPassword,\r\n            password: this.state.password\r\n        }\r\n        this.setState({\r\n            submitButtonText: 'Working...'\r\n        })\r\n        repository.saveData(url, data)\r\n        // axios.post(url, data)\r\n        .then((res) => {\r\n            console.log('password change status', res);\r\n            if (res) {\r\n                this.resetFields();\r\n                this.setState({\r\n                    snackOpen: true,\r\n                    snackMessage: 'Password changed successfully'\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    submitButtonText: 'Submit',\r\n                    errorMessage: 'Wrong Credentials. Please try again.'\r\n                });\r\n            }\r\n        }).catch((err) => {\r\n            this.setState({\r\n                    submitButtonText: 'Submit',\r\n                    errorMessage: err.data\r\n            });\r\n        });\r\n    }\r\n\r\n    onCurrentPasswordChange = (value) => {\r\n        this.setState({\r\n            currentPassword: value\r\n        });\r\n    }\r\n\r\n    onPasswordChange = (value) => {\r\n        this.setState({\r\n            password: value\r\n        });\r\n    }\r\n\r\n    render = () => {\r\n        let { errorMessage, submitButtonText } = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <form noValidate autoComplete=\"off\" onSubmit={(e) => this.localHandler(e)}>\r\n                            <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"Current Password\"\r\n                                            type=\"password\"\r\n                                            value={this.state.currentPassword}\r\n                                            onChange={(e) => this.onCurrentPasswordChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            className=\"text-lg\"\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <FormControl className=\"col-md-12\" variant=\"outlined\">\r\n                                        <TextField\r\n                                            label=\"New Password\"\r\n                                            type=\"password\"\r\n                                            value={this.state.password}\r\n                                            onChange={(e) => this.onPasswordChange(e.target.value)}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\" />\r\n                                    </FormControl>\r\n                                </div>\r\n                                <div className=\"row mt-4\">\r\n                                    <button className=\"btn btn-primary btn-block\" type=\"submit\">\r\n                                        {submitButtonText}\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n\r\n                        </form>\r\n                    </div>\r\n                    <p className=\"col-md-12 text-center text-danger\">{errorMessage}</p>\r\n                </div>\r\n                <SnackbarComponent \r\n                    openSnack={this.state.snackOpen} handleClose={() => this.setState({snackOpen: false})}\r\n                    snackMessage={this.state.snackMessage} \r\n                    /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChangePassword;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport OpProfile from './OpProfile';\r\nimport ChangePassword from './ChangePassword';\r\n\r\nclass OpProfileContainer extends React.Component {\r\n    \r\n    componentDidMount = () => {\r\n    }\r\n    \r\n    render = () => {\r\n        let props = this.props;\r\n        return(\r\n            <div className=\"container\">\r\n            <nav>\r\n                <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n                    <a  class=\"nav-item nav-link active\" id=\"nav-upcoming-tab\" \r\n                        data-toggle=\"tab\" href=\"#nav-upcoming\" role=\"tab\" aria-controls=\"nav-upcoming\" aria-selected=\"true\">\r\n                           Profile\r\n                    </a>\r\n                    <a  class=\"nav-item nav-link\" id=\"nav-home-tab\" \r\n                        data-toggle=\"tab\" href=\"#nav-home\" role=\"tab\" aria-controls=\"nav-home\" aria-selected=\"true\">\r\n                           Change Password\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n            <div class=\"tab-content\" id=\"nav-tabContent\">\r\n                <div class=\"tab-pane fade show active\" id=\"nav-upcoming\" role=\"tabpanel\" \r\n                     aria-labelledby=\"nav-upcoming-tab\">\r\n                    <OpProfile {...props} />\r\n                </div>\r\n                <div class=\"tab-pane fade show\" id=\"nav-home\" role=\"tabpanel\" \r\n                     aria-labelledby=\"nav-home-tab\">\r\n                    <ChangePassword {...props} />\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OpProfileContainer);","import React from 'react';\r\nimport AddCategoryComponent from './Categories/AddCategory';\r\nimport AddCandidateComponent from './Candidates/AddCandidate';\r\nimport DashboardComponent from './Dashboard';\r\nimport UsersComponent from '../Containers/User/UserContainer';\r\nimport LoginComponent from './lib/LoginComponent';\r\nimport LocalLoginComponent from './lib/LocalLoginComponent';\r\nimport User401 from '../Containers/User/User401';\r\nimport UserForbidden from '../Containers/User/UserForbidden';\r\nimport ResourceNotFound from '../Containers/User/ResourceNotFound';\r\nimport { Route } from 'react-router-dom'\r\nimport CategoriesContainer from '../Containers/CategoryContainer';\r\nimport OrgContainer from '../Containers/Org/OrgContainer';\r\nimport SkillsContainer from '../Containers/SkillContainer';\r\nimport TestConsoleContainer from '../Containers/TestConsole/TestConsoleContainer';\r\nimport McqContainer from '../Containers/McqContainer';\r\nimport BulkMcq from '../components/Mcq/BulkUpload';\r\nimport CandidatesContainer from '../Containers/CandidateContainer';\r\nimport AdminTestContainer from '../Containers/AdminTestContainer';\r\nimport McqList from '../components/Mcq/McqList';\r\nimport CandidateList from '../components/Candidates/CandidateList';\r\nimport InviteConsoleContainer from '../Containers/InviteConsole/InviteConsoleContainer';\r\nimport InviteContainer from '../Containers/InviteConsole/InviteContainer';\r\nimport SimulatorConsoleContainer from '../Containers/Simulator/SimulatorConsoleContainer';\r\nimport SimulatorShell from '../Containers/Simulator/SimulatorShell';\r\n\r\nimport AddRmaRequest from '../HiTech/AddRmaRequestContainer';\r\nimport RmaRequestList from '../HiTech/RmaRequestListContainer';\r\nimport ViewRmaRequest from '../HiTech/ViewRmaRequest';\r\n\r\nimport PrivateRoute from '../components/lib/PrivateRoute';\r\nimport CandidateConsoleContainer from '../Containers/CandidateConsole/CandidateConsoleContainer';\r\nimport SimulatorRoute from './lib/SimulatorRoute';\r\nimport OpSignup from '../OnlinePortal/Home/OpSignup';\r\nimport OpLogin from '../OnlinePortal/Home/OpLogin';\r\nimport OpLoginSignup from '../OnlinePortal/Home/OpLoginSignup';\r\nimport OpEmailVerifiedSuccess from '../OnlinePortal/Home/OpEmailVerifiedSuccess';\r\nimport OpContent from '../OnlinePortal/Home/OpContent';\r\nimport TestLandingPage from './Simulator/TestLandingPage';\r\nimport OpShell from '../OnlinePortal/Home';\r\nimport OpTestContainer from '../OnlinePortal/Tests/OpTestContainer';\r\nimport OpTestConsole from '../OnlinePortal/Tests/OpTestConsole';\r\nimport GradeContainer from '../Containers/GradeContainer';\r\nimport TestsTakenContainer from '../Containers/TestsTaken/TestsTakenContainer';\r\nimport OpProfileContainer from '../OnlinePortal/Profile/OpProfileContainer';\r\n\r\nconst Routes = (props) => {\r\n    return (\r\n        <div>\r\n            <PrivateRoute exact path=\"/\" component={DashboardComponent} />\r\n            {/* <Route path=\"/login\" component={LocalLoginComponent} /> */}\r\n            <Route path=\"/login\" component={OpLoginSignup} />\r\n            <Route path=\"/unauthorizedUser\" component={User401} />\r\n            <Route path=\"/userForbidden\" component={UserForbidden} />\r\n            <Route path=\"/notFound\" component={ResourceNotFound} />\r\n            <PrivateRoute {...props} path=\"/dashboard\" component={DashboardComponent} />\r\n            <PrivateRoute path=\"/tests\" component={AdminTestContainer} />\r\n            <PrivateRoute {...props} path=\"/testConsole\" component={TestConsoleContainer} />\r\n            <PrivateRoute {...props} path=\"/candidateConsole\" component={CandidateConsoleContainer} />\r\n            <PrivateRoute {...props} path=\"/inviteConsole\" component={InviteContainer} />\r\n            <PrivateRoute {...props} path=\"/invitations\" component={InviteConsoleContainer} />\r\n            <PrivateRoute path=\"/mcqs\" component={McqList} />\r\n            <PrivateRoute path=\"/addMcq\" component={McqContainer} />\r\n            <PrivateRoute path=\"/bulkMcq\" component={BulkMcq} />\r\n            <PrivateRoute path=\"/categories\" component={CategoriesContainer} />\r\n            <PrivateRoute path=\"/orgs\" component={OrgContainer} />\r\n            <PrivateRoute path=\"/skills\" component={SkillsContainer} />\r\n            <PrivateRoute path=\"/addCategory\" component={AddCategoryComponent} />\r\n            <PrivateRoute path=\"/users\" component={UsersComponent} />\r\n            {/* <Route path=\"/candidates\" component={CandidateList} /> */}\r\n            {/* <Route path=\"/addCandidate\" component={CandidatesContainer} /> */}\r\n\r\n            <Route path=\"/startTest/:inviteid\" component={SimulatorConsoleContainer} />\r\n            <Route path=\"/startRegisteredTest/:registrationId\" component={SimulatorConsoleContainer} />\r\n            <Route path=\"/testLanding/:inviteid\" component={TestLandingPage} />\r\n            <Route path=\"/simulatorShell/:inviteid\" component={SimulatorShell} />\r\n\r\n            {/* Routes for OP */}\r\n            \r\n            {/* <Route path=\"/emailVerified\" component={OpEmailVerifiedSuccess} /> */}\r\n            <Route path=\"/verifyUser/:userIv/:userContent\" component={OpEmailVerifiedSuccess} />\r\n            <PrivateRoute path=\"/opContent\" component={OpContent} />\r\n            <PrivateRoute path=\"/ophome\" component={TestsTakenContainer} />\r\n            <PrivateRoute path=\"/optests\" component={OpTestContainer} />\r\n            <PrivateRoute path=\"/opTestConsole\" component={OpTestConsole} />\r\n            <PrivateRoute path=\"/grades\" component={GradeContainer} />\r\n            <PrivateRoute path=\"/myTests\" component={TestsTakenContainer} />\r\n            <PrivateRoute path=\"/myProfile\" component={OpProfileContainer} />\r\n\r\n\r\n            {/* Routes for HiTech*/}\r\n            <Route path=\"/rmaRequests\" component={RmaRequestList} />\r\n            <Route path=\"/createRma\" component={AddRmaRequest} />\r\n            <Route path=\"/viewRma\" component={ViewRmaRequest} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { SetUserInfo, LogoutCurrentUser } from '../actions/UserActions';\r\n\r\nimport Header from './layouts/Header';\r\nimport SideDrawer from './layouts/SideDrawer';\r\nimport SimulatorShell from '../Containers/Simulator/SimulatorShell';\r\nimport LocalLoginComponent from '../components/lib/LocalLoginComponent';\r\nimport LoadingComponent from '../components/lib/LoadingComponent';\r\nimport Routes from './Routes';\r\nimport AuthHelper from '../AuthHelper';\r\nimport config from '../config';\r\nimport { info, primary, secondary, success, warning } from './lib/ColorCodes';\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport OpMenu from '../OnlinePortal/Home/OpMenu';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => createMuiTheme({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  hide: {\r\n    display: 'none'\r\n  },\r\n  verticalCenter: {\r\n    paddingTop: '10%'\r\n  },\r\n  dashboardHeight: {\r\n    // marginTop: '5%',\r\n    minHeight: '375px',\r\n    overflowY: 'auto'\r\n  },\r\n  actionButton: {\r\n      marginLeft: '70%'\r\n  },\r\n  bgSuccessMain: {\r\n    backgroundColor: success.main\r\n  },\r\n  bgSuccessDark: {\r\n    backgroundColor: success.dark\r\n  },\r\n  bgSuccessLight: {\r\n    backgroundColor: success.light\r\n  },\r\n  bgPrimaryMain: {\r\n    backgroundColor: primary.main,\r\n    color: '#fff',\r\n    fontWeight: '700'\r\n  },\r\n  bgPrimaryDark: {\r\n    backgroundColor: primary.dark\r\n  },\r\n  bgPrimaryLight: {\r\n    backgroundColor: primary.light\r\n  },\r\n  bgWarningMain: {\r\n    backgroundColor: warning.main\r\n  },\r\n  bgWarningDark: {\r\n    backgroundColor: warning.dark\r\n  },\r\n  bgWarningLight: {\r\n    backgroundColor: warning.light\r\n  },\r\n  bgInfoMain: {\r\n    backgroundColor: info.main\r\n  },\r\n  bgInfoDark: {\r\n    backgroundColor: info.dark\r\n  },\r\n  bgInfoLight: {\r\n    backgroundColor: info.light\r\n  },\r\n  bgSecondaryMain: {\r\n    backgroundColor: secondary.main\r\n  },\r\n  bgSecondaryDark: {\r\n    backgroundColor: secondary.dark\r\n  },\r\n  bgSecondaryLight: {\r\n    backgroundColor: secondary.light\r\n  },\r\n  paletteBorderLeftSuccessMain: {\r\n    borderLeft: `2px solid ${success.main}`\r\n  },\r\n  paletteBorderLeftSuccessLight: {\r\n    borderLeft: `2px solid ${success.light}`\r\n  },\r\n  paletteBorderLeftSuccessDark: {\r\n    borderLeft: `2px solid ${success.dark}`\r\n  },\r\n  paletteBorderLeftPrimaryMain: {\r\n    borderLeft: `2px solid ${primary.main}`\r\n  },\r\n  paletteBorderLeftPrimaryLight: {\r\n    borderLeft: `2px solid ${primary.light}`\r\n  },\r\n  paletteBorderLeftPrimaryDark: {\r\n    borderLeft: `2px solid ${primary.dark}`\r\n  },\r\n  paletteBorderLeftSecondaryMain: {\r\n    borderLeft: `2px solid ${secondary.main}`\r\n  },\r\n  paletteBorderLeftSecondaryLight: {\r\n    borderLeft: `2px solid ${secondary.light}`\r\n  },\r\n  paletteBorderLeftSecondaryDark: {\r\n    borderLeft: `2px solid ${secondary.dark}`\r\n  },\r\n  paletteBorderBottomSuccessMain: {\r\n    borderBottom: `2px solid ${success.main}`\r\n  },\r\n  paletteBorderBottomSuccessLight: {\r\n    borderBottom: `2px solid ${success.light}`\r\n  },\r\n  paletteBorderBottomSuccessDark: {\r\n    borderBottom: `2px solid ${success.dark}`\r\n  },\r\n  paletteBorderBottomPrimaryMain: {\r\n    borderBottom: `2px solid ${primary.main}`,\r\n    height: '150px'\r\n  },\r\n  paletteBorderBottomPrimaryLight: {\r\n    borderBottom: `2px solid ${primary.light}`\r\n  },\r\n  paletteBorderBottomPrimaryDark: {\r\n    borderBottom: `2px solid ${primary.dark}`\r\n  },\r\n  paletteBorderBottomSecondaryMain: {\r\n    borderBottom: `2px solid ${secondary.main}`\r\n  },\r\n  paletteBorderBottomSecondaryLight: {\r\n    borderBottom: `2px solid ${secondary.light}`\r\n  },\r\n  paletteBorderBottomSecondaryDark: {\r\n    borderBottom: `2px solid ${secondary.dark}`\r\n  },\r\n  paletteBorderBottomListItem: {\r\n    borderBottom: `1px solid #9AA59F`\r\n  },\r\n  palettePrimaryLight: {\r\n    backgroundColor: '#757ce8'\r\n  },\r\n  palettePrimaryMain: {\r\n    backgroundColor: primary.main,\r\n    color: '#fff',\r\n    borderRadius: '15px'\r\n  },\r\n  palettePrimaryDark: {\r\n    // backgroundColor: primary.dark,\r\n    backgroundColor: '#E3D6DE',\r\n    textAlign: 'center'\r\n    // border: '2px solid',\r\n    // borderWidth: '0px',\r\n    // borderColor: primary.dark, \r\n  },\r\n  palettePrimaryContrastText: {\r\n    backgroundColor: '#fff',\r\n    color: '#000'\r\n  },\r\n  paletteSecondaryLight: {\r\n    backgroundColor: '#ff7961'\r\n  },\r\n  paletteSecondaryMain: {\r\n    backgroundColor: '#f44336'\r\n  },\r\n  paletteSecondaryDark: {\r\n    backgroundColor: '#ba000d'\r\n  },\r\n  paletteSecondaryContrastText: {\r\n    backgroundColor: '#000'\r\n  },\r\n  paletteDashboardBox: {\r\n    // backgroundColor: '#CBC2E1'\r\n    minHeight: '300px',\r\n    border: '1px solid #CBC2E1'\r\n  },\r\n  paletteReportBox: {\r\n    border: '1px solid #CBC2E1',\r\n    padding: '4%',\r\n    borderRadius: '15px'    \r\n  },\r\n  profileBox: {\r\n    minHeight: '300px',\r\n    borderRadius: '15px'    \r\n  },\r\n  infoText: {\r\n    fontSize: '16px',\r\n    fontWeight: '700'\r\n  },\r\n  fontSubHeading: {\r\n    fontSize: '14px',\r\n    fontWeight: '700'\r\n  },\r\n  fontWhiteSecondary: {\r\n    color: '#fff',\r\n  },\r\n  fontBlackPrimary: {\r\n    color: '#38403B',\r\n    fontWeight: '700'\r\n  },\r\n  fontBlackSecondary: {\r\n    color: '#44594C',\r\n  },\r\n  squareIcon: {\r\n    width: '100%',\r\n    height: '100%',\r\n    // color: '#fff',\r\n    borderRadius: '10px',\r\n    // backgroundColor: '#ff5722',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing.unit * 7 + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing.unit * 9 + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3,\r\n  },\r\n  paddingBottom: {\r\n    paddingBottom: '4%'\r\n  }\r\n});\r\n\r\nclass Shell extends React.Component {\r\n  state = {\r\n    open: false,\r\n    config: {},\r\n    showStandbyPage: false\r\n  };\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n  \r\n  componentDidMount = () => {\r\n      console.log('config already', config.instance.getAdminApiUrl());\r\n      if(!config.instance.getSiteTitle()) {\r\n        config.instance.initialize()\r\n          .then((res) => {\r\n            console.log('res', res);\r\n              if(res){\r\n                this.setState({\r\n                  config: res\r\n                });\r\n              }\r\n          })\r\n          .catch((err) => {\r\n            // alert('err in shell');\r\n            //   this.setState({\r\n            //     showStandbyPage: true\r\n            //   })\r\n          })\r\n      }\r\n  }\r\n\r\n  Logout = () => {\r\n    this.props.LogoutCurrentUser();\r\n  }\r\n\r\n  StandbyMessage = () => {\r\n    return (\r\n    <div className=\"container text-center\">\r\n      <div className=\"card bg-default mt-4\">\r\n        <div className=\"card-header\">\r\n          This Website is currently unavailable, will be back soon.\r\n        </div>\r\n        <div className=\"card-body\">\r\n          Please email to <span className=\"font-italic\">support@cloudsolutionshub.com</span> if problem continues.\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n        const { classes, theme, isTokenExpired } = this.props;\r\n        let user = AuthHelper.GetUserInfo();\r\n\r\n        let { config, showStandbyPage } = this.state;\r\n        if(!config.site_title) {\r\n          if(showStandbyPage) {\r\n            return this.StandbyMessage();\r\n          }\r\n          // alert(config.site_title);\r\n          return (\r\n            <LoadingComponent />\r\n          )\r\n        }\r\n\r\n        if(user && (user.role === 'candidate'\r\n                || user.role === 'student')) {\r\n            return (\r\n              <div className={classes.root}>\r\n                  <CssBaseline />\r\n                  <Header classes={classes} \r\n                        openState={this.state.open} \r\n                        onLogout={() => this.Logout()}\r\n                        //isTickerRequired={true}\r\n                        isDrawerRequired={false}\r\n                        isLogoutButtonRequired={true}\r\n                        isTokenExpired={isTokenExpired}\r\n                        />\r\n                    <Router>\r\n                      <main className={classes.content}>\r\n                        <div className={classes.toolbar} />\r\n                          <div className=\"row\">\r\n                              <div className=\"col-md-2\" />\r\n                              <div className=\"col-md-8\">\r\n                                <OpMenu />\r\n                              </div>\r\n                              <div className=\"col-md-2\" />\r\n                          </div>\r\n                          <div className=\"row\">\r\n                              <div className=\"col-md-2\" />\r\n                              <div className=\"col-md-8\">\r\n                                <Routes />\r\n                              </div>\r\n                              <div className=\"col-md-2\" />\r\n                            </div>\r\n                      </main>\r\n                    </Router>\r\n              </div>\r\n            );\r\n        }\r\n        \r\n        if(user && (user.role === 'teacher')) {\r\n          return (\r\n            <div className={classes.root}>\r\n                <CssBaseline />\r\n                <Header classes={classes} \r\n                      openState={this.state.open} \r\n                      onLogout={() => this.Logout()}\r\n                      isDrawerRequired={false}\r\n                      isLogoutButtonRequired={true}\r\n                      isTokenExpired={isTokenExpired}\r\n                      />\r\n                  <Router>\r\n                    <main className={classes.content}>\r\n                      <div className={classes.toolbar} />\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-2\" />\r\n                            <div className=\"col-md-8\">\r\n                              <OpMenu />\r\n                            </div>\r\n                            <div className=\"col-md-2\" />\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-2\" />\r\n                            <div className=\"col-md-8\">\r\n                              <Routes />\r\n                            </div>\r\n                            <div className=\"col-md-2\" />\r\n                        </div>\r\n                    </main>\r\n                  </Router>\r\n            </div>\r\n          );\r\n        }\r\n        return (\r\n          <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Header classes={classes} \r\n                    openState={this.state.open} \r\n                    onDrawerOpen={this.handleDrawerOpen}\r\n                    onLogout={() => this.Logout()}\r\n                    //isTickerRequired={false}\r\n                    isDrawerRequired={true}\r\n                    isLogoutButtonRequired={true}\r\n                    isTokenExpired={isTokenExpired}\r\n                    />\r\n            <Router>\r\n              <SideDrawer classes={classes} \r\n                      openState={this.state.open} \r\n                      onDrawerClose={this.handleDrawerClose}\r\n                      theme={theme}\r\n                      />\r\n              <main className={classes.content}>\r\n                  <div className={classes.toolbar} />\r\n                      <Routes classes={classes}/>\r\n                  \r\n              </main>\r\n            </Router>\r\n          </div>\r\n          );\r\n    }\r\n}\r\n\r\nShell.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  SetUserInfo: (userInfo) => dispatch(SetUserInfo(userInfo)),\r\n  LogoutCurrentUser: () => dispatch(LogoutCurrentUser())\r\n});\r\nexport default withStyles(styles, { withTheme: true })(connect(mapStateToProps, mapDispatchToProps)(Shell));\r\n","import { ADD_CATEGORY_SUCCESS, ADD_CATEGORY_FAIL, SELECT_CATEGORY,\r\n         UPDATE_CATEGORY_SUCCESS, UPDATE_CATEGORY_FAIL,\r\n         FETCH_CATEGORIES_SUCCESS, \r\n         FETCH_CATEGORIES_FAIL,\r\n         OPEN_SNACKBAR, \r\n         CLOSE_SNACKBAR, \r\n         CURRENT_CATEGORY_FIELD_CHANGE,\r\n         CURRENT_CATEGORY_FIELD_CHANGE_END, \r\n         CATEGORY_SEARCH_BEGIN,\r\n         CATEGORY_SEARCH_SUCCESS} from \"../actions/CategoryActions\";\r\n\r\nconst initial_current_Category = {\r\n    id: 0, category_meta: {title:'',description:''}\r\n}\r\n\r\nexport default (state = {}, action) => {\r\n    switch(action.type) {\r\n        case ADD_CATEGORY_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                current_category: {title:'',description:''},\r\n                success_message: 'Category added successfully'\r\n            }\r\n        }\r\n        case UPDATE_CATEGORY_FAIL:\r\n        case ADD_CATEGORY_FAIL:\r\n        {\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        }\r\n        case SELECT_CATEGORY:\r\n        {\r\n            return {\r\n                ...state,\r\n                field_updated: !state.field_updated,\r\n                editMode: true,\r\n                current_category: action.payload\r\n            }\r\n        }\r\n        case UPDATE_CATEGORY_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                editMode: false,\r\n                current_category: {title:'',description:''},\r\n                success_message: 'Category Updated Successfully'\r\n            }\r\n        }\r\n        case CURRENT_CATEGORY_FIELD_CHANGE:\r\n        {\r\n            \r\n            return {\r\n                ...state,\r\n                field_updated: true,\r\n                current_category: action.payload\r\n            }\r\n        }\r\n        case CURRENT_CATEGORY_FIELD_CHANGE_END:\r\n        {\r\n            return {\r\n                ...state,\r\n                field_updated: false\r\n            }\r\n        }\r\n        case FETCH_CATEGORIES_SUCCESS:\r\n        {\r\n            return {\r\n                ...state,\r\n                error: null,\r\n                editMode: false,\r\n                current_category: {id: 0, category_meta: {title:'',description:''}},\r\n                success_message: '',\r\n                search_enabled: false,\r\n                categoryList: action.payload\r\n            }\r\n        }\r\n        case CATEGORY_SEARCH_BEGIN:\r\n        {\r\n            return {\r\n                ...state,\r\n                search_enabled: !state.search_enabled,\r\n                search_term: '',\r\n                filteredCategories: state.categoryList\r\n            }\r\n        }\r\n        case CATEGORY_SEARCH_SUCCESS:\r\n        {   \r\n            return {\r\n                ...state,\r\n                search_term: action.payload.searchTerm,\r\n                filteredCategories: action.payload.filteredCategories\r\n            }\r\n        }\r\n        case FETCH_CATEGORIES_FAIL:\r\n        {\r\n            return {\r\n                ...state,\r\n                current_category: initial_current_Category,\r\n                error: action.payload\r\n            }\r\n        }\r\n        case OPEN_SNACKBAR:\r\n        {\r\n            return {\r\n                ...state,\r\n                snack_open: true\r\n            }\r\n        }\r\n        case CLOSE_SNACKBAR:\r\n        {\r\n            return {\r\n                ...state,\r\n                snack_open: false\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { ADD_ORG_SUCCESS, ADD_ORG_FAIL, SELECT_ORG,\r\n    UPDATE_ORG_SUCCESS, UPDATE_ORG_FAIL,\r\n    FETCH_ORGS_SUCCESS, \r\n    FETCH_ORGS_FAIL,\r\n    CURRENT_ORG_FIELD_CHANGE,\r\n    CURRENT_ORG_FIELD_CHANGE_END, \r\n} from \"../actions/OrgActions\";\r\n\r\nconst initial_current_org = {\r\nid: 0, org_meta: {name:'',city:''}\r\n}\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_ORG_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_org: {name:'',city:''},\r\n           success_message: 'Org added successfully'\r\n       }\r\n   }\r\n   case UPDATE_ORG_FAIL:\r\n   case ADD_ORG_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SELECT_ORG:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           editMode: true,\r\n           current_org: action.payload\r\n       }\r\n   }\r\n   case UPDATE_ORG_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           current_org: {name:'',city:''},\r\n           success_message: 'Org Updated Successfully'\r\n       }\r\n   }\r\n   case CURRENT_ORG_FIELD_CHANGE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_org: action.payload\r\n       }\r\n   }\r\n   case CURRENT_ORG_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case FETCH_ORGS_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           editMode: false,\r\n           current_org: {id: 0, org_meta: {name:'',city:''}},\r\n           success_message: '',\r\n           search_enabled: false,\r\n           orgList: action.payload\r\n       }\r\n   }\r\n   case FETCH_ORGS_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           current_org: initial_current_org,\r\n           error: action.payload\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { ADD_RMAREQUESTS_BEGIN, ADD_RMAREQUESTS_SUCCESS, ADD_RMAREQUESTS_FAIL, SELECT_CATEGORY,\r\n    UPDATE_RMAREQUESTS_SUCCESS, UPDATE_RMAREQUESTS_FAIL,\r\n    FETCH_RMAREQUESTS_SUCCESS, \r\n    FETCH_RMAREQUESTS_FAIL,\r\n    FETCH_RMAREQUEST_SUCCESS,\r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_RMAREQUESTS_FIELD_CHANGE,\r\n    CURRENT_RMAREQUESTS_FIELD_CHANGE_END, \r\n    INITIALIZE_RMA_FIELDS,\r\n    SELECT_RMA_REQUEST, GOBACK_TO_ALL_REQUESTS\r\n    } from '../HiTech/RmaRequestActions'\r\nimport config from '../config';\r\n\r\nconst initial_state = {\r\n    customerDetails: {},\r\n    productList: [],\r\n    current_product: {},\r\n    vendorDetails: {},\r\n    emailTo: '', //config.hitechConfig.notifyEmailId,\r\n    field_version: 0\r\n}\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n    case INITIALIZE_RMA_FIELDS:\r\n    {\r\n        return {\r\n            current_rma_request: initial_state\r\n        }\r\n    }\r\n    case ADD_RMAREQUESTS_BEGIN:\r\n    {\r\n        return {\r\n            ...state,\r\n            error: null,\r\n            saving: true\r\n        }\r\n    }\r\n   case ADD_RMAREQUESTS_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_rma_request: {},\r\n           success_message: 'RMA Request submitted successfully',\r\n           saving: false\r\n       }\r\n   }\r\n   case UPDATE_RMAREQUESTS_FAIL:\r\n   case ADD_RMAREQUESTS_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case UPDATE_RMAREQUESTS_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           success_message: 'Category Updated Successfully'\r\n       }\r\n   }\r\n   case CURRENT_RMAREQUESTS_FIELD_CHANGE:\r\n   {\r\n    //    console.log('rma field change reducer');\r\n    //    console.log(action.payload);\r\n       let newState = action.payload;\r\n       \r\n       return {\r\n           ...state,\r\n           current_rma_request: {\r\n               ...state.current_rma_request,\r\n               customerDetails: newState.customerDetails,\r\n               productList: newState.productList,\r\n               current_product: newState.current_product,\r\n               vendorDetails: newState.vendorDetails\r\n           }\r\n       }\r\n    //    return {\r\n    //        ...state,\r\n    //        field_updated: true,\r\n    //        current_rma_request: action.payload\r\n    //    }\r\n   }\r\n   case FETCH_RMAREQUESTS_SUCCESS:\r\n   {\r\n       console.log('fetch rma requests reducer');\r\n       console.log(action.payload);\r\n       \r\n       return {\r\n           ...state,\r\n           error: null,\r\n           success_message: '',\r\n           selectedRmaRequestModel: null,\r\n           rmaRequests: action.payload\r\n       }\r\n   }\r\n   case SELECT_RMA_REQUEST: \r\n   {\r\n       return {\r\n           ...state,\r\n           selectedRmaRequestModel: action.payload\r\n       }\r\n   }\r\n   case GOBACK_TO_ALL_REQUESTS:\r\n   {\r\n       return {\r\n           ...state,\r\n           selectedRmaRequestModel: null\r\n       }\r\n   }\r\n   case FETCH_RMAREQUEST_SUCCESS:\r\n   {\r\n    console.log('fetch single rma requests reducer');\r\n    console.log(action.payload);\r\n        \r\n        return {\r\n            ...state,\r\n            error: null,\r\n            success_message: '',\r\n            viewRmaRequestModel: action.payload\r\n        }\r\n   }\r\n   case FETCH_RMAREQUESTS_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { combineReducers } from 'redux';\r\nimport categoryReducer from \"./categoryReducer\";\r\nimport skillReducer from \"./skillReducer\";\r\nimport mcqReducer from \"./mcqReducer\";\r\nimport candidateReducer from './candidateReducer';\r\nimport adminTestReducer from './adminTestReducer';\r\nimport testConsoleReducer from './testConsoleReducer';\r\nimport inviteConsoleReducer from './inviteConsoleReducer';\r\nimport userReducer from './userReducer';\r\nimport questionSimulatorConsoleReducer from './questionSimulatorConsoleReducer';\r\nimport orgReducer from './orgReducer';\r\nimport dashboardReducer from './dashboardReducer';\r\nimport candidateConsoleReducer from './candidateConsoleReducer';\r\nimport gradeReducer from './gradeReducer';\r\nimport registeredTestReducer from './registeredTestReducer';\r\n\r\nimport rmaReducer from '../HiTech/rmaReducer';\r\n\r\nconst appReducer = combineReducers({\r\n    categoryReducer,\r\n    skillReducer,\r\n    mcqReducer,\r\n    candidateReducer,\r\n    adminTestReducer,\r\n    testConsoleReducer,\r\n    inviteConsoleReducer,\r\n    userReducer,\r\n    questionSimulatorConsoleReducer,\r\n    orgReducer,\r\n    dashboardReducer,\r\n    candidateConsoleReducer,\r\n    gradeReducer,\r\n    registeredTestReducer,\r\n    rmaReducer\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n    if(action.type === 'LOGOUT_CURRENT_USER') {\r\n        state = undefined;\r\n    }\r\n\r\n    return appReducer(state, action);\r\n}\r\n\r\nexport default rootReducer;","import { ADD_SKILL_SUCCESS, ADD_SKILL_FAIL,\r\n    FETCH_SKILLS_SUCCESS, \r\n    FETCH_SKILLS_FAIL,\r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_SKILL_FIELD_CHANGE,\r\n    CURRENT_SKILL_FIELD_CHANGE_END, \r\n    SKILL_SEARCH_BEGIN,\r\n    SKILL_SEARCH_SUCCESS} from \"../actions/SkillActions\";\r\n\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_SKILL_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_skill: {skill:''},\r\n           success_message: 'Skill added successfully'\r\n       }\r\n   }\r\n   case ADD_SKILL_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case CURRENT_SKILL_FIELD_CHANGE:\r\n   {       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_skill: action.payload\r\n       }\r\n   }\r\n   case CURRENT_SKILL_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case FETCH_SKILLS_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_skill: {id: 0, skill_meta: {skill:''}},\r\n           editMode: false,\r\n           success_message: '',\r\n           search_enabled: false,\r\n           skillList: action.payload\r\n       }\r\n   }\r\n   case SKILL_SEARCH_BEGIN:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n           filteredSkills: state.skillList\r\n       }\r\n   }\r\n   case SKILL_SEARCH_SUCCESS:\r\n   {   \r\n       return {\r\n           ...state,\r\n           search_term: action.payload.searchTerm,\r\n           filteredSkills: action.payload.filteredSkills\r\n       }\r\n   }\r\n   case FETCH_SKILLS_FAIL:\r\n   {\r\n        return {\r\n           ...state,\r\n           current_skill: {skill:''},\r\n           error: action.payload\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { ADD_MCQ_SUCCESS, ADD_MCQ_FAIL, SELECT_MCQ,\r\n    UPDATE_MCQ_SUCCESS, UPDATE_MCQ_FAIL, FETCH_MCQ_FAIL,\r\n    DELETE_MCQ_SUCCESS, DELETE_MCQ_FAIL,\r\n    FETCH_MCQ_SUCCESS, \r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_MCQ_FIELD_CHANGE,\r\n    CURRENT_MCQ_FIELD_CHANGE_END, \r\n    MCQ_SEARCH_BEGIN, MCQ_SEARCH_END,\r\n    MCQ_SEARCH_SUCCESS,\r\n    CHOICE_ADDED_TO_MCQ, \r\n    CURRENT_ANSWER_FIELD_CHANGE\r\n} from \"../actions/McqActions\";\r\nimport { FETCH_CATEGORIES_SUCCESS } from '../actions/CategoryActions'; \r\nimport { FETCH_SKILLS_SUCCESS } from \"../actions/SkillActions\";\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_MCQ_SUCCESS:\r\n   {\r\n       return {\r\n            ...state,\r\n            error: null,\r\n            current_mcq: { \r\n                id: 0,\r\n                mcq_meta: {\r\n                        question:'',\r\n                        description:'',\r\n                        category: '',\r\n                        skill: '',\r\n                        minimumExperience: 0,\r\n                        maximumExperience: 10,\r\n                        choices: []\r\n                    }\r\n                },\r\n            snack_open: true,\r\n            success_message: 'MCQ added successfully'\r\n       }\r\n   }\r\n   case DELETE_MCQ_FAIL:\r\n   case UPDATE_MCQ_FAIL:\r\n   case ADD_MCQ_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SELECT_MCQ:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           editMode: true,\r\n           current_MCQ: action.payload\r\n       }\r\n   }\r\n   case UPDATE_MCQ_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           current_mcq: {\r\n                id: 0,\r\n                mcq_meta: { \r\n                    question:'',\r\n                    description:'',\r\n                    category: '',\r\n                    skill: '',\r\n                    minimumExperience: 0,\r\n                    maximumExperience: 10,\r\n                    choices: []\r\n                }\r\n           },\r\n           success_message: 'MCQ Updated Successfully'\r\n       }\r\n   }\r\n   case DELETE_MCQ_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           snack_open: true,\r\n           current_mcq: {\r\n                id: 0,\r\n                mcq_meta: { \r\n                    question:'',\r\n                    description:'',\r\n                    category: '',\r\n                    skill: '',\r\n                    minimumExperience: 0,\r\n                    maximumExperience: 10,\r\n                    choices: []\r\n                }\r\n            },\r\n           success_message: 'MCQ Deleted Successfully'\r\n       }\r\n   }\r\n   case CURRENT_MCQ_FIELD_CHANGE:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_mcq: action.payload\r\n       }\r\n   }\r\n   case CURRENT_MCQ_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case CURRENT_ANSWER_FIELD_CHANGE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           currentAnswer: action.payload\r\n       }\r\n   }\r\n   case FETCH_MCQ_SUCCESS:\r\n   {\r\n       return {\r\n            ...state,\r\n            error: null,\r\n            current_mcq: {\r\n                id: 0,\r\n                mcq_meta: { \r\n                    question:'',\r\n                    description:'',\r\n                    category: '',\r\n                    skill: '',\r\n                    minimumExperience: 0,\r\n                    maximumExperience: 10,\r\n                    choices: []\r\n                }\r\n           },\r\n            snack_open: true,\r\n            success_message: action.payload.message,\r\n            mcqs: action.payload.data\r\n       }\r\n   }\r\n   case FETCH_SKILLS_SUCCESS:\r\n   {\r\n        \r\n        return {\r\n            ...state,\r\n            skills: action.payload\r\n        }\r\n   }\r\n   case FETCH_CATEGORIES_SUCCESS:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_mcq: {\r\n                id: 0,\r\n                mcq_meta: { \r\n                    question:'',\r\n                    description:'',\r\n                    category: '',\r\n                    skill: '',\r\n                    minimumExperience: 0,\r\n                    maximumExperience: 10,\r\n                    choices: []\r\n                }\r\n            },\r\n           currentAnswer: {\r\n                content: '',\r\n                isCorrect: false\r\n           },\r\n           success_message: '',\r\n           search_enabled: false,\r\n           categories: action.payload\r\n       }\r\n   }\r\n   case CHOICE_ADDED_TO_MCQ: \r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           current_mcq: action.payload,\r\n           currentAnswer: {\r\n               content: '',\r\n               isCorrect: false\r\n           }\r\n       }\r\n   }\r\n   case MCQ_SEARCH_BEGIN:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n       }\r\n   }\r\n   case MCQ_SEARCH_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n       }\r\n   }\r\n   case MCQ_SEARCH_SUCCESS:\r\n   {   \r\n       return {\r\n           ...state,\r\n           search_term: action.payload.searchTerm,\r\n           filteredCategories: action.payload.filteredCategories\r\n       }\r\n   }\r\n   case FETCH_MCQ_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           current_mcq: {\r\n            id: 0,\r\n            mcq_meta: { \r\n                    question:'',\r\n                    description:'',\r\n                    category: '',\r\n                    skill: '',\r\n                    minimumExperience: 0,\r\n                    maximumExperience: 10,\r\n                    choices: []\r\n                }\r\n            },\r\n           error: action.payload\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { ADD_CANDIDATE_SUCCESS, ADD_CANDIDATE_FAIL, SELECT_CANDIDATE,\r\n    UPDATE_CANDIDATE_SUCCESS, UPDATE_CANDIDATE_FAIL, FETCH_CANDIDATE_FAIL,\r\n    FETCH_CANDIDATE_SUCCESS, \r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_CANDIDATE_FIELD_CHANGE,\r\n    CURRENT_CANDIDATE_FIELD_CHANGE_END, \r\n    CANDIDATE_SEARCH_BEGIN,\r\n    CANDIDATE_SEARCH_SUCCESS\r\n} from \"../actions/CandidateActions\";\r\nimport { FETCH_SKILLS_SUCCESS } from \"../actions/SkillActions\";\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_CANDIDATE_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_candidate: { \r\n               fullName:'',\r\n               email:'',\r\n               contactno: '',\r\n               experienceYears: 0,\r\n               experienceMonths: 10\r\n            },\r\n           success_message: 'CANDIDATE added successfully'\r\n       }\r\n   }\r\n   case UPDATE_CANDIDATE_FAIL:\r\n   case ADD_CANDIDATE_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SELECT_CANDIDATE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           editMode: true,\r\n           current_CANDIDATE: action.payload\r\n       }\r\n   }\r\n   case UPDATE_CANDIDATE_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           current_candidate: { \r\n                fullName:'',\r\n                email:'',\r\n                contactno: '',\r\n                skill: '',\r\n                experienceYears: 0,\r\n                experienceMonths: 10\r\n           },\r\n           success_message: 'CANDIDATE Updated Successfully'\r\n       }\r\n   }\r\n   case CURRENT_CANDIDATE_FIELD_CHANGE:\r\n   {\r\n       console.log('field change reducer');\r\n       console.log(action.payload);\r\n       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_candidate: action.payload\r\n       }\r\n   }\r\n   case CURRENT_CANDIDATE_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case FETCH_CANDIDATE_SUCCESS:\r\n   {\r\n       console.log('fetch candidate reducer');\r\n       console.log(action.payload);\r\n       \r\n       return {\r\n           ...state,\r\n           error: null,\r\n           editMode: false,\r\n           current_candidate: { \r\n                fullName:'',\r\n                email:'',\r\n                contactno: '',\r\n                experienceYears: 0,\r\n                experienceMonths: 10\r\n           },\r\n           success_message: '',\r\n           search_enabled: false,\r\n           candidates: action.payload\r\n       }\r\n   }\r\n   case FETCH_SKILLS_SUCCESS:\r\n   {\r\n        console.log('fetch skills reducer');\r\n        console.log(action.payload);\r\n        \r\n        return {\r\n            ...state,\r\n            current_candidate: { \r\n                 fullName:'',\r\n                 email:'',\r\n                 contactno: '',\r\n                 experienceYears: 0,\r\n                 experienceMonths: 10\r\n            },\r\n            skills: action.payload\r\n        }\r\n   }\r\n   case CANDIDATE_SEARCH_BEGIN:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n           filteredCandidates: state.contactnoList\r\n       }\r\n   }\r\n   case CANDIDATE_SEARCH_SUCCESS:\r\n   {   \r\n       return {\r\n           ...state,\r\n           search_term: action.payload.searchTerm,\r\n           filteredCandidates: action.payload.filteredCandidates\r\n       }\r\n   }\r\n   case FETCH_CANDIDATE_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           current_candidate: { \r\n                fullName:'',\r\n                email:'',\r\n                contactno: '',\r\n                experienceYears: 0,\r\n                experienceMonths: 10\r\n            },\r\n           error: action.payload\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { ADD_TEST_SUCCESS, ADD_TEST_FAIL, SELECT_TEST,\r\n    UPDATE_TEST_SUCCESS, UPDATE_TEST_FAIL, FETCH_TESTS_FAIL,\r\n    FETCH_TESTS_SUCCESS, \r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_TEST_FIELD_CHANGE,\r\n    CURRENT_TEST_FIELD_CHANGE_END, \r\n    TEST_SEARCH_BEGIN,\r\n    TEST_SEARCH_SUCCESS,\r\n    CHOICE_ADDED_TO_TEST, \r\n    CURRENT_ANSWER_FIELD_CHANGE\r\n} from \"../actions/AdminTestActions\";\r\nimport { FETCH_CATEGORIES_SUCCESS } from '../actions/CategoryActions'; \r\nimport { FETCH_SKILLS_SUCCESS } from \"../actions/SkillActions\";\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_TEST_SUCCESS:\r\n   {\r\n       return {\r\n            ...state,\r\n            error: null,\r\n            current_test: { \r\n                id: 0,\r\n                test_meta: {\r\n                skill:'',\r\n                testName:'',\r\n                duration: 90,\r\n                experienceYears: 5,\r\n                status: 'draft',\r\n                search_enabled: !state.search_enabled,\r\n                }\r\n            },\r\n            success_message: 'Test added successfully',\r\n            snack_open: true\r\n        }\r\n   }\r\n   case UPDATE_TEST_FAIL:\r\n   case ADD_TEST_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SELECT_TEST:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           editMode: true,\r\n           current_TEST: action.payload\r\n       }\r\n   }\r\n   case UPDATE_TEST_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           current_mcq: { \r\n                question:'',\r\n                description:'',\r\n                category: '',\r\n                skill: '',\r\n                minimumExperience: 0,\r\n                maximumExperience: 10,\r\n                choices: []\r\n           },\r\n           success_message: 'TEST Updated Successfully'\r\n       }\r\n   }\r\n   case CURRENT_TEST_FIELD_CHANGE:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_mcq: action.payload\r\n       }\r\n   }\r\n   case CURRENT_TEST_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case CURRENT_ANSWER_FIELD_CHANGE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           currentAnswer: action.payload\r\n       }\r\n   }\r\n   case FETCH_TESTS_SUCCESS:\r\n   {\r\n       let arr = [];\r\n       if(action.payload && action.payload.length > 0) {\r\n           action.payload.map((item, index) => {\r\n               arr.push(item);\r\n           })\r\n       }\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           editMode: !state.editMode,\r\n           current_test: { \r\n               id: 0,\r\n               test_meta: {\r\n                skill:'',\r\n                testName:'',\r\n                duration: 90,\r\n                experienceYears: 5,\r\n                status: 'draft',\r\n                search_enabled: !state.search_enabled,\r\n               }\r\n            },\r\n           success_message: '',\r\n           search_enabled: !state.search_enabled,\r\n           tests: arr\r\n       }\r\n   }\r\n   case FETCH_SKILLS_SUCCESS:\r\n   {\r\n        \r\n        return {\r\n            ...state,\r\n            skills: action.payload\r\n        }\r\n   }\r\n   case FETCH_CATEGORIES_SUCCESS:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_test: {\r\n               id: 0,\r\n               test_meta: { \r\n                question:'',\r\n                description:'',\r\n                category: '',\r\n                skill: '',\r\n                choices: []\r\n               }\r\n           },\r\n           currentAnswer: {\r\n                content: '',\r\n                isCorrect: false\r\n           },\r\n           success_message: '',\r\n           search_enabled: false,\r\n           categories: action.payload\r\n       }\r\n   }\r\n   case CHOICE_ADDED_TO_TEST: \r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           current_mcq: action.payload,\r\n           currentAnswer: {\r\n               content: '',\r\n               isCorrect: false\r\n           }\r\n       }\r\n   }\r\n   case TEST_SEARCH_BEGIN:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n           filteredCategories: state.categoryList\r\n       }\r\n   }\r\n   case TEST_SEARCH_SUCCESS:\r\n   {   \r\n       return {\r\n           ...state,\r\n           search_term: action.payload.searchTerm,\r\n           filteredCategories: action.payload.filteredCategories\r\n       }\r\n   }\r\n   case FETCH_TESTS_FAIL:\r\n   {\r\n        let payload = action.payload;\r\n        if(payload && payload.errorStatus === '401') {\r\n            return {\r\n                ...state,\r\n                tests: [],\r\n                skills: [],\r\n                state_changed: !state.state_changed,\r\n                error: payload\r\n            }\r\n        }\r\n       return {\r\n           ...state,\r\n           current_mcq: { \r\n                question:'',\r\n                description:'',\r\n                category: '',\r\n                skill: '',\r\n                answerId: 0,\r\n                choices: []\r\n            },\r\n           error: null\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { \r\n    FETCH_TEST_SUCCESS, \r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR,\r\n    PUBLISH_TEST_SUCCESS,\r\n    FETCH_TEST_MCQS_SUCCESS,\r\n    FETCH_TEST_CANDIDATES_SUCCESS\r\n} from \"../actions/TestConsoleActions\";\r\nimport { ADD_QUESTION_TO_TEST, REMOVE_QUESTION_FROM_TEST,\r\n    TEST_SETTINGS_FIELD_CHANGE } from \"../actions/TestConsoleActions\";\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case FETCH_TEST_SUCCESS:\r\n   {\r\n       let test = action.payload;\r\n       return {\r\n           ...state,\r\n           current_test: action.payload,\r\n       }\r\n   }\r\n   case FETCH_TEST_MCQS_SUCCESS:\r\n   {\r\n        let mcqs = action.payload;\r\n        return {\r\n            ...state,\r\n            selectedMcqs: action.payload,\r\n        }\r\n   }\r\n   case FETCH_TEST_CANDIDATES_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           candidates: action.payload\r\n       }\r\n   }\r\n   case ADD_QUESTION_TO_TEST:\r\n   {\r\n       let mcqToAdd = action.payload;\r\n       return {\r\n            ...state,\r\n            mcqAdded: !state.mcqAdded,\r\n            current_test: action.payload,\r\n            operation: 'MCQ Added'\r\n        }\r\n   }\r\n   case REMOVE_QUESTION_FROM_TEST:\r\n   {\r\n       let mcqToAdd = action.payload;\r\n       return {\r\n            ...state,\r\n            mcqAdded: !state.mcqAdded,\r\n            current_test: action.payload,\r\n            operation: 'MCQ Removed'\r\n        }\r\n   }\r\n   case TEST_SETTINGS_FIELD_CHANGE:\r\n    {\r\n        let newObj = action.payload;\r\n        return {\r\n            ...state,\r\n            current_test: {\r\n                ...newObj,\r\n                test_meta: {\r\n                    ...newObj.test_meta,\r\n                    settings: {\r\n                        ...newObj.test_meta.settings   \r\n                    }\r\n                }\r\n            }\r\n        }   \r\n    }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { \r\n    SEND_TEST_INVITE_SUCCESS,\r\n    INVITE_INFO_FIELD_CHANGE,\r\n    FETCH_INVITES_SUCCESS, EVALUATION_SUCCESS\r\n} from \"../actions/InviteConsoleActions\";\r\nimport { //FETCH_TEST_SUCCESS, \r\n    OPEN_SNACKBAR, CLOSE_SNACKBAR } from '../actions/TestConsoleActions';\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case SEND_TEST_INVITE_SUCCESS:\r\n   {\r\n       return {\r\n            ...state,\r\n            inivteAdded: 'yes',\r\n            current_test: action.payload\r\n        }\r\n   }\r\n   case FETCH_INVITES_SUCCESS:\r\n   {\r\n        return {\r\n           ...state,\r\n           invitations: action.payload\r\n       }\r\n   }\r\n//    case FETCH_TEST_SUCCESS:\r\n//    {\r\n//         let test = action.payload;\r\n//         return {\r\n//            ...state,\r\n//            current_test: {\r\n//                testId: (action.payload) ? action.payload.$loki : 0,\r\n//                ...action.payload\r\n//            },\r\n//            inivteAdded: 'no',\r\n//            inviteInfo: {}\r\n//        }\r\n//    }\r\n   case INVITE_INFO_FIELD_CHANGE:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           inviteInfo: action.payload\r\n       }\r\n   }\r\n   case EVALUATION_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           invitations: action.payload\r\n       }\r\n   }\r\n  case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import { \r\n    ADD_USER_SUCCESS, \r\n    ADD_USER_FAIL, \r\n    SELECT_USER,\r\n    UPDATE_USER_SUCCESS, UPDATE_USER_FAIL, FETCH_USER_FAIL,\r\n    FETCH_USER_SUCCESS, \r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_USER_FIELD_CHANGE,\r\n    CURRENT_USER_FIELD_CHANGE_END, \r\n    USER_SEARCH_BEGIN,\r\n    USER_SEARCH_SUCCESS,\r\n    SET_USER_INFO_LOCAL,\r\n    LOGOUT_CURRENT_USER\r\n} from \"../actions/UserActions\";\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_USER_SUCCESS:\r\n   {\r\n       return {\r\n            ...state,\r\n            error: null,\r\n            current_user: { \r\n                id: 0,\r\n                user_meta: { \r\n                    emailId: '',\r\n                    role: 'guest'\r\n                }\r\n            },\r\n            snack_open: true,\r\n            success_message: 'User added successfully'\r\n       }\r\n   }\r\n   case UPDATE_USER_FAIL:\r\n   case ADD_USER_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SELECT_USER:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           editMode: true,\r\n           current_USER: action.payload\r\n       }\r\n   }\r\n   case UPDATE_USER_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           editMode: false,\r\n           current_user: { \r\n                id: 0,\r\n                user_meta: { \r\n                    emailId: '',\r\n                    role: 'guest'\r\n                }\r\n           },\r\n           snack_open: true,\r\n           success_message: 'User Updated Successfully'\r\n       }\r\n   }\r\n   case CURRENT_USER_FIELD_CHANGE:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_user: action.payload\r\n       }\r\n   }\r\n   case CURRENT_USER_FIELD_CHANGE_END:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: false\r\n       }\r\n   }\r\n   case FETCH_USER_SUCCESS:\r\n   {\r\n       \r\n       return {\r\n           ...state,\r\n           error: null,\r\n           editMode: false,\r\n           current_user: {\r\n               id: 0,\r\n               user_meta: { \r\n                emailId: '',\r\n                role: 'guest'\r\n               }\r\n           },\r\n           success_message: '',\r\n           search_enabled: false,\r\n           users: action.payload\r\n       }\r\n   }\r\n   case USER_SEARCH_BEGIN:\r\n   {\r\n       return {\r\n           ...state,\r\n           search_enabled: !state.search_enabled,\r\n           search_term: '',\r\n           filteredCandidates: state.contactnoList\r\n       }\r\n   }\r\n   case USER_SEARCH_SUCCESS:\r\n   {   \r\n       return {\r\n           ...state,\r\n           search_term: action.payload.searchTerm,\r\n           filteredCandidates: action.payload.filteredCandidates\r\n       }\r\n   }\r\n   case FETCH_USER_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           current_USER: { \r\n                fullName:'',\r\n                email:'',\r\n                contactno: '',\r\n                experienceYears: 0,\r\n                experienceMonths: 10\r\n            },\r\n           error: action.payload\r\n       }\r\n   }\r\n   case SET_USER_INFO_LOCAL:\r\n   {\r\n       return {\r\n           ...state,\r\n           currentUserLocal: action.payload,\r\n           isTokenExpired: false\r\n       }\r\n   }\r\n   case LOGOUT_CURRENT_USER:\r\n   {\r\n       return {\r\n           ...state,\r\n           currentUserLocal: null,\r\n           isTokenExpired: true\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import {\r\n    LOAD_EXAM_SIMULATOR_SUCCESS, GO_TO_NEXT,\r\n    GO_TO_PREVIOUS, CANDIDATE_RESPONSE_CHANGED,\r\n    SUBMIT_ANSWERS_SUCCESS,\r\n    SET_CANDIDATE_INFO\r\n} from '../actions/QuestionSimulatorConsoleActions';\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SET_CANDIDATE_INFO:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    candidateInfo: action.payload\r\n                }\r\n            }\r\n        case LOAD_EXAM_SIMULATOR_SUCCESS:\r\n            {\r\n                let testObject = action.payload;\r\n                return {\r\n                    ...state,\r\n                    candidateTestObject: testObject,\r\n                    currentQuestion: (testObject && testObject.response_meta &&\r\n                        testObject.response_meta.mcqs &&\r\n                        testObject.response_meta.mcqs.length > 0) ?\r\n                        testObject.response_meta.mcqs[0] : {}\r\n                }\r\n            }\r\n        case CANDIDATE_RESPONSE_CHANGED:\r\n            {\r\n                let currentQuestion = action.payload;\r\n                return {\r\n                    ...state,\r\n                    currentQuestion: {\r\n                        ...currentQuestion,\r\n                        candidateResponse: {\r\n                            ...currentQuestion.candidateResponse,\r\n                            responseKeys: currentQuestion.candidateResponse.responseKeys\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        case SUBMIT_ANSWERS_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    candidateTestObject: null,\r\n                    status: action.payload\r\n                }\r\n            }\r\n        case GO_TO_PREVIOUS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    currentQuestion: action.payload\r\n                }\r\n            }\r\n        case GO_TO_NEXT:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    currentQuestion: action.payload\r\n                }\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { \r\n    FETCH_TEST_COUNT_SUCCESS,\r\n    FETCH_INVITATION_COUNT_SUCCESS, \r\n    FETCH_MCQ_COUNT_SUCCESS,\r\n    FETCH_RECENT_RESPONSES_SUCCESS,\r\n    FETCH_RECENT_RESPONSES_FAIL } from \"../actions/DashboardActions\";\r\n\r\n\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TEST_COUNT_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    testCount: action.payload\r\n                }\r\n            }\r\n        case FETCH_INVITATION_COUNT_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    invitationCount: action.payload\r\n                }\r\n            }\r\n        case FETCH_MCQ_COUNT_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    mcqCount: action.payload\r\n                }\r\n            }\r\n            case FETCH_RECENT_RESPONSES_SUCCESS: {\r\n                let recentResponses = action.payload;\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    recentResponses: recentResponses\r\n                }\r\n            }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}    ","import {\r\n    FETCH_CANDIDATE_RESPONSE_REPORT_SUCCESS,\r\n    FETCH_CANDIDATE_RESPONSE_REPORT_FAIL,\r\n    FETCH_CANDIDATE_DETAILS_FAIL,\r\n    FETCH_CANDIDATE_DETAILS_SUCCESS,\r\n    FETCH_RECORDINGS_SUCCESS,\r\n    FETCH_RECORDINGS_FAIL\r\n} from \"../actions/CandidateConsoleActions\";\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FETCH_CANDIDATE_RESPONSE_REPORT_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    candidateResponses: action.payload || {},\r\n                }\r\n            }\r\n        case FETCH_CANDIDATE_RESPONSE_REPORT_FAIL:\r\n            {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n            case FETCH_CANDIDATE_DETAILS_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    candidateDetails: action.payload\r\n                }\r\n            }\r\n            case FETCH_CANDIDATE_DETAILS_FAIL: \r\n            {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n            case FETCH_RECORDINGS_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    responseRecordings: action.payload\r\n                }\r\n            }\r\n            case FETCH_RECORDINGS_FAIL:\r\n            {\r\n                return {\r\n                    ...state\r\n                }\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { \r\n    ADD_GRADE_SUCCESS, ADD_GRADE_FAIL,\r\n    UPDATE_GRADE_SUCCESS, UPDATE_GRADE_FAIL,\r\n    FETCH_GRADES_SUCCESS, \r\n    FETCH_GRADES_FAIL,\r\n    OPEN_SNACKBAR, \r\n    CLOSE_SNACKBAR, \r\n    CURRENT_GRADE_FIELD_CHANGE,\r\n    SELECT_CURRENT_GRADE,\r\n    CURRENT_SUBJECT_CHANGE\r\n} from \"../actions/GradeActions\";\r\n\r\n\r\nexport default (state = {}, action) => {\r\nswitch(action.type) {\r\n   case ADD_GRADE_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_grade: {id: 0, grade_meta: {name:'', subjects:[]}},\r\n           success_message: 'Grade added successfully'\r\n       }\r\n   }\r\n   case ADD_GRADE_FAIL:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: action.payload\r\n       }\r\n   }\r\n   case CURRENT_GRADE_FIELD_CHANGE:\r\n   {       \r\n       return {\r\n           ...state,\r\n           field_updated: true,\r\n           current_grade: action.payload,\r\n           current_subject: {},\r\n       }\r\n   }\r\n   case CURRENT_SUBJECT_CHANGE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           current_subject: action.payload\r\n       }\r\n   }\r\n   case SELECT_CURRENT_GRADE:\r\n   {\r\n       return {\r\n           ...state,\r\n           field_updated: !state.field_updated,\r\n           current_grade: action.payload,\r\n           current_subject: {},\r\n       }\r\n   }\r\n   case FETCH_GRADES_SUCCESS:\r\n   {\r\n       return {\r\n           ...state,\r\n           error: null,\r\n           current_grade: {id: 0, grade_meta: {name:'', subjects:[]}},\r\n           current_subject: {},\r\n           success_message: '',\r\n           classList: action.payload\r\n       }\r\n   }\r\n   case FETCH_GRADES_FAIL:\r\n   {\r\n        return {\r\n           ...state,\r\n           current_class: {name:''},\r\n           error: action.payload\r\n       }\r\n   }\r\n   case OPEN_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: true\r\n       }\r\n   }\r\n   case CLOSE_SNACKBAR:\r\n   {\r\n       return {\r\n           ...state,\r\n           snack_open: false\r\n       }\r\n   }\r\n   default: {\r\n       return state;\r\n   }\r\n}\r\n}","import {\r\n    FETCH_MY_REGISTERED_TESTS_SUCCESS, FETCH_MY_REGISTERED_TESTS_FAIL,\r\n    FETCH_TESTS_AVAILABLE_FOR_ME_SUCCESS, FETCH_TESTS_AVAILABLE_FOR_ME_FAIL\r\n} from \"../actions/RegisteredTestActions\";\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FETCH_MY_REGISTERED_TESTS_SUCCESS:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    registeredTests: action.payload\r\n                }\r\n            }\r\n        case FETCH_MY_REGISTERED_TESTS_FAIL:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: action.payload\r\n                }\r\n            }\r\n        case FETCH_TESTS_AVAILABLE_FOR_ME_SUCCESS:\r\n            {\r\n                let arr = [];\r\n                if (action.payload && action.payload.length > 0) {\r\n                    action.payload.map((item, index) => {\r\n                        arr.push(item);\r\n                    })\r\n                }\r\n                return {\r\n                    ...state,\r\n                    error: null,\r\n                    upcomingTests: arr\r\n                }\r\n            }\r\n        case FETCH_TESTS_AVAILABLE_FOR_ME_FAIL:\r\n            {\r\n                return {\r\n                    ...state,\r\n                    error: action.payload\r\n                }\r\n            }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\nimport Shell from './components/Shell';\r\nimport SimulatorShell from './Containers/Simulator/SimulatorShell';\r\n\r\nimport './App.css';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\nimport config from './config';\r\nimport AuthHelper from './AuthHelper';\r\nimport { Paper, Grid, Button, IconButton, Typography } from '@material-ui/core';\r\nimport { DeveloperMode } from '@material-ui/icons';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isAuthenticated: true,\r\n      user: null,\r\n      token: ''\r\n    };\r\n  }\r\n\r\n\r\n  googleResponse = (response) => {\r\n        console.log('response', response);\r\n        const tokenBlob = new Blob([JSON.stringify({access_token: response.accessToken}, null, 2)], {type : 'application/json'});\r\n        const options = {\r\n            method: 'POST',\r\n            body: tokenBlob,\r\n            mode: 'cors',\r\n            cache: 'default'\r\n        };\r\n        let url = config.instance.getAdminApiUrl() + 'auth/google';\r\n        console.log('url', url);\r\n        console.log('access_token', response.access_token);\r\n        axios.get(url, {\r\n          headers: {\r\n            access_token: response.accessToken\r\n          }\r\n        }).then((res) => {\r\n          console.log('res',res);\r\n          const token = res.headers['x-auth-token'];\r\n          localStorage.setItem(\"auth-token\", token);\r\n          this.setState({\r\n            isAuthenticated: true,\r\n            user: res.data\r\n          });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Provider store={configureStore()}>\r\n        <Shell />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nconst styles = {\r\n  grid: {\r\n    marginTop: '10%',\r\n    marginLeft: '20%',\r\n    marginRight: '20%',\r\n    marginBottom: '20%',\r\n    border: '3px solid #831057',\r\n    borderRadius: '10px',\r\n    padding: '10%',\r\n    paddingTop: '14%'\r\n  },\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n// import AuthHelper from '../../AuthHelper';\r\n\r\nconst OnlinePortalPrivateRoute = ({ component: Component, authed, ...rest}) => {\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isAuthorized() === true\r\n                ? <Component {...rest} {...props} />\r\n                : <Redirect to={{pathname: '/op/login'}} />}\r\n        />\r\n    );\r\n}\r\nconst isAuthorized = () => {\r\n    let token = localStorage.getItem('auth-token');\r\n    if(token) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport default OnlinePortalPrivateRoute;","import React from 'react';\r\n\r\nimport Home from '../Home';\r\n\r\nimport OnlinePortalPrivateRoute from './OnlinePortalPrivateRoute';\r\n\r\nconst OnlinePortalRoutes = (props) => {\r\n    return (\r\n        <div>\r\n            <OnlinePortalPrivateRoute path=\"/home\" component={Home} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OnlinePortalRoutes;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nimport LoadingComponent from '../../components/lib/LoadingComponent';\r\nimport config from '../../config';\r\nimport { info, primary, secondary, success, warning } from '../../components/lib/ColorCodes';\r\nimport OnlinePortalRoutes from './OnlinePortalRoutes';\r\nimport OpHeader from '../Home/OpHeader';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = theme => createMuiTheme({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 36,\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.unit * 3,\r\n  },\r\n  paddingBottom: {\r\n    paddingBottom: '4%'\r\n  }\r\n});\r\n\r\nclass OnlinePortalShell extends React.Component {\r\n  state = {\r\n    config: {}\r\n  };\r\n  \r\n  componentDidMount = () => {\r\n    config.instance.initialize()\r\n        .then((res) => {\r\n            this.setState({\r\n              config: res\r\n            });\r\n        })\r\n\r\n  }\r\n\r\n  Logout = () => {\r\n    this.props.LogoutCurrentUser();\r\n  }\r\n\r\n  render() {\r\n        const { classes, theme } = this.props;\r\n\r\n        let { config } = this.state;\r\n        if(!config.site_title) {\r\n          return (\r\n            <LoadingComponent />\r\n          )\r\n        }\r\n\r\n            return (\r\n              <div className={classes.root}>\r\n                  <CssBaseline />\r\n                  <OpHeader classes={classes} />\r\n                    <Router>\r\n                      <main className={classes.content}>\r\n                        <div className={classes.toolbar} />\r\n                            <OnlinePortalRoutes />\r\n                      </main>\r\n                    </Router>\r\n              </div>\r\n            );\r\n\r\n    }\r\n}\r\n\r\nOnlinePortalShell.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state.userReducer\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n});\r\nexport default withStyles(styles, { withTheme: true })(connect(mapStateToProps, mapDispatchToProps)(OnlinePortalShell));\r\n","import React, { Component } from 'react';\r\n// import logo from './logo.svg';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\nimport Shell from './components/Shell';\r\nimport SimulatorShell from './Containers/Simulator/SimulatorShell';\r\n\r\nimport './App.css';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\nimport config from './config';\r\nimport AuthHelper from './AuthHelper';\r\nimport { Paper, Grid, Button, IconButton, Typography } from '@material-ui/core';\r\nimport { DeveloperMode } from '@material-ui/icons';\r\nimport OnlinePortalShell from './OnlinePortal/lib/OnlinePortalShell';\r\n\r\nclass OnlinePortalApp extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Provider store={configureStore()}>\r\n          <OnlinePortalShell />\r\n        </Provider>\r\n      );\r\n  }\r\n}\r\n\r\nexport default OnlinePortalApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport OnlinePortalApp from './OnlinePortalApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n/*let currentUrl = window.location.href;\r\nif(currentUrl.indexOf('/admin') > -1) {\r\n    ReactDOM.render(<App />, document.getElementById('root'));\r\n}\r\nelse {\r\n    ReactDOM.render(<OnlinePortalApp />, document.getElementById('root'));\r\n}\r\n*/\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}