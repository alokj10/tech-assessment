{"version":3,"sources":["../src/app.js"],"names":["require","exception","readl","config","console","log","readline","createInterface","input","process","stdin","output","stdout","adminUser","setAdminUser","adminEmail","userModel","UserModel","GetUserByEmail","users","existingUser","userMeta","JSON","parse","user_meta","userEntity","id","emailId","name","role","orgId","buildMenu","menuOptions","finalStr","forEach","option","optionIndex","optionText","askUser","query","Promise","resolve","reject","question","userInput","goToSelectedOption","menuOption","mcqImportPath","path","default","programming","programmingMcqs","getAllQuestions","length","mcqToAdd","mcq_meta","model","McqModel","createdBy","createdOn","Date","toLocaleDateString","Add","then","res","catch","error","msg","academic","academicMcqs","GetMcqByDescription","description","existingMcq","AddAcademicMcq","mcqId","chalk","yellow","bgBlack","DeleteById","testId","inviteeName","invitees","invitationRepo","sendInviteAndGetLink","testLink","err","response","message","invitationId","getTestLink","GetMcqById","entity","stringify","mcqResponseRepo","evaluateResults","responseEntity","response_meta","scorePercentage","result","testResultGenerator","generateAndSendResultsForInvitationId","exitUserInteraction","initializeApp","askUserInput","close","clear","bold","selectedOp","continueAnotherOp"],"mappings":"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","file":"app.js","sourcesContent":["import \"babel-core/register\";\r\nimport \"babel-polyfill\";\r\nimport chalk from 'chalk';\r\nimport path from \"path\";\r\nimport { exit } from \"process\";\r\n// import invitationRepo from \"../../../src/Controllers/candidate/InvitationRepo\";\r\nconst { exception } = require('console');\r\nconst readl = require('readline');\r\n// const McqModel = require('../../../wwwroot/Models/McqModel');\r\n// import McqModel from '../../src/Models/McqModel.js';\r\n// const { default: McqModel } = require('../../src/Models/McqModel');\r\n// const UserModel = require('../../../wwwroot/Models/UserModel');\r\nconst config = require('./config/mcqConfig');\r\nimport McqModel from '../../../wwwroot/Models/McqModel';\r\nimport UserModel from '../../../wwwroot/Models/UserModel';\r\nimport invitationRepo from '../../../wwwroot/Controllers/candidate/InvitationRepo';\r\nimport testResultGenerator from '../../../wwwroot/Controllers/candidate/TestResultGenerator';\r\nimport mcqResponseRepo from '../../../wwwroot/Controllers/candidate/McqResponseRepo';\r\n\r\nconsole.log('Welcome to Admin area');\r\nlet readline = readl.createInterface({\r\n    input: process.stdin, output: process.stdout\r\n});\r\n\r\nlet adminUser = {};\r\nconst setAdminUser = async () => {\r\n    let adminEmail = 'encasherr@gmail.com';\r\n    let userModel = new UserModel();\r\n    let users = await userModel.GetUserByEmail(adminEmail)\r\n                // .then((users) => {\r\n                    let existingUser = users[0];\r\n                    if(existingUser) {\r\n                        let userMeta = JSON.parse(existingUser.user_meta);\r\n                        let userEntity = {\r\n                            id: existingUser.id,\r\n                            emailId: adminEmail,\r\n                            name: userMeta.name ? userMeta.name : adminEmail,\r\n                            role: userMeta.role,\r\n                            orgId: userMeta.orgId\r\n                        };\r\n                        // console.log('user found', userEntity);\r\n                        adminUser = userEntity;\r\n                    }\r\n                    else {\r\n                        console.log(`User ${adminEmail} not found`);\r\n                    }\r\n                // })\r\n                // .catch((error) => {\r\n                //     console.log('Exception occurred in getting current user details', error);\r\n                // });\r\n\r\n}\r\n\r\nconst buildMenu = (menuOptions) => {\r\n    let finalStr = '';\r\n    finalStr += `\\nWelcome ${adminUser.name}! What would you like to do now?`;\r\n    finalStr += '\\n';\r\n    menuOptions.forEach(option => {\r\n        finalStr += `${option.optionIndex}:  ${option.optionText}\\n`;\r\n    });\r\n    finalStr += '\\n';\r\n    return finalStr;\r\n}\r\n\r\nlet menuOptions = [\r\n    { optionIndex: \"1\", optionText: \"Create a Programming MCQ\" },\r\n    { optionIndex: \"2\", optionText: \"Create an Academic MCQ\" },\r\n    { optionIndex: \"3\", optionText: \"Edit a Programming MCQ\" },\r\n    { optionIndex: \"4\", optionText: \"Edit an Academic MCQ\" },\r\n    { optionIndex: \"5\", optionText: \"Delete a MCQ\" },\r\n    { optionIndex: \"6\", optionText: \"Send Invitation\" },\r\n    { optionIndex: \"7\", optionText: \"Get Test Link\" },\r\n    { optionIndex: \"8\", optionText: \"Create a Test\" },\r\n    { optionIndex: \"9\", optionText: \"Edit a Test\" },\r\n    { optionIndex: \"10\", optionText: \"Delete a Test\" },\r\n    { optionIndex: \"11\", optionText: \"List All MCQs\" },\r\n    { optionIndex: \"12\", optionText: \"Get MCQ\" },\r\n    { optionIndex: \"13\", optionText: \"List All Tests\" },\r\n    { optionIndex: \"14\", optionText: \"Evaluate Test\" },\r\n    { optionIndex: \"15\", optionText: \"Send Test Results to Org\" },\r\n    { optionIndex: \"16\", optionText: \"Exit\" }\r\n];\r\n\r\nconst askUser = (query) => {\r\n    return new Promise((resolve, reject) => {\r\n        readline.question(query, (userInput) => {\r\n            if(!userInput) reject('no user input received');\r\n            resolve(userInput);\r\n        })\r\n    })\r\n}\r\n\r\nconst goToSelectedOption = async (menuOption) => {\r\n    if(!adminUser.id) throw exception('user not initialized');\r\n    switch(menuOption.optionIndex) {\r\n        case \"1\": {\r\n            let mcqImportPath = path.resolve(config.default.programming.mcqImportPath);\r\n            let programmingMcqs = require(mcqImportPath).getAllQuestions(mcqImportPath);\r\n            console.log('programmingmcqs length', programmingMcqs.length);\r\n            // break;\r\n            programmingMcqs.forEach((mcqToAdd) => {\r\n\r\n                let { mcq_meta } = mcqToAdd;\r\n                let model = new McqModel();\r\n                mcq_meta.createdBy = adminUser.id;\r\n                mcq_meta.createdOn = (new Date()).toLocaleDateString();\r\n\r\n                model.Add(mcq_meta)\r\n                    .then((res) => {\r\n                        console.log('MCQ Added', res);\r\n                    })\r\n                    .catch((error) => {\r\n                        let msg = \"Error in add MCQ: \" + error;\r\n                        console.log(msg);\r\n                    });\r\n            })\r\n            break;\r\n        }\r\n        case \"2\": {\r\n            let mcqImportPath = path.resolve(config.default.academic.mcqImportPath);\r\n            let academicMcqs = require(mcqImportPath).getAllQuestions(mcqImportPath);\r\n            console.log('academicMcqs length', academicMcqs.length);\r\n            // break;\r\n            // let tempMcqs = [ academicMcqs[0] ];\r\n            academicMcqs.forEach((mcqToAdd) => {\r\n\r\n                let { mcq_meta } = mcqToAdd;\r\n                let model = new McqModel();\r\n                model.GetMcqByDescription(adminUser, mcq_meta.description)\r\n                    .then((existingMcq) => {\r\n                        console.log('existingMcq', existingMcq);\r\n\r\n                        if(existingMcq && existingMcq.length === 0) {\r\n                            mcq_meta.createdBy = adminUser.id;\r\n                            mcq_meta.createdOn = (new Date()).toLocaleDateString();\r\n\r\n                            model.AddAcademicMcq(mcq_meta)\r\n                                .then((res) => {\r\n                                    console.log('MCQ Added', res);\r\n                                })\r\n                                .catch((error) => {\r\n                                    let msg = \"Error in add MCQ: \" + error;\r\n                                    console.log(msg);\r\n                                });\r\n                        }\r\n                        else {\r\n                            console.log(`MCQ already exists, mcqId: ${existingMcq[0].id}`)\r\n                        }\r\n\r\n                    })\r\n            })\r\n            break;\r\n        }\r\n        case \"3\": {\r\n            console.log('edit programming mcq')\r\n        }\r\n        case \"4\": {\r\n            console.log('edit academic mcq')\r\n        }\r\n        case \"5\": {\r\n            let mcqId = 128;\r\n            mcqId = await askUser(chalk.yellow.bgBlack('Enter the MCQ Id to be deleted\\n'))\r\n            console.log(`You entered ${mcqId}`);\r\n            let model = new McqModel();\r\n            await model.DeleteById(mcqId);\r\n            console.log('MCQ deleted');\r\n            break;\r\n        }\r\n        case \"6\": {\r\n            let testId = 21;\r\n            testId = await askUser('Enter Test Id to send invite for.\\n');\r\n            let emailId = await askUser('Enter Email Id to send invite to.\\n');\r\n            let inviteeName = await askUser('Enter name of the candidate\\\\student to send invite to.\\n');\r\n            let invitees = [{\r\n                emailId: emailId,\r\n                name: inviteeName\r\n            }]\r\n\r\n            invitationRepo.sendInviteAndGetLink(adminUser.id, invitees[0], testId)\r\n                .then((testLink) => {\r\n                    console.log(`Test registered for email: ${invitees[0].emailId}`);\r\n                    console.log('testLink:  ', testLink);\r\n                })\r\n                .catch((err) => {\r\n                    let response = { message: 'Error occured in register for test:' + err };\r\n                    console.log(response);\r\n                    console.log(`Failed registering test for email: ${invitees[0].emailId}`);\r\n                });\r\n                break;\r\n        }\r\n        case \"7\": {\r\n            let invitationId = 164;\r\n            invitationId = await askUser(chalk.yellow.bgBlack('Enter the Invitation Id\\n'))\r\n            console.log(`You entered ${invitationId}`);\r\n            let testLink = await invitationRepo.getTestLink(invitationId)\r\n            console.log(testLink);\r\n\r\n            break;\r\n        }\r\n        case \"8\": {\r\n            console.log('create a test')\r\n        }\r\n        case \"9\": {\r\n            console.log('edit a test')\r\n        }\r\n        case \"10\": {\r\n            console.log('delete a test')\r\n        }\r\n        case \"11\": {\r\n            console.log('list all mcqs')\r\n        }\r\n        case \"12\": {\r\n            let mcqId = 153;\r\n            mcqId = await askUser('Enter MCQ Id to retrieve details for\\n');\r\n            console.log(`you entered ${mcqId}`); \r\n            let model = new McqModel();\r\n            console.log('get mcq', mcqId);\r\n            let entity = await model.GetMcqById(mcqId);\r\n                    // .then((entity) => {\r\n                        console.log('entity', entity);\r\n                        if(entity) {\r\n                            console.log(`McqId ${mcqId} returned`);\r\n                            console.log(JSON.stringify(entity));\r\n                        }\r\n                        else {\r\n                            console.log(`MCQ Id ${mcqId} not found`);\r\n                        }\r\n                    // });\r\n            break;\r\n        }\r\n        case \"14\": {\r\n            let invitationId = 175;\r\n            invitationId = await askUser('Enter invitationId to evaluate results for\\n');\r\n            let responseEntity = await mcqResponseRepo.evaluateResults(invitationId);\r\n            console.log(chalk.yellow.bgBlack(`Score: ${responseEntity.response_meta.scorePercentage}`));\r\n            console.log(chalk.yellow.bgBlack(`Result: ${responseEntity.response_meta.result}`));\r\n            break;\r\n        }\r\n        case \"15\": {\r\n            let invitationId = 175;\r\n            invitationId = await askUser('Enter invitationId to send results for\\n');\r\n            await testResultGenerator.generateAndSendResultsForInvitationId(adminUser, invitationId, true);\r\n            break;\r\n        }\r\n        case \"16\": {\r\n            console.log('Have a good day!');\r\n            exitUserInteraction();\r\n        }\r\n    }\r\n}\r\n\r\nconst initializeApp = async () => {\r\n    await setAdminUser();\r\n    askUserInput();\r\n}\r\n\r\nconst exitUserInteraction = () => {\r\n    console.log('Closing user input session');\r\n    readline.close();\r\n    exit();\r\n}\r\n\r\nconst askUserInput = async () => {\r\n    console.clear();\r\n    let userInput = await askUser(chalk.yellow.bgBlack.bold(buildMenu(menuOptions)));\r\n    if(userInput) {\r\n        let selectedOp = {};\r\n        menuOptions.forEach((option) => {\r\n            if(userInput === option.optionIndex) {\r\n                selectedOp = option;\r\n            }\r\n        })\r\n        if(selectedOp.optionIndex) {\r\n            console.log(`You have selected: ${selectedOp.optionText}`);\r\n            await goToSelectedOption(selectedOp);\r\n            let continueAnotherOp = await askUser('Do you want to continue? y/n\\n');\r\n            if(continueAnotherOp === 'y') {\r\n                askUserInput();\r\n            }\r\n            else {\r\n                exitUserInteraction();\r\n            }\r\n        }\r\n        else {\r\n            console.log(`You have selected invalid option ${userInput}`);\r\n        }\r\n    }\r\n}\r\n\r\ninitializeApp();\r\n\r\n"]}