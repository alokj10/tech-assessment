{"version":3,"sources":["../src/passport.js"],"names":["GoogleTokenStrategy","require","Strategy","LocalStrategy","console","log","localOptions","usernameField","passwordField","passport","use","emailId","password","done","userModel","UserModel","GetUserByEmail","then","users","existingUser","userMeta","JSON","parse","user_meta","userEntity","id","name","role","orgId","newUser","status"],"mappings":"AAAA;;AAEA;;;;AACA;;AAEA;;;;AAGA;;;;;;AAJA,IAAIA,sBAAsBC,QAAQ,uBAAR,EAAiCC,QAA3D;;AAEA,IAAIC,gBAAgBF,QAAQ,gBAAR,EAA0BC,QAA9C;;AAIAE,QAAQC,GAAR,CAAY,uBAAZ;AACA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,eAAe;AACfC,mBAAe,SADA;AAEfC,mBAAe;AAFA,CAAnB;AAIAC,mBAASC,GAAT,CAAa,IAAIP,aAAJ,CAAkBG,YAAlB,EAAgC,UAASK,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AACvET,YAAQC,GAAR,CAAY,2BAAZ;AACA,QAAIS,YAAY,IAAIC,mBAAJ,EAAhB;AACA;AACAD,cAAUE,cAAV,CAAyBL,OAAzB,EACqBM,IADrB,CAC0B,UAACC,KAAD,EAAW;AACb,YAAIC,eAAeD,MAAM,CAAN,CAAnB;AACA,YAAGC,YAAH,EAAiB;AACb,gBAAIC,WAAWC,KAAKC,KAAL,CAAWH,aAAaI,SAAxB,CAAf;AACA,gBAAIC,aAAa;AACbC,oBAAIN,aAAaM,EADJ;AAEbd,yBAASA,OAFI;AAGbe,sBAAMN,SAASM,IAAT,GAAgBN,SAASM,IAAzB,GAAgCf,OAHzB;AAIbgB,sBAAMP,SAASO,IAJF;AAKbC,uBAAOR,SAASQ;AALH,aAAjB;AAOAxB,oBAAQC,GAAR,CAAY,YAAZ,EAA0BmB,UAA1B;AACAX,iBAAK,IAAL,EAAWW,UAAX;AACH,SAXD,MAYK;AACDpB,oBAAQC,GAAR,CAAY,oCAAZ;;AAEA,gBAAMwB,UAAU;AACZlB,yBAASA,OADG;AAEZmB,wBAAQ,WAFI;AAGZJ,sBAAMf,OAHM;AAIZgB,sBAAM;AAJM,aAAhB;;AAOAd,iBAAK,IAAL,EAAWgB,OAAX;AACH;AACJ,KA3BrB;;AA6BA;;;;;;;;;;AAUH,CA3CQ,CAAb;AA6CA","file":"passport.js","sourcesContent":["'use strict';\r\n\r\nimport passport from 'passport';\r\nimport { AuthConfig, Constants } from './commons/ServerConfig';\r\nvar GoogleTokenStrategy = require('passport-google-token').Strategy;\r\nimport users from './users';\r\nvar LocalStrategy = require('passport-local').Strategy;\r\n\r\nimport UserModel from './Models/UserModel';\r\n\r\nconsole.log('passport intitialized');\r\n/*\r\npassport.serializeUser(function(user, done) { //In serialize user you decide what to store in the session. Here I'm storing the user id only.\r\n  done(null, user.emailId);\r\n});\r\n\r\npassport.deserializeUser(function(emailId, done) { //Here you retrieve all the info of the user from the session storage using the user id stored in the session earlier using serialize user.\r\n    let existingUser = users.GetUser(emailId);\r\n    if(existingUser !== null) {\r\n        console.log('user found');\r\n        let userEntity = {\r\n            ...existingUser,\r\n            emailId: emailId,\r\n            name: existingUser.displayName ? existingUser.displayName : emailId,\r\n            role: existingUser.role\r\n        };\r\n        done(null, userEntity);\r\n    }\r\n    \r\n});\r\n*/\r\nvar localOptions = {\r\n    usernameField: 'emailId',\r\n    passwordField: 'password'\r\n};\r\npassport.use(new LocalStrategy(localOptions, function(emailId, password, done) {\r\n        console.log('local strategy being used');\r\n        let userModel = new UserModel();\r\n        // let existingUser = users.GetUser(emailId);\r\n        userModel.GetUserByEmail(emailId)\r\n                            .then((users) => {\r\n                                let existingUser = users[0];\r\n                                if(existingUser) {\r\n                                    let userMeta = JSON.parse(existingUser.user_meta);\r\n                                    let userEntity = {\r\n                                        id: existingUser.id,\r\n                                        emailId: emailId,\r\n                                        name: userMeta.name ? userMeta.name : emailId,\r\n                                        role: userMeta.role,\r\n                                        orgId: userMeta.orgId\r\n                                    };\r\n                                    console.log('user found', userEntity);\r\n                                    done(null, userEntity);\r\n                                }\r\n                                else {\r\n                                    console.log('unknown user login being attempted');\r\n                                    \r\n                                    const newUser = {\r\n                                        emailId: emailId,\r\n                                        status: 'not found',\r\n                                        name: emailId,\r\n                                        role: 'guest'\r\n                                    }\r\n                                    \r\n                                    done(null, newUser);\r\n                                }\r\n                            });\r\n        \r\n        /*if(emailId === Constants.AdminEmailId) {\r\n            console.log('admin user being added');\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: Constants.AdminEmailId,\r\n                role: Constants.AdminRole\r\n            };\r\n            users.Add(userEntity);\r\n            return done(null, userEntity);\r\n        }*/\r\n    }\r\n))\r\n/*\r\npassport.use('google-token',new GoogleTokenStrategy({\r\n        clientID: AuthConfig.clientId,\r\n        clientSecret: AuthConfig.clientSecret,\r\n        callbackUrl: 'http://localhost:3001/api/admin/auth/callback'\r\n    }, (accessToken, refreshToken, profile, done) => {\r\n    try{\r\n        console.log('profile authenticated', profile);\r\n        let emailId = profile.emails[0].value;\r\n        let existingUser = users.GetUser(emailId);\r\n        if(existingUser !== null) {\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: profile.displayName,\r\n                role: existingUser.role\r\n            };\r\n            users.UpdateUser(emailId, userEntity);\r\n            return done(null, existingUser);\r\n        }\r\n        if(emailId === Constants.AdminEmailId) {\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: profile.displayName,\r\n                role: Constants.AdminRole\r\n            };\r\n            users.Add(userEntity);\r\n            return done(null, userEntity);\r\n        }\r\n        const newUser = {\r\n            emailId: emailId,\r\n            googleId: profile.id,\r\n            status: 'not found',\r\n            name: profile.displayName,\r\n            role: 'guest'\r\n        }\r\n        // users.Add(newUser);\r\n        done(null, newUser);\r\n    }\r\n    catch(err) {\r\n        console.log('error occured in profile authentication callback');\r\n        console.log(err);\r\n        done(err, false, err.message);\r\n    }\r\n}));\r\n*/"]}