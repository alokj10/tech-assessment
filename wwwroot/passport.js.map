{"version":3,"sources":["../src/passport.js"],"names":["GoogleTokenStrategy","require","Strategy","LocalStrategy","console","log","localOptions","usernameField","passwordField","passport","use","emailId","password","done","userModel","UserModel","CheckUserCredentials","existingUser","userMeta","JSON","parse","user_meta","userEntity","id","name","role","orgId","newUser","status"],"mappings":"AAAA;;AAEA;;;;AACA;;AAEA;;;;AAGA;;;;;;;;AAJA,IAAIA,sBAAsBC,QAAQ,uBAAR,EAAiCC,QAA3D;;AAEA,IAAIC,gBAAgBF,QAAQ,gBAAR,EAA0BC,QAA9C;;AAIAE,QAAQC,GAAR,CAAY,uBAAZ;AACA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,eAAe;AACfC,mBAAe,SADA;AAEfC,mBAAe;AAFA,CAAnB;AAIAC,mBAASC,GAAT,CAAa,IAAIP,aAAJ,CAAkBG,YAAlB;AAAA,uEAAgC,iBAAeK,OAAf,EAAwBC,QAAxB,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACrCT,gCAAQC,GAAR,CAAY,2BAAZ;AACIS,iCAFiC,GAErB,IAAIC,mBAAJ,EAFqB;AAAA;AAAA,+BAGZD,UAAUE,oBAAV,CAA+BL,OAA/B,EAAwCC,QAAxC,CAHY;;AAAA;AAGjCK,oCAHiC;;;AAKrC,4BAAGA,YAAH,EAAiB;AACbb,oCAAQC,GAAR,CAAY,cAAZ,EAA4BY,YAA5B;AACIC,oCAFS,GAEEC,KAAKC,KAAL,CAAWH,aAAaI,SAAxB,CAFF;AAGeC,sCAHf,GAG4B;AACbC,oCAAIN,aAAaM,EADJ;AAEbZ,yCAASA,OAFI;AAGba,sCAAMN,SAASM,IAAT,GAAgBN,SAASM,IAAzB,GAAgCb,OAHzB;AAIbc,sCAAMP,SAASO,IAJF;AAKbC,uCAAOR,SAASQ;AALH,6BAH5B;;AAUbb,iCAAK,IAAL,EAAWS,UAAX;AACH,yBAXD,MAYK;AACKK,mCADL,GACe;AACZhB,yCAASA,OADG;AAEZiB,wCAAQ,WAFI;AAGZJ,sCAAMb,OAHM;AAIZc,sCAAM;AAJM,6BADf;;;AAQDZ,iCAAK,IAAL,EAAWc,OAAX;AACH;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;AAzDqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA;AAAA;AAAA;AAAA,IAAb;AAqEA","file":"passport.js","sourcesContent":["'use strict';\r\n\r\nimport passport from 'passport';\r\nimport { AuthConfig, Constants } from './commons/ServerConfig';\r\nvar GoogleTokenStrategy = require('passport-google-token').Strategy;\r\nimport users from './users';\r\nvar LocalStrategy = require('passport-local').Strategy;\r\n\r\nimport UserModel from './Models/UserModel';\r\n\r\nconsole.log('passport intitialized');\r\n/*\r\npassport.serializeUser(function(user, done) { //In serialize user you decide what to store in the session. Here I'm storing the user id only.\r\n  done(null, user.emailId);\r\n});\r\n\r\npassport.deserializeUser(function(emailId, done) { //Here you retrieve all the info of the user from the session storage using the user id stored in the session earlier using serialize user.\r\n    let existingUser = users.GetUser(emailId);\r\n    if(existingUser !== null) {\r\n        console.log('user found');\r\n        let userEntity = {\r\n            ...existingUser,\r\n            emailId: emailId,\r\n            name: existingUser.displayName ? existingUser.displayName : emailId,\r\n            role: existingUser.role\r\n        };\r\n        done(null, userEntity);\r\n    }\r\n    \r\n});\r\n*/\r\nvar localOptions = {\r\n    usernameField: 'emailId',\r\n    passwordField: 'password'\r\n};\r\npassport.use(new LocalStrategy(localOptions, async function(emailId, password, done) {\r\n        console.log('local strategy being used');\r\n        let userModel = new UserModel();\r\n        let existingUser = await userModel.CheckUserCredentials(emailId, password);\r\n\r\n        if(existingUser) {\r\n            console.log('existingUser', existingUser);\r\n            let userMeta = JSON.parse(existingUser.user_meta);\r\n                                    let userEntity = {\r\n                                        id: existingUser.id,\r\n                                        emailId: emailId,\r\n                                        name: userMeta.name ? userMeta.name : emailId,\r\n                                        role: userMeta.role,\r\n                                        orgId: userMeta.orgId\r\n                                    };\r\n            done(null, userEntity);\r\n        }\r\n        else {\r\n            const newUser = {\r\n                emailId: emailId,\r\n                status: 'not found',\r\n                name: emailId,\r\n                role: 'guest'\r\n            }\r\n            \r\n            done(null, newUser);\r\n        }\r\n        /*\r\n        userModel.GetUserByEmail(emailId)\r\n                            .then((users) => {\r\n                                let existingUser = users[0];\r\n                                if(existingUser) {\r\n                                    let userMeta = JSON.parse(existingUser.user_meta);\r\n                                    let userEntity = {\r\n                                        id: existingUser.id,\r\n                                        emailId: emailId,\r\n                                        name: userMeta.name ? userMeta.name : emailId,\r\n                                        role: userMeta.role,\r\n                                        orgId: userMeta.orgId\r\n                                    };\r\n                                    console.log('user found', userEntity);\r\n                                    done(null, userEntity);\r\n                                }\r\n                                else {\r\n                                    console.log('unknown user login being attempted');\r\n                                    \r\n                                    const newUser = {\r\n                                        emailId: emailId,\r\n                                        status: 'not found',\r\n                                        name: emailId,\r\n                                        role: 'guest'\r\n                                    }\r\n                                    \r\n                                    done(null, newUser);\r\n                                }\r\n                            });\r\n        */\r\n        /*if(emailId === Constants.AdminEmailId) {\r\n            console.log('admin user being added');\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: Constants.AdminEmailId,\r\n                role: Constants.AdminRole\r\n            };\r\n            users.Add(userEntity);\r\n            return done(null, userEntity);\r\n        }*/\r\n    }\r\n))\r\n/*\r\npassport.use('google-token',new GoogleTokenStrategy({\r\n        clientID: AuthConfig.clientId,\r\n        clientSecret: AuthConfig.clientSecret,\r\n        callbackUrl: 'http://localhost:3001/api/admin/auth/callback'\r\n    }, (accessToken, refreshToken, profile, done) => {\r\n    try{\r\n        console.log('profile authenticated', profile);\r\n        let emailId = profile.emails[0].value;\r\n        let existingUser = users.GetUser(emailId);\r\n        if(existingUser !== null) {\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: profile.displayName,\r\n                role: existingUser.role\r\n            };\r\n            users.UpdateUser(emailId, userEntity);\r\n            return done(null, existingUser);\r\n        }\r\n        if(emailId === Constants.AdminEmailId) {\r\n            let userEntity = {\r\n                emailId: emailId,\r\n                name: profile.displayName,\r\n                role: Constants.AdminRole\r\n            };\r\n            users.Add(userEntity);\r\n            return done(null, userEntity);\r\n        }\r\n        const newUser = {\r\n            emailId: emailId,\r\n            googleId: profile.id,\r\n            status: 'not found',\r\n            name: profile.displayName,\r\n            role: 'guest'\r\n        }\r\n        // users.Add(newUser);\r\n        done(null, newUser);\r\n    }\r\n    catch(err) {\r\n        console.log('error occured in profile authentication callback');\r\n        console.log(err);\r\n        done(err, false, err.message);\r\n    }\r\n}));\r\n*/"]}