{"version":3,"sources":["../../src/commons/RoleDefinitions.js"],"names":["VIEW_MCQS","VIEW_TESTS","VIEW_INVITATIONS","VIEW_USERS","VIEW_ORGS","admin","orgadmin","staff","handleRoleNotFound","role","console","log","HandlePromise","db","queryConfig","userEntity","Promise","resolve","reject","sql","value","getSql","executeQuery","then","res","output","serializeToJson","catch","err","GetQueryConfig","action","queryConfigs","RoleDefinitions","queries","filter","queryItem","idx","key","allowedActions","orgId","data","outputArray","length","map","item","index","mcq_meta","replace","id","JSON","parse","push","globalQueries","getAllInvitationsQuery","getInvitationsByOrgQuery"],"mappings":"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","file":"RoleDefinitions.js","sourcesContent":["import globalQueries from '../db/queries';\r\n\r\nexport const VIEW_MCQS = 'VIEW_MCQS';\r\nexport const VIEW_TESTS = 'VIEW_TESTS';\r\nexport const VIEW_INVITATIONS = 'VIEW_INVITATIONS';\r\nexport const VIEW_USERS = 'VIEW_USERS';\r\nexport const VIEW_ORGS = 'VIEW_ORGS';\r\nexport const admin = 'admin';\r\nexport const orgadmin = 'orgadmin';\r\nexport const staff = 'staff';\r\n\r\nconst handleRoleNotFound = (role) => {\r\n    console.log(`${role} role not found`);\r\n    return '';\r\n}\r\n\r\nexport const HandlePromise = (db, queryConfig, userEntity) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (queryConfig) {\r\n            userEntity = userEntity || { role: 'admin' };\r\n            let sql = queryConfig.value.getSql(userEntity);\r\n            if (!sql) reject('unauthorized');\r\n            db.executeQuery(sql).then((res) => {\r\n                if (res) {\r\n                    let output = queryConfig.value.serializeToJson(res);\r\n                    resolve(output);\r\n                }\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport const GetQueryConfig = (action) => {\r\n    let queryConfigs = RoleDefinitions.queries.filter((queryItem, idx) => {\r\n        return queryItem.key === action;\r\n    });\r\n    let queryConfig = queryConfigs[0];\r\n    return queryConfig;\r\n}\r\n\r\nexport const RoleDefinitions = {\r\n    role: admin,\r\n    allowedActions: [\r\n        'addMcq', 'addTest', 'addUser', 'addCategory', 'addSkill', 'addOrganization',\r\n        'sendInvitation',\r\n        'viewTests', 'viewMcqs', 'viewUsers', 'viewOrgs'\r\n    ],\r\n    queries: [\r\n        {\r\n            key: VIEW_MCQS,\r\n            value: {\r\n                getSql: (userEntity) => {\r\n                    switch (userEntity.role) {\r\n                        case admin: {\r\n                            return `SELECT * FROM ta_mcq m`;\r\n                        }\r\n                        case staff:\r\n                        case orgadmin: {\r\n                            return `SELECT * FROM ta_mcq m \r\n                                    JOIN ta_users u ON JSON_EXTRACT(m.mcq_meta, '$.createdBy') = u.id\r\n                                    WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${userEntity.orgId}\r\n                                `;\r\n                        }\r\n                        default: handleRoleNotFound(userEntity.role);\r\n                    }\r\n                },\r\n                serializeToJson: (data) => {\r\n                    let outputArray = [];\r\n                    console.log('data count', data.length);\r\n                    if (data && data.length > 0) {\r\n                        data.map((item, index) => {\r\n                            let mcq_meta = item['mcq_meta'];\r\n                            mcq_meta = mcq_meta.replace(/\\n/g, \"\\\\n\");\r\n                            mcq_meta = mcq_meta.replace(/\\r/g, \"\\\\r\");\r\n                            mcq_meta = mcq_meta.replace(/\\t/g, \"\\\\t\");\r\n                            let output = {};\r\n                            output.id = item.id;\r\n                            output['mcq_meta'] = JSON.parse(mcq_meta);\r\n                            outputArray.push(output);\r\n                        })\r\n                    }\r\n                    return outputArray;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: VIEW_TESTS,\r\n            value: {\r\n                getSql: (userEntity) => {\r\n                    switch (userEntity.role) {\r\n                        case admin: {\r\n                            return `SELECT \r\n                                JSON_EXTRACT(t.test_meta, '$') as 'test_meta',\r\n                                t.id as 'id',\r\n                                JSON_EXTRACT(u.user_meta, '$') as 'user_meta' \r\n                                FROM ta_tests t\r\n                                JOIN ta_users u ON JSON_EXTRACT(t.test_meta, '$.createdBy') = u.id\r\n                                `;\r\n                        }\r\n                        case staff:\r\n                        case orgadmin: {\r\n                            return `SELECT \r\n                                    JSON_EXTRACT(t.test_meta, '$') as 'test_meta',\r\n                                    t.id as 'id',\r\n                                    JSON_EXTRACT(u.user_meta, '$') as 'user_meta' \r\n                                    FROM ta_tests t\r\n                                    JOIN ta_users u ON JSON_EXTRACT(t.test_meta, '$.createdBy') = u.id\r\n                                    WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${userEntity.orgId}\r\n                                `;\r\n                        }\r\n                        default: handleRoleNotFound(userEntity.role);\r\n                    }\r\n                },\r\n                serializeToJson: (data) => {\r\n                    let outputArray = [];\r\n                    console.log('data count', data.length);\r\n                    if (data && data.length > 0) {\r\n                        data.map((item, index) => {\r\n                            let output = {};\r\n                            output.id = item.id;\r\n                            output['test_meta'] = JSON.parse(item['test_meta']);\r\n                            output['user_meta'] = JSON.parse(item['user_meta']);\r\n                            outputArray.push(output);\r\n                        })\r\n                    }\r\n                    return outputArray;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: VIEW_INVITATIONS,\r\n            value: {\r\n                getSql: (userEntity) => {\r\n                    switch (userEntity.role) {\r\n                        case admin: {\r\n                            return globalQueries.getAllInvitationsQuery();\r\n                        }\r\n                        case staff:\r\n                        case orgadmin: {\r\n                            return globalQueries.getInvitationsByOrgQuery(userEntity.orgId);\r\n                        }\r\n                        default: handleRoleNotFound(userEntity.role);\r\n                    }\r\n                },\r\n                serializeToJson: (data) => {\r\n                    let outputArray = [];\r\n                    console.log('data count', data.length);\r\n                    if (data && data.length > 0) {\r\n                        data.map((item, index) => {\r\n                            let output = {};\r\n                            output.id = item.id;\r\n                            output['mcq_meta'] = JSON.parse(item['mcq_meta']);\r\n                            outputArray.push(output);\r\n                        })\r\n                    }\r\n                    return outputArray;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: VIEW_USERS,\r\n            value: {\r\n                getSql: (userEntity) => {\r\n                    switch (userEntity.role) {\r\n                        case admin: {\r\n                            return `SELECT \r\n                                u.id as 'id',\r\n                                JSON_EXTRACT(u.user_meta, '$') as 'user_meta',\r\n                                JSON_EXTRACT(o.org_meta, '$') as 'org_meta'\r\n                                FROM ta_users u\r\n                                LEFT JOIN ta_org o ON JSON_EXTRACT(u.user_meta, '$.orgId') = o.id\r\n                                `;\r\n                        }\r\n                        case staff:\r\n                        case orgadmin: {\r\n                            return `SELECT \r\n                                    u.id as 'id',\r\n                                    JSON_EXTRACT(u.user_meta, '$') as 'user_meta',\r\n                                    JSON_EXTRACT(o.org_meta, '$') as 'org_meta'\r\n                                    FROM ta_users u\r\n                                    LEFT JOIN ta_org o ON JSON_EXTRACT(u.user_meta, '$.orgId') = o.id\r\n                                    WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${userEntity.orgId}\r\n                                `;\r\n                        }\r\n                        default: handleRoleNotFound(userEntity.role);\r\n                    }\r\n                },\r\n                serializeToJson: (data) => {\r\n                    let outputArray = [];\r\n                    console.log('data count', data.length);\r\n                    if (data && data.length > 0) {\r\n                        data.map((item, index) => {\r\n                            let output = {};\r\n                            output.id = item.id;\r\n                            output['user_meta'] = JSON.parse(item['user_meta']);\r\n                            output['org_meta'] = JSON.parse(item['org_meta']);\r\n                            outputArray.push(output);\r\n                        })\r\n                    }\r\n                    return outputArray;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            key: VIEW_ORGS,\r\n            value: {\r\n                getSql: (userEntity) => {\r\n                    switch (userEntity.role) {\r\n                        case admin:\r\n                        case orgadmin: {\r\n                            return `SELECT * FROM ta_org u`\r\n                        }\r\n                        default: handleRoleNotFound(userEntity.role);\r\n                    }\r\n                },\r\n                serializeToJson: (data) => {\r\n                    let outputArray = [];\r\n                    console.log('data count', data.length);\r\n                    if (data && data.length > 0) {\r\n                        data.map((item, index) => {\r\n                            let output = {};\r\n                            output.id = item.id;\r\n                            output['org_meta'] = JSON.parse(item['org_meta']);\r\n                            outputArray.push(output);\r\n                        })\r\n                    }\r\n                    return outputArray;\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n"]}