{"version":3,"sources":["../../src/commons/RoleDefinitions.js"],"names":["admin","orgadmin","staff","handleRoleNotFound","role","console","log","HandlePromise","db","queryConfig","userEntity","Promise","resolve","reject","sql","value","getSql","executeQuery","then","res","output","serializeToJson","catch","err","HandlePromiseWithParams","params","skill","GetQueryConfig","action","queryConfigs","RoleDefinitions","queries","filter","queryItem","idx","key","allowedActions","VIEW_MCQS_QUERY","VIEW_MCQS_BY_SKILL_QUERY","VIEW_TESTS_QUERY","VIEW_TEST_BY_ID_QUERY","VIEW_INVITATIONS_QUERY","VIEW_USERS_QUERY","VIEW_ORGS_QUERY","VIEW_DASHBOARD_INVITATION","VIEW_DASHBOARD_TESTS","VIEW_DASHBOARD_MCQ"],"mappings":";;;;;;;AAAA;;;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;AAEO,IAAMA,wBAAQ,OAAd;AACA,IAAMC,8BAAW,UAAjB;AACA,IAAMC,wBAAQ,OAAd;;AAEA,IAAMC,kDAAqB,SAArBA,kBAAqB,CAACC,IAAD,EAAU;AACxCC,YAAQC,GAAR,CAAeF,IAAf;AACA,WAAO,EAAP;AACH,CAHM;;AAKA,IAAMG,wCAAgB,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,WAAL,EAAkBC,UAAlB,EAAiC;AAC1D,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAGJ,WAAH,EAAgB;AACZ,gBAAIK,MAAML,YAAYM,KAAZ,CAAkBC,MAAlB,CAAyBN,UAAzB,CAAV;AACA,gBAAG,CAACI,GAAJ,EAASD,OAAO,cAAP;AACTL,eAAGS,YAAH,CAAgBH,GAAhB,EAAqBI,IAArB,CAA0B,UAACC,GAAD,EAAS;AAC/B,oBAAGA,GAAH,EAAQ;AACJ,wBAAIC,SAASX,YAAYM,KAAZ,CAAkBM,eAAlB,CAAkCF,GAAlC,CAAb;AACAP,4BAAQQ,MAAR;AACH;AACJ,aALD,EAKGE,KALH,CAKS,UAACC,GAAD,EAAS;AACdV,uBAAOU,GAAP;AACH,aAPD;AAQH,SAXD,MAYK;AACDV,mBAAO,8BAAP;AACH;AACJ,KAhBM,CAAP;AAiBH,CAlBM;;AAoBA,IAAMW,4DAA0B,SAA1BA,uBAA0B,CAAChB,EAAD,EAAKC,WAAL,EAAkBgB,MAAlB,EAA6B;AAChE,WAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAGJ,WAAH,EAAgB;AACZJ,oBAAQC,GAAR,CAAemB,OAAOC,KAAtB;AACA,gBAAIZ,MAAML,YAAYM,KAAZ,CAAkBC,MAAlB,CAAyBS,MAAzB,CAAV;AACA,gBAAG,CAACX,GAAJ,EAASD,OAAO,cAAP;AACTL,eAAGS,YAAH,CAAgBH,GAAhB,EAAqBI,IAArB,CAA0B,UAACC,GAAD,EAAS;AAC/B,oBAAGA,GAAH,EAAQ;AACJ,wBAAIC,SAASX,YAAYM,KAAZ,CAAkBM,eAAlB,CAAkCF,GAAlC,CAAb;AACAP,4BAAQQ,MAAR;AACH;AACJ,aALD,EAKGE,KALH,CAKS,UAACC,GAAD,EAAS;AACdV,uBAAOU,GAAP;AACH,aAPD;AAQH,SAZD,MAaK;AACDV,mBAAO,8BAAP;AACH;AACJ,KAjBM,CAAP;AAkBH,CAnBM;;AAqBA,IAAMc,0CAAiB,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AACtC,QAAIC,eAAeC,gBAAgBC,OAAhB,CAAwBC,MAAxB,CAA+B,UAACC,SAAD,EAAYC,GAAZ,EAAoB;AAClE,eAAOD,UAAUE,GAAV,KAAkBP,MAAzB;AACH,KAFkB,CAAnB;AAGA,QAAInB,cAAcoB,aAAa,CAAb,CAAlB;AACA,WAAOpB,WAAP;AACH,CANM;;AAQA,IAAMqB,4CAAkB;AACvB1B,UAAMJ,KADiB;AAEvBoC,oBAAgB,CACZ,QADY,EACF,SADE,EACS,SADT,EACoB,aADpB,EACmC,UADnC,EAC+C,iBAD/C,EAEZ,gBAFY,EAGZ,WAHY,EAGC,UAHD,EAGa,WAHb,EAG0B,UAH1B,CAFO;AAOvBL,aAAS,CACLM,2BADK,EAELC,oCAFK,EAGLC,6BAHK,EAILC,kCAJK,EAKLC,yCALK,EAMLC,6BANK,EAOLC,2BAPK,EAQLC,2CARK,EASLC,sCATK,EAULC,oCAVK;AAPc,CAAxB","file":"RoleDefinitions.js","sourcesContent":["import globalQueries from '../db/queries';\r\nimport { VIEW_DASHBOARD_INVITATION,\r\n        VIEW_DASHBOARD_TESTS,\r\n        VIEW_DASHBOARD_MCQ } from './RoleBasedQueries/DashboardQueries';\r\nimport { VIEW_MCQS_QUERY, VIEW_MCQS_BY_SKILL_QUERY } from './RoleBasedQueries/McqQueries';\r\nimport { VIEW_TESTS, VIEW_TESTS_QUERY, VIEW_TEST_BY_ID_QUERY } from './RoleBasedQueries/TestQueries';\r\nimport { VIEW_INVITATIONS_QUERY } from './RoleBasedQueries/InvitationQueries';\r\nimport { VIEW_USERS_QUERY } from './RoleBasedQueries/UserQueries';\r\nimport { VIEW_ORGS_QUERY } from './RoleBasedQueries/OrgQueries';\r\n\r\nexport const admin = 'admin';\r\nexport const orgadmin = 'orgadmin';\r\nexport const staff = 'staff';\r\n\r\nexport const handleRoleNotFound = (role) => {\r\n    console.log(`${role} role not found`);\r\n    return '';\r\n}\r\n\r\nexport const HandlePromise = (db, queryConfig, userEntity) => {\r\n    return new Promise((resolve, reject) => {\r\n        if(queryConfig) {\r\n            let sql = queryConfig.value.getSql(userEntity);\r\n            if(!sql) reject('unauthorized');\r\n            db.executeQuery(sql).then((res) => {\r\n                if(res) {\r\n                    let output = queryConfig.value.serializeToJson(res);\r\n                    resolve(output);\r\n                }\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        }\r\n        else {\r\n            reject('No query configuration found');\r\n        }\r\n    });\r\n}\r\n\r\nexport const HandlePromiseWithParams = (db, queryConfig, params) => {\r\n    return new Promise((resolve, reject) => {\r\n        if(queryConfig) {\r\n            console.log(`${params.skill} params`);\r\n            let sql = queryConfig.value.getSql(params);\r\n            if(!sql) reject('unauthorized');\r\n            db.executeQuery(sql).then((res) => {\r\n                if(res) {\r\n                    let output = queryConfig.value.serializeToJson(res);\r\n                    resolve(output);\r\n                }\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        }\r\n        else {\r\n            reject('No query configuration found');\r\n        }\r\n    });\r\n}\r\n\r\nexport const GetQueryConfig = (action) => {\r\n    let queryConfigs = RoleDefinitions.queries.filter((queryItem, idx) => {\r\n        return queryItem.key === action;\r\n    });\r\n    let queryConfig = queryConfigs[0];\r\n    return queryConfig;\r\n}\r\n\r\nexport const RoleDefinitions = {\r\n        role: admin,\r\n        allowedActions: [\r\n            'addMcq', 'addTest', 'addUser', 'addCategory', 'addSkill', 'addOrganization', \r\n            'sendInvitation',\r\n            'viewTests', 'viewMcqs', 'viewUsers', 'viewOrgs'\r\n        ],\r\n        queries: [\r\n            VIEW_MCQS_QUERY,\r\n            VIEW_MCQS_BY_SKILL_QUERY,\r\n            VIEW_TESTS_QUERY,\r\n            VIEW_TEST_BY_ID_QUERY,\r\n            VIEW_INVITATIONS_QUERY,\r\n            VIEW_USERS_QUERY,\r\n            VIEW_ORGS_QUERY,\r\n            VIEW_DASHBOARD_INVITATION,\r\n            VIEW_DASHBOARD_TESTS,\r\n            VIEW_DASHBOARD_MCQ\r\n        ]\r\n    }\r\n   "]}