{"version":3,"sources":["../../src/db/mysql_repo.js"],"names":["mysqlHost","process","env","MYSQL_HOST","mysqlPort","MYSQL_PORT","mysqlUser","MYSQL_USER","mysqlPass","MYSQL_PASS","mysqlDB","MYSQL_DB","connectionOptions","connectionLimit","host","port","user","password","database","mysql_pool","mysql","createPool","getData","query","promise","Promise","resolve","reject","console","log","getConnection","err","connection","error","results","fields","release","executeQuery"],"mappings":";;;;;;;AAAA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAYC,QAAQC,GAAR,CAAYC,UAAZ,IAA0B,WAA1C;AACA,IAAIC,YAAYH,QAAQC,GAAR,CAAYG,UAAZ,IAA0B,MAA1C;AACA,IAAIC,YAAYL,QAAQC,GAAR,CAAYK,UAAZ,IAA0B,SAA1C;AACA,IAAIC,YAAYP,QAAQC,GAAR,CAAYO,UAAZ,IAA0B,MAA1C;AACA,IAAIC,UAAYT,QAAQC,GAAR,CAAYS,QAAZ,IAA0B,cAA1C;;AAEA,IAAIC,oBAAoB;AACpBC,qBAAiB,EADG;AAEpBC,UAAMd,SAFc;AAGpBe,UAAMX,SAHc;AAIpBY,UAAMV,SAJc;AAKpBW,cAAUT,SALU;AAMpBU,cAAUR;AANU,CAAxB;AAQA,IAAMS,aAAcC,gBAAMC,UAAN,CAAiBT,iBAAjB,CAApB;;AAEA,IAAMU,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACvB;AACA;AACA;AACA;;AAEA,QAAIC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAE3CC,gBAAQC,GAAR,CAAY,iBAAZ,EAA+BN,KAA/B;AACAJ,mBAAWW,aAAX,CAAyB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AAC1C,gBAAID,GAAJ,EAAS;AACL;AACAH,wBAAQC,GAAR,CAAY,2CAA2CE,GAAvD;AACAJ,uBAAOI,GAAP;AACH,aAJD,MAKI;AACAC,2BAAWT,KAAX,CAAiBA,KAAjB,EAAwB,UAACU,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAChD,wBAAGF,KAAH,EAAU;AACNL,gCAAQC,GAAR,CAAY,4BAAZ,EAA0CI,KAA1C;AACAN,+BAAOM,KAAP;AACH;AACDL,4BAAQC,GAAR,CAAY,mBAAZ;AACAD,4BAAQC,GAAR,CAAY,oBAAZ;AACAG,+BAAWI,OAAX;AACAV,4BAAQQ,OAAR;AACH,iBATD;AAUH;AACJ,SAlBD;AAmBH,KAtBa,CAAd;;AAwBA,WAAOV,OAAP;AAEH,CAhCD;;AAkCA,IAAMa,eAAe,SAAfA,YAAe,CAACd,KAAD,EAAW;AAC5B,QAAIC,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAE3CC,gBAAQC,GAAR,CAAY,iBAAZ,EAA+BN,KAA/B;AACAJ,mBAAWW,aAAX,CAAyB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AAC1C,gBAAID,GAAJ,EAAS;AACL;AACAH,wBAAQC,GAAR,CAAY,2CAA2CE,GAAvD;AACAJ,uBAAOI,GAAP;AACH,aAJD,MAKI;AACAC,2BAAWT,KAAX,CAAiBA,KAAjB,EAAwB,UAACU,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAChD,wBAAGF,KAAH,EAAU;AACNL,gCAAQC,GAAR,CAAY,4BAAZ,EAA0CI,KAA1C;AACAN,+BAAOM,KAAP;AACH;AACDL,4BAAQC,GAAR,CAAY,2CAAZ;AACAG,+BAAWI,OAAX;AACAV,4BAAQQ,OAAR;AACH,iBARD;AASH;AACJ,SAjBD;AAkBH,KArBa,CAAd;;AAuBA,WAAOV,OAAP;AACH,CAzBD;;QA4BIF,O,GAAAA,O;QACAe,Y,GAAAA,Y","file":"mysql_repo.js","sourcesContent":["import mysql from 'mysql';\r\n\r\n// const mysql_pool  = mysql.createPool({\r\n//     connectionLimit: 50,\r\n//     host: '95.216.2.208', // cloud2.zolahost.net\r\n//     user: 'cashfrom_profile',\r\n//     password: 'Encasherr123',\r\n//     database: 'cashfrom_profiledb_dev',\r\n//     acquireTimeout: 1000000\r\n// });\r\n\r\n// const mysql_pool  = mysql.createPool({\r\n//     connectionLimit: 50,\r\n//     host: 'localhost',\r\n//     // host: '103.212.121.53', \r\n//     user: 'tpptxbaq_app_write',\r\n//     password: 'Encasherr123',\r\n//     database: 'tpptxbaq_profiledb'\r\n// });\r\n\r\n// const mysql_pool  = mysql.createPool({\r\n//     connectionLimit: 50,\r\n//     host: '172.17.0.2',\r\n//     port: 3306,\r\n//     user: 'ta_app_write',\r\n//     password: 'Encasherr123',\r\n//     database: 'ta_profiledb'\r\n// });\r\nvar mysqlHost = process.env.MYSQL_HOST || 'localhost';\r\nvar mysqlPort = process.env.MYSQL_PORT || '3306';\r\nvar mysqlUser = process.env.MYSQL_USER || 'tp_app1';\r\nvar mysqlPass = process.env.MYSQL_PASS || 'tech';\r\nvar mysqlDB   = process.env.MYSQL_DB   || 'ta_profiledb';\r\n\r\nvar connectionOptions = {\r\n    connectionLimit: 50,\r\n    host: mysqlHost,\r\n    port: mysqlPort,\r\n    user: mysqlUser,\r\n    password: mysqlPass,\r\n    database: mysqlDB\r\n};\r\nconst mysql_pool  = mysql.createPool(connectionOptions);\r\n\r\nconst getData = (query) => {\r\n    // connection.connect((err) => {\r\n    //     console.log('error in open connection', err);\r\n    // });\r\n    // connection.connect();\r\n\r\n    var promise = new Promise((resolve, reject) => {\r\n\r\n        console.log('getdata query: ', query);\r\n        mysql_pool.getConnection((err, connection) => {\r\n            if (err) {\r\n                //connection.release();\r\n                console.log(' Error getting mysql_pool connection: ' + err);\r\n                reject(err);\r\n            }\r\n            else{\r\n                connection.query(query, (error, results, fields) => {\r\n                    if(error) {\r\n                        console.log('error in query execution: ', error);\r\n                        reject(error);\r\n                    }\r\n                    console.log('success retrieval');\r\n                    console.log('release connection');\r\n                    connection.release();\r\n                    resolve(results);\r\n                });\r\n            }\r\n        }) \r\n    })\r\n\r\n    return promise;\r\n\r\n}\r\n\r\nconst executeQuery = (query) => {\r\n    var promise = new Promise((resolve, reject) => {\r\n\r\n        console.log('execute query: ', query);\r\n        mysql_pool.getConnection((err, connection) => {\r\n            if (err) {\r\n                //connection.release();\r\n                console.log(' Error getting mysql_pool connection: ' + err);\r\n                reject(err);\r\n            }\r\n            else{\r\n                connection.query(query, (error, results, fields) => {\r\n                    if(error) {\r\n                        console.log('error in query execution: ', error);\r\n                        reject(error);\r\n                    }\r\n                    console.log('connection released after query execution');\r\n                    connection.release();\r\n                    resolve(results);\r\n                });\r\n            }\r\n        }) \r\n    })\r\n\r\n    return promise;\r\n}\r\n\r\nexport {\r\n    getData,\r\n    executeQuery\r\n}"]}