{"version":3,"sources":["../../src/db/queries.js"],"names":["queries","getAllInvitationsQuery","getCandidatesByTestId","testId","getStudentsByTestId","getInvitationCountForAdmin","getInvitationCountForUser","userId","getInvitationCountByOrgId","orgId","admin","getInvitationsByOrgQuery","getInvitationsByCreateUserQuery","getTestCountForAdmin","getTestCountByOrgId","getTestCountByUser","getMcqCountForAdmin","getMcqCountByUser","getMcqCountByOrgId","getCandidateInfoByInvitationId","invitationId","getCandidateByEmailQuery","emailId","getUserByEmailIdQuery","checkUserCredentials","getMcqResponseByInvitationId","getMcqResponseByResponseId","responseId","getMcqResponseByRegistrationId","registrationId","getRecentRegistrationIdOfCandidate","candidateId","getMcqResponsesPendingForEvaluation","Constants","InvitationTestStatus","Completed","getAllDbConfig","getDbConfigByKey","key","getCandidateDetails","getRegisteredCandidateDetails","getAllRegistrationsQuery","filter","sql","getAllRegistrationsForUserQuery","getAllRegistrationsForTestIdQuery","getAllRegistrationsForAuthorQuery","getAllTestsForGrade","grade"],"mappings":"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","file":"queries.js","sourcesContent":["import Constants from \"../commons/Constants\";\r\nimport { admin } from \"../commons/RoleDefinitions\";\r\n\r\nconst queries =  {\r\n    getAllInvitationsQuery: () => {\r\n        return `\r\n                SELECT \r\n                /*JSON_UNQUOTE(JSON_EXTRACT(r.response_meta , invitationId)) as 'respInvitationId', r.**/\r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.name')) as 'candidateName', \r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.email')) as 'candidateEmail', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.status')) as 'invitationStatus', \r\n                i.time_stamp as 'invitedOn', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.completedOn')) as 'completedOn', \r\n                (r.candidate_score/r.total_score)*100 as 'scorePercentage', \r\n                r.result as 'result', \r\n                JSON_UNQUOTE(JSON_EXTRACT(t.test_meta, '$.testName')) as 'testName', \r\n                t.id as 'testId', r.id as 'responseId', c.id as 'candidateId',\r\n                r.response_meta as 'response_meta'\r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta , '$.candidateId')) = c.id \r\n                join ta_tests t ON JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta , '$.testId')) = t.id \r\n                left join ta_mcqresponses r ON r.invitationId = i.id\r\n                /*left join ta_mcqresponses r ON JSON_UNQUOTE(JSON_EXTRACT(r.response_meta , '$.invitationId')) = i.id*/\r\n                /*where r.id in (47, 50)*/\r\n                where i.isLive=1\r\n                order by i.time_stamp DESC\r\n        `;\r\n    },\r\n\r\n    getCandidatesByTestId: (testId) => {\r\n        return `\r\n            SELECT \r\n            JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.name')) as 'candidateName', \r\n            JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.email')) as 'candidateEmail', \r\n            JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.status')) as 'invitationStatus', \r\n            i.time_stamp as 'invitedOn', \r\n            JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.completedOn')) as 'completedOn', \r\n            JSON_UNQUOTE(JSON_EXTRACT(r.response_meta, '$.scorePercentage')) as 'scorePercentage', \r\n            JSON_UNQUOTE(JSON_EXTRACT(r.response_meta, '$.result')) as 'result', \r\n            JSON_UNQUOTE(JSON_EXTRACT(t.test_meta, '$.testName')) as 'testName', \r\n            t.id as 'testId', r.id as 'responseId', c.id as 'candidateId',\r\n            r.response_meta as 'response_meta'\r\n            FROM ta_invitations i \r\n            join ta_candidates c ON JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta , '$.candidateId')) = c.id \r\n            join ta_tests t ON JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta , '$.testId')) = t.id \r\n            left join ta_mcqresponses r ON r.invitationId = i.id\r\n            where i.isLive=1\r\n            and t.id = ${testId}\r\n            order by i.time_stamp DESC\r\n        `;\r\n    },\r\n\r\n    getStudentsByTestId: (testId) => {\r\n        return `\r\n            SELECT \r\n            JSON_UNQUOTE(JSON_EXTRACT(ca.candidate_meta, '$.name')) as 'candidateName', \r\n            JSON_UNQUOTE(JSON_EXTRACT(ca.candidate_meta, '$.email')) as 'candidateEmail', \r\n            tr.status as 'invitationStatus', \r\n            tr.created_on as 'invitedOn', \r\n            CASE tr.status WHEN 'Completed' THEN tr.modified_on ELSE NULL END as 'completedOn', \r\n            JSON_UNQUOTE(JSON_EXTRACT(tr.evaluation_meta, '$.scorePercentage')) as 'scorePercentage', \r\n            JSON_UNQUOTE(JSON_EXTRACT(tr.evaluation_meta, '$.result')) as 'result', \r\n            JSON_UNQUOTE(JSON_EXTRACT(t.test_meta, '$.testName')) as 'testName', \r\n            t.id as 'testId', tr.id as 'registrationId', ca.id as 'candidateId',\r\n            tr.response_meta as 'response_meta'\r\n            FROM ta_test_registrations tr \r\n            join ta_candidates ca ON tr.candidate_id = ca.id \r\n            join ta_tests t ON tr.test_id = t.id\r\n            where t.id = ${testId}\r\n            order by tr.created_on DESC\r\n        `;\r\n    },\r\n\r\n    getInvitationCountForAdmin: () => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_EXTRACT(i.invitation_meta , '$.candidateId') = c.id \r\n                join ta_tests t ON JSON_EXTRACT(i.invitation_meta , '$.testId') = t.id \r\n                left join ta_mcqresponses r ON JSON_EXTRACT(r.response_meta , '$.invitationId') = i.id\r\n            `;\r\n    },\r\n\r\n    getInvitationCountForUser: (userId) => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_EXTRACT(i.invitation_meta , '$.candidateId') = c.id \r\n                join ta_tests t ON JSON_EXTRACT(i.invitation_meta , '$.testId') = t.id \r\n                join ta_users u ON JSON_EXTRACT(i.invitation_meta, '$.createdBy') = u.id \r\n                left join ta_mcqresponses r ON JSON_EXTRACT(r.response_meta , '$.invitationId') = i.id\r\n                WHERE u.id = ${userId} \r\n            `;\r\n    },\r\n\r\n    getInvitationCountByOrgId: (orgId) => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_EXTRACT(i.invitation_meta , '$.candidateId') = c.id \r\n                join ta_tests t ON JSON_EXTRACT(i.invitation_meta , '$.testId') = t.id \r\n                join ta_users u ON JSON_EXTRACT(i.invitation_meta, '$.createdBy') = u.id \r\n                left join ta_mcqresponses r ON JSON_EXTRACT(r.response_meta , '$.invitationId') = i.id\r\n                WHERE (JSON_EXTRACT(u.user_meta, '$.orgId') = ${orgId}\r\n                OR JSON_EXTRACT(u.user_meta, '$.role') = '${admin}')\r\n                AND i.isLive = 1\r\n            `;\r\n    },\r\n\r\n    getInvitationsByOrgQuery: (orgId) => {\r\n        return `\r\n                SELECT\r\n                c.id as 'candidateId', \r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.name')) as 'candidateName', \r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.email')) as 'candidateEmail', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.status')) as 'invitationStatus', \r\n                i.time_stamp as 'invitedOn', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.completedOn')) as 'completedOn', \r\n                (r.candidate_score/r.total_score)*100 as 'scorePercentage', \r\n                r.result as 'result', \r\n                JSON_UNQUOTE(JSON_EXTRACT(t.test_meta, '$.testName')) as 'testName', \r\n                t.id as 'testId', r.id as 'responseId' \r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_EXTRACT(i.invitation_meta , '$.candidateId') = c.id \r\n                join ta_tests t ON JSON_EXTRACT(i.invitation_meta , '$.testId') = t.id\r\n                join ta_users u ON JSON_EXTRACT(i.invitation_meta, '$.createdBy') = u.id \r\n                left join ta_mcqresponses r ON JSON_EXTRACT(r.response_meta , '$.invitationId') = i.id\r\n                WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${orgId}\r\n                order by i.time_stamp DESC\r\n            `;\r\n    },\r\n\r\n    getInvitationsByCreateUserQuery: (userId) => {\r\n        return `\r\n                SELECT \r\n                c.id as 'candidateId',\r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.name')) as 'candidateName', \r\n                JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.email')) as 'candidateEmail', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.status')) as 'invitationStatus', \r\n                i.time_stamp as 'invitedOn', \r\n                JSON_UNQUOTE(JSON_EXTRACT(i.invitation_meta, '$.completedOn')) as 'completedOn', \r\n                (r.candidate_score/r.total_score)*100 as 'scorePercentage', \r\n                r.result as 'result',  \r\n                JSON_UNQUOTE(JSON_EXTRACT(t.test_meta, '$.testName')) as 'testName', \r\n                t.id as 'testId', r.id as 'responseId' \r\n                FROM ta_invitations i \r\n                join ta_candidates c ON JSON_EXTRACT(i.invitation_meta , '$.candidateId') = c.id \r\n                join ta_tests t ON JSON_EXTRACT(i.invitation_meta , '$.testId') = t.id\r\n                join ta_users u ON JSON_EXTRACT(i.invitation_meta, '$.createdBy') = u.id \r\n                left join ta_mcqresponses r ON JSON_EXTRACT(r.response_meta , '$.invitationId') = i.id\r\n                WHERE u.id = ${userId}\r\n                order by i.time_stamp DESC\r\n            `;\r\n    },\r\n\r\n    getTestCountForAdmin: () => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_tests t\r\n            `;\r\n    },\r\n\r\n    getTestCountByOrgId: (orgId) => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_tests t\r\n                join ta_users u ON JSON_EXTRACT(t.test_meta, '$.createdBy') = u.id \r\n                WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${orgId}\r\n            `;\r\n    },\r\n\r\n    getTestCountByUser: (userId) => {\r\n        return `\r\n                SELECT COUNT(*) as cnt\r\n                FROM ta_tests t\r\n                join ta_users u ON JSON_EXTRACT(t.test_meta, '$.createdBy') = u.id \r\n                WHERE u.id = ${userId}\r\n            `;\r\n    },\r\n\r\n    getMcqCountForAdmin: () => {\r\n        return `\r\n            SELECT COUNT(*) as cnt\r\n            FROM ta_mcq\r\n        `;\r\n    },\r\n\r\n    getMcqCountByUser: (userId) => {\r\n        return `\r\n            SELECT COUNT(*) as cnt\r\n            FROM ta_mcq m\r\n            join ta_users u ON JSON_EXTRACT(m.mcq_meta, '$.createdBy') = u.id \r\n            WHERE u.id = ${userId}\r\n        `;\r\n    },\r\n    \r\n    getMcqCountByOrgId: (orgId) => {\r\n        // return `\r\n        //     SELECT COUNT(*) as cnt\r\n        //     FROM ta_mcq m\r\n        //     join ta_users u ON JSON_EXTRACT(m.mcq_meta, '$.createdBy') = u.id \r\n        //     WHERE JSON_EXTRACT(u.user_meta, '$.orgId') = ${orgId}\r\n        // `;\r\n        return `SELECT count(*) as cnt \r\n            FROM ta_mcq m \r\n            JOIN ta_users u ON m.addedBy = u.id\r\n            WHERE (JSON_EXTRACT(u.user_meta, '$.orgId') = ${orgId}\r\n                OR JSON_EXTRACT(u.user_meta, '$.role') = '${admin}')\r\n                AND m.category in ('Programming', 'Aptitude')`\r\n    },\r\n\r\n    getCandidateInfoByInvitationId: (invitationId) => {\r\n    return `\r\n            SELECT i.id AS 'invitationId',\r\n            c.id AS 'candidateId',\r\n            JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.name')) AS 'candidateName',\r\n            JSON_UNQUOTE(JSON_EXTRACT(c.candidate_meta, '$.email')) AS 'candidateEmail'\r\n            FROM ta_invitations i\r\n            JOIN ta_candidates c ON JSON_EXTRACT(i.invitation_meta,'$.candidateId')=c.id\r\n            WHERE i.id = ${invitationId}\r\n        `;\r\n    },\r\n\r\n    getCandidateByEmailQuery: (emailId) => {\r\n        return `\r\n            SELECT *\r\n            FROM ta_candidates c\r\n            WHERE JSON_EXTRACT(c.candidate_meta, '$.email') = '${emailId}'\r\n        `;\r\n    },\r\n\r\n    getUserByEmailIdQuery: (emailId) => {\r\n        return `\r\n            SELECT u.id as 'id', \r\n            JSON_EXTRACT(u.user_meta, '$') as 'user_meta'\r\n            FROM ta_users u \r\n            WHERE JSON_EXTRACT(u.user_meta, '$.emailId') = '${emailId}'\r\n        `;\r\n    },\r\n\r\n    checkUserCredentials: (emailId) => {\r\n        return `\r\n            SELECT u.id as 'id', \r\n            JSON_EXTRACT(u.user_meta, '$') as 'user_meta',\r\n            emailId,\r\n            password,\r\n            verificationStatus\r\n            FROM ta_users u \r\n            WHERE emailId = '${emailId}'\r\n        `;\r\n    },\r\n\r\n    getMcqResponseByInvitationId: (invitationId) => {\r\n        return `\r\n            SELECT r.id as 'id',\r\n            r.response_meta as 'response_meta'\r\n            FROM ta_mcqresponses r\r\n            WHERE JSON_EXTRACT(r.response_meta, '$.invitationId') = ${invitationId}\r\n        `;\r\n    },\r\n\r\n    getMcqResponseByResponseId: (responseId) => {\r\n        return `\r\n            SELECT  r.id,\r\n                    r.invitationId,\r\n                    r.response_meta,\r\n                    i.invitation_meta\r\n            FROM ta_mcqresponses r\r\n            JOIN ta_invitations i on r.invitationId = i.id\r\n            WHERE r.id = ${responseId}\r\n        `;\r\n    },\r\n\r\n    getMcqResponseByRegistrationId: (registrationId) => {\r\n        return `\r\n            SELECT  tr.id,\r\n                    tr.response_meta,\r\n                    tr.evaluation_meta\r\n            FROM ta_test_registrations tr\r\n            WHERE tr.id = ${registrationId}\r\n        `;\r\n    },\r\n\r\n    getRecentRegistrationIdOfCandidate: (candidateId) => {\r\n        return `\r\n            SELECT  tr.id\r\n            FROM ta_test_registrations tr\r\n            WHERE candidate_id = ${candidateId}\r\n            ORDER BY tr.created_on DESC\r\n        `;\r\n    },\r\n\r\n    getMcqResponsesPendingForEvaluation: () => {\r\n        return `\r\n                SELECT  r.id,\r\n                        r.invitationId as invitationId,\r\n                        r.response_meta,\r\n                        i.invitation_meta\r\n                FROM ta_mcqresponses r\r\n                JOIN ta_invitations i on r.invitationId = i.id\r\n                WHERE JSON_EXTRACT(i.invitation_meta, '$.status') = '${Constants.InvitationTestStatus.Completed}'\r\n                AND r.evaluation_status = 'PENDING'\r\n                AND r.invitationId = 175\r\n            `;\r\n    },\r\n\r\n    getAllDbConfig: () => {\r\n        return `\r\n            SELECT meta_key, meta_value\r\n            FROM ta_config\r\n        `;\r\n    },\r\n\r\n    getDbConfigByKey: (key) => {\r\n        return `\r\n            SELECT meta_key, meta_value\r\n            FROM ta_config\r\n            WHERE meta_key='${key}'\r\n        `;\r\n    },\r\n\r\n    getCandidateDetails: (candidateId) => {\r\n        return `\r\n            SELECT c.candidate_meta,\r\n            i.invitation_meta,\r\n            t.test_meta,\r\n            r.response_meta,\r\n            c.skills,\r\n            c.grade,\r\n            c.user_id\r\n            FROM ta_candidates c\r\n            JOIN ta_invitations i on JSON_EXTRACT(i.invitation_meta, '$.candidateId') = c.id\r\n            JOIN ta_tests t on JSON_EXTRACT(i.invitation_meta, '$.testId') = t.id\r\n            LEFT JOIN ta_mcqresponses r on i.id = r.invitationId\r\n            WHERE c.id= ${candidateId}\r\n            AND i.isLive = 1\r\n        `;\r\n    },\r\n\r\n    getRegisteredCandidateDetails: (candidateId) => {\r\n        return `\r\n            SELECT c.candidate_meta,\r\n            tr.response_meta,\r\n            tr.evaluation_meta,\r\n            tr.status,\r\n            tr.modified_on,\r\n            tr.created_on,\r\n            t.test_meta,\r\n            c.skills,\r\n            c.grade,\r\n            c.user_id\r\n            FROM ta_candidates c\r\n            JOIN ta_test_registrations tr on c.id = tr.candidate_id\r\n            JOIN ta_tests t on tr.test_id = t.id\r\n            WHERE c.id= ${candidateId}\r\n        `;\r\n    },\r\n\r\n    getAllRegistrationsQuery: (filter) => {\r\n        let sql = `SELECT *\r\n            FROM ta_test_registrations tr JOIN ta_tests ts ON tr.test_id = ts.id \r\n            `; \r\n            if(filter) {\r\n                sql += ` WHERE ${filter}`;\r\n            }\r\n            return sql;\r\n    },\r\n\r\n    getAllRegistrationsForUserQuery: (userId, filter) => {\r\n        let sql = `SELECT \r\n            tr.id as registrationId,\r\n            tr.evaluation_meta as evaluation_meta,\r\n            tr.status as status,\r\n            tr.scheduled_start as scheduled_start,\r\n            tr.modified_on as modified_on,\r\n            JSON_UNQUOTE(JSON_EXTRACT(ts.test_meta, '$.testName')) as testName,\r\n            ts.test_meta as test_meta,\r\n            ts.grade,\r\n            ts.subject\r\n            FROM ta_test_registrations tr \r\n            JOIN ta_tests ts ON tr.test_id = ts.id\r\n            JOIN ta_candidates ca on tr.candidate_id = ca.id\r\n            JOIN ta_users u on ca.user_id = u.id \r\n            WHERE u.id = ${userId}\r\n            `; \r\n            if(filter) {\r\n                sql += ` AND ${filter}`;\r\n            }\r\n            return sql;\r\n    },\r\n\r\n    getAllRegistrationsForTestIdQuery: (testId, filter) => {\r\n        let sql = `SELECT *\r\n            FROM ta_test_registrations tr JOIN ta_tests ts ON tr.test_id = ts.id \r\n            WHERE test_id = ${testId}\r\n            `; \r\n            if(filter) {\r\n                sql += ` AND ${filter}`;\r\n            }\r\n            return sql;\r\n    },\r\n\r\n    getAllRegistrationsForAuthorQuery: (userId, filter) => {\r\n        let sql = `SELECT *\r\n            FROM ta_test_registrations tr JOIN ta_tests ts ON tr.test_id = ts.id \r\n            WHERE JSON_EXTRACT(ts.test_meta, '$.createdBy') = ${userId}\r\n            `; \r\n            if(filter) {\r\n                sql += ` AND ${filter}`;\r\n            }\r\n            return sql;\r\n    },\r\n\r\n    getAllTestsForGrade: (grade, filter) => {\r\n        let sql = `SELECT *\r\n            FROM ta_tests\r\n            WHERE grade = '${grade}'\r\n            `; \r\n            if(filter) {\r\n                sql += ` AND ${filter}`;\r\n            }\r\n            return sql;\r\n    }\r\n}\r\nexport default queries;\r\n\r\n\r\n"]}