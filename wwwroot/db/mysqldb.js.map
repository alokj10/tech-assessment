{"version":3,"sources":["../../src/db/mysqldb.js"],"names":["db","getCollection","entityName","promise","Promise","resolve","reject","field_name","EntityFieldMapping","query","then","data","outputArray","SerializeToJson","dbEntity","find","criteria","sql","key","findPromise","res","catch","err","console","log","insert","entity","JSON","stringify","insertId","insertCustom","fieldString","valueString","Object","keys","forEach","prop","index","length","fieldVal","update","id","changedRows","findOneRecord","updatedRecord","delete","findOne","getByIds","ids","commaSeparatedIds","join","deleteByIds","executeQuery","getFilteredDataByEntity","serializeToJson","map","item","item_value","replace","output","parse","push","users","categories","mcq","tests","skills","invitations","candidates","mcqresponses","org","grade"],"mappings":"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","file":"mysqldb.js","sourcesContent":["import { getData, executeQuery } from './mysql_repo';\r\nimport { resolve } from 'url';\r\n\r\nconst db = {\r\n    getCollection: (entityName) => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            let field_name = EntityFieldMapping[entityName];\r\n            let query = `select * from ta_${entityName};`;\r\n            getData(query).then((data) => {\r\n                let outputArray = SerializeToJson(data, entityName);\r\n                let dbEntity = {\r\n                    data: outputArray,\r\n                    find: (criteria) => {\r\n                        let sql = `select * from ta_${entityName} where `;\r\n                        for(var key in criteria){\r\n                            sql += `JSON_EXTRACT(${field_name}, '$.${key}') = ${criteria[key]}`;\r\n                        }\r\n                        sql += ';';\r\n                        var findPromise = new Promise((resolve, reject) => {\r\n                            getData(sql).then((res) => {\r\n                                resolve(res);\r\n                            }).catch((err) => {\r\n                                reject(err);\r\n                            })\r\n                        });\r\n                        return findPromise;\r\n                    }\r\n                }\r\n                resolve(dbEntity);\r\n            }).catch((err) => {\r\n                console.log('error in getCollection: ', err);\r\n                reject(err);\r\n            });\r\n            \r\n        });\r\n\r\n        return promise;\r\n    },\r\n    insert: (entityName, entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            let field_name = EntityFieldMapping[entityName];\r\n            let sql = `insert into ta_${entityName} (${field_name}) \r\n                    values('${JSON.stringify(entity)}');`;\r\n            executeQuery(sql).then((res) => {\r\n                // console.log(`${entityName} inserted, res: ${res}`); \r\n                console.log(`${entityName} inserted, insertId: ${res.insertId}`); \r\n                resolve(res ? res.insertId : -1);\r\n            });\r\n        })\r\n    },\r\n    insertCustom: (entityName, entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            let field_name = EntityFieldMapping[entityName];\r\n            let fieldString = '', valueString = '';\r\n            Object.keys(entity).forEach((prop, index) => {\r\n                if(index === Object.keys(entity).length-1) {\r\n                    fieldString += `${prop}`;\r\n                    let fieldVal = entity[prop];\r\n                    if(typeof fieldVal === 'string') {\r\n                        valueString += `'${fieldVal}'`;\r\n                    }\r\n                    else if(typeof fieldVal === 'object') {\r\n                        valueString += `'${JSON.stringify(fieldVal)}'`;\r\n                    }\r\n                    else {\r\n                        valueString += `${fieldVal}`;\r\n                    }\r\n                }\r\n                else {\r\n                    fieldString += `${prop},`;\r\n                    let fieldVal = entity[prop];\r\n                    if(typeof fieldVal === 'string') {\r\n                        valueString += `'${fieldVal}'`;\r\n                    }\r\n                    else if(typeof fieldVal === 'object') {\r\n                        valueString += `'${JSON.stringify(fieldVal)}'`;\r\n                    }\r\n                    else {\r\n                        valueString += `${fieldVal}`;\r\n                    }\r\n                    valueString += ',';\r\n                }\r\n            })\r\n            let sql = `insert into ta_${entityName} (${fieldString}) \r\n                    values(${valueString});`;\r\n            executeQuery(sql).then((res) => {\r\n                // console.log(`${entityName} inserted, res: ${res}`); \r\n                console.log(`${entityName} inserted, insertId: ${res.insertId}`); \r\n                resolve(res ? res.insertId : -1);\r\n            });\r\n        })\r\n    },\r\n    update: (entityName, entity, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            let field_name = EntityFieldMapping[entityName];\r\n            let sql = `update ta_${entityName} set ${field_name}='${JSON.stringify(entity)}' \r\n                         where id=${id};`;\r\n            executeQuery(sql).then((res) => {\r\n                console.log(`${entityName} updated, changedRows: ${res.changedRows}`);  \r\n                findOneRecord(entityName, id).then((updatedRecord) => {\r\n                    resolve(updatedRecord);    \r\n                }).catch((err) => {\r\n                    reject(err);  \r\n                });\r\n            })\r\n        })\r\n    },\r\n    delete: (entityName, id) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = `delete from ta_${entityName} where id=${id};`;\r\n            executeQuery(sql).then((res) => {\r\n                console.log(`${entityName} deleted, id: ${id}`);  \r\n                resolve(res);\r\n            })\r\n        });\r\n    },\r\n    findOne: (entityName, id) => {\r\n        return findOneRecord(entityName, id);\r\n    },\r\n    getByIds: (entityName, ids) => {\r\n        return new Promise((resolve, reject) => {\r\n            let commaSeparatedIds = ids.join(\",\");\r\n            let sql = `select * from ta_${entityName} where id in (${commaSeparatedIds});`;\r\n            getData(sql).then((data) => {\r\n                    let outputArray = SerializeToJson(data, entityName);\r\n                    resolve(outputArray);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                });\r\n        });\r\n    },\r\n    deleteByIds: (entityName, ids) => {\r\n        return new Promise((resolve, reject) => {\r\n            let commaSeparatedIds = ids.join(\",\");\r\n            let sql = `delete from ta_${entityName} where id in (${commaSeparatedIds});`;\r\n            executeQuery(sql).then((res) => {\r\n                console.log(`${entityName} deleted, res: ${res}`);  \r\n                resolve(res);\r\n            });\r\n        });\r\n    },\r\n    executeQuery: (sql) => {\r\n        return new Promise((resolve, reject) => {\r\n            executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    },\r\n    getFilteredDataByEntity: (sql, entityName) => {\r\n        return new Promise((resolve, reject) => {\r\n            getData(sql).then((data) => {\r\n                    let outputArray = SerializeToJson(data, entityName);\r\n                    resolve(outputArray);\r\n                }).catch((err) => {\r\n                    reject(err);\r\n                });\r\n        });\r\n    },\r\n    serializeToJson: (data, entityName) => {\r\n        return SerializeToJson(data, entityName);\r\n    }\r\n}\r\n\r\n\r\nconst findOneRecord = (entityName, id) => {\r\n    return new Promise((resolve, reject) => {\r\n        let sql = `select * from ta_${entityName} where id=${id};`;\r\n        getData(sql).then((data) => {\r\n            let outputArray = SerializeToJson(data, entityName);\r\n            resolve(outputArray[0]);\r\n        }).catch((err) => {\r\n            console.log('error in findOne: ', err);\r\n            reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nconst SerializeToJson = (data, entityName) => {\r\n    let outputArray = [];\r\n    let field_name = EntityFieldMapping[entityName];\r\n    console.log('data count', data.length);\r\n    if(data && data.length > 0) {\r\n        data.map((item, index) => {\r\n            let item_value = item[field_name];\r\n            item_value = item_value.replace(/\\n/g, \"\\\\n\");\r\n            item_value = item_value.replace(/\\r/g, \"\\\\r\");\r\n            item_value = item_value.replace(/\\t/g, \"\\\\t\");\r\n            let output = {};\r\n            output.id = item.id;\r\n            output[field_name] = JSON.parse(item_value);\r\n            // output[field_name] = JSON.parse(item[field_name]);\r\n            outputArray.push(output);\r\n        })\r\n    }\r\n    return outputArray;\r\n}\r\n\r\nconst EntityFieldMapping = {\r\n    users: 'user_meta',\r\n    categories: 'category_meta',\r\n    mcq: 'mcq_meta',\r\n    tests: 'test_meta',\r\n    skills: 'skill_meta',\r\n    invitations: 'invitation_meta',\r\n    candidates: 'candidate_meta',\r\n    mcqresponses: 'response_meta',\r\n    org: 'org_meta',\r\n    grade: 'grade_meta'\r\n}\r\nexport default db;"]}