{"version":3,"sources":["../src/McqModel.js"],"names":["McqModel","entities","entityModel","dbObject","model","id","author","addedBy","category","choices","correctAnswer","description","minimumExperience","maximumExperience","question","score","skill","map","choice","index","push","GetAll","userEntity","Promise","resolve","reject","role","users","UserRoles","admin","console","log","data","length","entityModelCollection","mcq","GetMcqsByUser","filteredMcqs","filter","item","emailId","BulkAddMcq","jsonData","mcqs","Add","then","res","catch","error","entity","correctOptions","indexOf","chIndex","isCorrect","insert","db","saveDatabase","Update","mcqToUpdate","find","$loki","title","user","updatedBy","update","Delete","mcqToDelete","chain","remove","initializeCollection","getCollection","addCollection"],"mappings":"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","file":"McqModel.js","sourcesContent":["import db from './db';\r\nimport users from './users';\r\n\r\nclass McqModel {\r\n    entities = {};\r\n    entityModel = (dbObject) => {\r\n        let model = {\r\n            id: dbObject['$loki'],\r\n            author: dbObject.addedBy,\r\n            category: dbObject.category,\r\n            choices: [],\r\n            correctAnswer: dbObject.correctAnswer,\r\n            description: dbObject.description,\r\n            minimumExperience: dbObject.minimumExperience,\r\n            maximumExperience: dbObject.maximumExperience,\r\n            question: dbObject.question,\r\n            score: dbObject.score,\r\n            skill: dbObject.skill\r\n        };\r\n        dbObject.choices.map((choice, index) => {\r\n            model.choices.push(choice);\r\n        });\r\n        return model;\r\n    };\r\n\r\n    constructor() {\r\n      this.initializeCollection();\r\n    }\r\n\r\n    GetAll = (userEntity) => {\r\n        return new Promise((resolve, reject) => {\r\n            // console.log('get all mcqs called', req.user);\r\n            // let mcqs = this.initializeCollection();\r\n            if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                console.log(this.entities.data.length);\r\n                let entityModelCollection = [];\r\n                this.entities.data.map((mcq, index) => {\r\n                    let entityModel = this.entityModel(mcq);\r\n                    entityModelCollection.push(entityModel);\r\n                });\r\n                resolve(entityModelCollection);\r\n            }\r\n            else {\r\n                this.GetMcqsByUser(userEntity);\r\n            }\r\n        })\r\n    }\r\n\r\n    GetMcqsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n          let filteredMcqs = this.entities.data.filter((item, index) => {\r\n              return item.addedBy = userEntity.emailId;\r\n          });\r\n          console.log(filteredMcqs.length);\r\n          let entityModelCollection = [];\r\n          filteredMcqs.map((mcq, index) => {\r\n              let entityModel = this.entityModel(mcq);\r\n              entityModelCollection.push(entityModel);\r\n          });\r\n            return entityModelCollection;\r\n            // return filteredMcqs;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    BulkAddMcq = (jsonData) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqs = jsonData.mcqs;\r\n            if(mcqs && mcqs.length > 0) {\r\n                mcqs.map((item, index) => {\r\n                    item.addedBy = jsonData.addedBy;\r\n                    this.Add(item)\r\n                      .then((res) => {\r\n                          console.log('mcq added');\r\n                      })\r\n                      .catch((error) => {\r\n                          console.log('mcq add failed: ' + error);\r\n                      });\r\n                })\r\n            } \r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          console.log('mcq insert called', this.entities.data.length);\r\n          let correctOptions = ['A','B','C','D','E','F'];\r\n          if(entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n                if(entity.choices && entity.choices.length > 0) {\r\n                    entity.choices.map((choice, chIndex) => {\r\n                        if(chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n                            choice.isCorrect = true;              \r\n                        }\r\n                        else {\r\n                            choice.isCorrect = false;\r\n                        }\r\n                    })\r\n                }\r\n          }\r\n          this.entities.insert(entity);\r\n          db.saveDatabase();\r\n          console.log('save db called');\r\n          resolve(true);\r\n      });\r\n    }\r\n\r\n    Update = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          // let mcqs = this.initializeCollection();\r\n          let mcqToUpdate = this.entities.find({ '$loki': entity.$loki });\r\n          if(mcqToUpdate && mcqToUpdate.length > 0) {\r\n              mcqToUpdate[0].title = entity.title;\r\n              mcqToUpdate[0].description = entity.description;\r\n              if(entity.user) {\r\n                  mcqToUpdate[0].updatedBy = entity.emailId;\r\n              }\r\n              this.entities.update(mcqToUpdate[0]);\r\n              db.saveDatabase();\r\n              resolve(true);\r\n          }\r\n          else {\r\n              console.log('nothing to update');\r\n              reject(\"nothing to update\");\r\n          }\r\n      })\r\n    }\r\n\r\n    Delete = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          let mcqToDelete = this.entities.chain().find({ '$loki': entity.$loki });\r\n          if(mcqToDelete) {\r\n              mcqToDelete.remove();\r\n              db.saveDatabase();\r\n              resolve(true);\r\n          }\r\n          else {\r\n              console.log('nothing to delete');\r\n              reject(\"nothing to delete\");\r\n          }\r\n      })\r\n    }\r\n\r\n    initializeCollection = () => {\r\n      this.entities = db.getCollection('mcqs');\r\n      if(!this.entities) {\r\n          this.entities = db.addCollection('mcqs');\r\n      }\r\n      console.log('mcq entity initialized', this.entities.data.length);\r\n    }\r\n}\r\nexport default McqModel;\r\n"]}