{"version":3,"sources":["../../../src/Controllers/candidate/TestInviteController.js"],"names":["TestInviteController","GetAll","req","resp","console","log","user","model","InvitationModel","GetAllInvitations","then","res","status","json","catch","err","obj","message","send","GetInvitation","body","invitationId","AuthenticateCandidate","done","invitationModel","GetCandidateInfoByInvitationId","candidateInfo","userEntity","id","candidateId","emailId","candidateEmail","name","candidateName","role","users","UserRoles","candidate","newUser","UpdateInvite","inviteId","newEntity","invitation_meta","Update","entity","StartTest","invitationEntity","testModel","TestModel","mcqModel","McqModel","mcqResponseModel","McqResponseModel","invitationStatus","GetTest","testId","testEntity","GetByInvitationId","mcqResponseEntity","candidateRepo","createNewMcqResponseMeta","mcqResponseMeta","startNewTest","mcqResponse","RegisterForTest","invitees","invitationRepo","sendInvite","response","SendInvite","length","CaptureResponse","updatedRecord","getCurrentDateTime","finalStr","dt","Date","getFullYear","getMonth","getDate","h","getHours","m","getMinutes","SubmitAnswers","response_meta","completedOn","Constants","InvitationTestStatus","Completed","CandidateThanksMessage","EvaluateAnswers","responseId","GetMcqResponse","evaluator","Evaluator","Evaluate","evaluatedMcqResponse","updatedEntity"],"mappings":"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","file":"TestInviteController.js","sourcesContent":["// import db from '../../db';\r\nimport db from '../../db/mysqldb';\r\nimport AdminTestController from '../admin/AdminTestController';\r\n// import Constants from '../../commons/Constants';\r\nimport InvitationModel from '../../Models/InvitationModel';\r\nimport { EmailConfig, Constants } from '../../commons/ServerConfig';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\nimport CandidateModel from '../../Models/CandidateModel';\r\nimport TestModel from '../../Models/TestModel';\r\nimport McqModel from '../../Models/McqModel';\r\nimport McqResponseModel from '../../Models/McqResponseModel';\r\nimport Evaluator from '../../commons/Evaluator';\r\nimport users from '../../users';\r\nimport DbConfig from '../../commons/DbConfig';\r\nimport candidateRepo from './CandidateRepo';\r\nimport invitationRepo from './InvitationRepo';\r\n\r\nclass TestInviteController {\r\n\r\n    GetAll = (req, resp) => {\r\n        console.log('get all invitations called', req.user);\r\n        let model = new InvitationModel();\r\n        model.GetAllInvitations(req.user).then((res) => {\r\n            resp.status(200).json(res);\r\n        }).catch((err) => {\r\n            console.log('error occurred in get invitations', err);\r\n            var obj = { status: 500, message: err };\r\n            resp.status(500).send(obj);\r\n        });\r\n    }\r\n\r\n    GetInvitation = (req, resp) => {\r\n        console.log('get invitation called', req.body);\r\n        console.log(req.body.invitationId);\r\n        let model = new InvitationModel();\r\n        model.GetInvitation(req.body.invitationId).then((res) => {\r\n            resp.status(200).json(res);\r\n        }).catch((err) => {\r\n            var obj = { status: 500, message: err };\r\n            resp.status(500).send(obj);\r\n        });\r\n    }\r\n\r\n    AuthenticateCandidate = (req, resp, done) => {\r\n        console.log('authenticate candidate called');\r\n        console.log(req.body);\r\n        let { invitationId } = req.body;\r\n        let invitationModel = new InvitationModel();\r\n        invitationModel.GetCandidateInfoByInvitationId(invitationId)\r\n            .then((candidateInfo) => {\r\n                if (candidateInfo) {\r\n                    let userEntity = {\r\n                        id: candidateInfo.candidateId,\r\n                        emailId: candidateInfo.candidateEmail,\r\n                        name: candidateInfo.candidateName ? candidateInfo.candidateName : candidateInfo.candidateEmail,\r\n                        role: users.UserRoles.candidate\r\n                    };\r\n                    console.log('candidate found', userEntity);\r\n                    req.user = userEntity;\r\n                    done(null, userEntity);\r\n                }\r\n                else {\r\n                    console.log('unknown candidate login being attempted');\r\n\r\n                    const newUser = {\r\n                        emailId: emailId,\r\n                        status: 'not found',\r\n                        name: emailId,\r\n                        role: 'guest'\r\n                    }\r\n\r\n                    done(null, newUser);\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    UpdateInvite = (req, resp) => {\r\n        console.log('update invite called');\r\n        console.log(req.body);\r\n        let inviteId = req.body.id;\r\n        let newEntity = req.body.invitation_meta;\r\n        let model = new InvitationModel();\r\n        model.Update(req.body).then((entity) => {\r\n            resp.status(200).send(entity);\r\n        }).catch((err) => {\r\n            resp.status(500).send(err);\r\n        });\r\n    }\r\n\r\n    StartTest = async (req, resp) => {\r\n        console.log('start test called');\r\n        let { invitationId } = req.body;\r\n        console.log('req.body', req.body);\r\n\r\n        let invitationModel = new InvitationModel();\r\n        let invitationEntity = await invitationModel.GetInvitation(invitationId);\r\n        //.then((invitationEntity) => {\r\n        if (!invitationEntity) {\r\n            resp.status(404).json({\r\n                message: \"Not found\"\r\n            });\r\n        }\r\n        else {\r\n            let testModel = new TestModel();\r\n            let mcqModel = new McqModel();\r\n            let mcqResponseModel = new McqResponseModel();\r\n\r\n            let invitationStatus = invitationEntity.invitation_meta.status;\r\n            if (invitationStatus && invitationStatus === 'COMPLETED') {\r\n                resp.status(200).json({\r\n                    message: 'Response for this test is already submitted and the same has been shared with recruiter.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            let testEntity = await testModel.GetTest(invitationEntity.invitation_meta.testId);\r\n            let mcqResponseEntity = await mcqResponseModel.GetByInvitationId(invitationId);\r\n            if (mcqResponseEntity) {\r\n                console.log('existing mcq response returned');\r\n                resp.status(200).json(mcqResponseEntity);\r\n            }\r\n            else {\r\n                let mcqResponseMeta = await candidateRepo.createNewMcqResponseMeta(testEntity, invitationEntity);\r\n                let mcqResponse = await candidateRepo.startNewTest(invitationEntity, mcqResponseMeta);\r\n                if (mcqResponse) {\r\n                    resp.status(200).json(mcqResponse);\r\n                }\r\n                else {\r\n                    resp.status(500).json({ message: 'Error in loading Test' });\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    RegisterForTest = (req, resp) => {\r\n        console.log('RegisterForTest called');\r\n        let { testId } = req.body;\r\n        let invitees = [{\r\n            emailId: req.user.emailId,\r\n            name: req.user.name\r\n        }]\r\n\r\n        invitationRepo.sendInvite(req.user.id, invitees, testId)\r\n            .then(async () => {\r\n                let testModel = new TestModel();\r\n                let testEntity = await testModel.GetTest(testId);    \r\n                resp.status(200).json(testEntity);\r\n            })\r\n            .catch((err) => {\r\n                let response = { message: 'Error occured in register for test:' + err };\r\n                console.log(response);\r\n                resp.status(500).json(response);\r\n                return;\r\n            });\r\n    }\r\n\r\n    SendInvite = (req, resp) => {\r\n        console.log('send invite called');\r\n        console.log(req.body);\r\n        // let entity = req.body.invitation_meta;\r\n        let { testId, invitees } = req.body;\r\n        if(!invitees || (invitees && invitees.length === 0)) {\r\n            let response = { message: 'No invitees to send email to.' };\r\n            console.log(response);\r\n            resp.status(500).json(response);\r\n            return;\r\n        }\r\n\r\n        invitationRepo.sendInvite(req.user.id, invitees, testId)\r\n            .then(async () => {\r\n                let testModel = new TestModel();\r\n                let testEntity = await testModel.GetTest(testId);    \r\n                resp.status(200).json(testEntity);\r\n            })\r\n            .catch((err) => {\r\n                let response = { message: 'Error occured in sending invite:' + err };\r\n                console.log(response);\r\n                resp.status(500).json(response);\r\n                return;\r\n            });\r\n        // let invitationModel = new InvitationModel();\r\n        // let candidateModel = new CandidateModel();\r\n        // let testModel = new TestModel();\r\n        // let dbConfig = new DbConfig();\r\n\r\n        // let siteUrl = '';\r\n        // dbConfig.Initialize().then((KeyValues) => {\r\n        //     siteUrl = KeyValues ?\r\n        //         (KeyValues.site_url ? KeyValues.site_url : '') : '';\r\n        // })\r\n\r\n        // let emailIds = entity.emailTo.split(\";\");\r\n        /*if (emailIds && emailIds.length > 0) {\r\n            emailIds.map((emailId, index) => {\r\n                let candidateMeta = {\r\n                    name: entity.name,\r\n                    email: emailId\r\n                }\r\n                candidateModel.Add(candidateMeta).then((candidateId) => {\r\n                    testModel.GetTest(entity.testId).then((testEntity) => {\r\n                        let invitationEntity = {\r\n                            candidateId: candidateId,\r\n                            testId: testEntity.id,\r\n                            createdBy: req.user.id\r\n                        }\r\n                        invitationModel.Add(invitationEntity).then((invitationId) => {\r\n                            let emailInfo = {\r\n                                to: emailId,\r\n                                subject: entity.emailSubject,\r\n                                testName: testEntity.test_meta.testName,\r\n                                testDuration: testEntity.test_meta.duration,\r\n                                testLink: EmailConfig.getTestLink(dbConfig.KeyValues.site_url, invitationId),\r\n                                faqLink: EmailConfig.getFaqLink(dbConfig.KeyValues.site_url, dbConfig.KeyValues.faq_link),\r\n                                notificationType: 'test'\r\n                            };\r\n                            let emailHelper = new EmailHelper();\r\n                            emailHelper.SendEmail(emailInfo);\r\n                            resp.status(200).json(testEntity);\r\n                        })\r\n                    });\r\n                }).catch((err) => {\r\n                    resp.status(500).json({ message: 'error occured in sending invite:' + err });\r\n                });\r\n            });\r\n        }*/\r\n\r\n    }\r\n\r\n    CaptureResponse = (req, resp) => {\r\n        console.log('Capture response called');\r\n        console.log(req.body);\r\n        let entity = req.body;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        mcqResponseModel.Update(entity).then((updatedRecord) => {\r\n            console.log('Response captured');\r\n            resp.status(200).json(updatedRecord);\r\n        }).catch((err) => {\r\n            console.log('Exception occurred in Capturing response', err);\r\n            resp.status(500).json({ message: `Error in capturing response: ${err}` });\r\n        });\r\n    }\r\n\r\n    getCurrentDateTime = () => {\r\n        let finalStr = '';\r\n        let dt = new Date();\r\n        finalStr = `${dt.getFullYear()}-${dt.getMonth() + 1}-${dt.getDate()}`;\r\n        // finalStr += ` ${dt.getHours()}:${dt.getMinutes()}`;\r\n        let h = (dt.getHours() < 10 ? '0' : '') + dt.getHours(),\r\n            m = (dt.getMinutes() < 10 ? '0' : '') + dt.getMinutes();\r\n        finalStr += ` ${h}:${m}`;\r\n        return finalStr;\r\n    }\r\n\r\n    SubmitAnswers = (req, resp) => {\r\n        console.log('Submit answers called');\r\n        console.log(req.body);\r\n        let entity = req.body;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        let invitationModel = new InvitationModel();\r\n\r\n        mcqResponseModel.Update(entity).then((updatedRecord) => {\r\n            console.log('All Responses submitted');\r\n            invitationModel.GetInvitation(entity.response_meta.invitationId).then((invitationEntity) => {\r\n\r\n                invitationEntity.invitation_meta.completedOn = this.getCurrentDateTime();\r\n                invitationEntity.invitation_meta.status = Constants.InvitationTestStatus.Completed;\r\n                invitationModel.Update(invitationEntity).then((res) => {\r\n                    resp.status(200).json({ message: Constants.CandidateThanksMessage });\r\n                })\r\n            })\r\n        }).catch((err) => {\r\n            console.log('Exception occurred in submitting answers', err);\r\n            resp.status(500).json({ message: `Error in submitting answers: ${err}` });\r\n        });\r\n    }\r\n\r\n    EvaluateAnswers = (req, resp) => {\r\n        console.log('Evaluate answers called by', req.user);\r\n        console.log(req.body);\r\n        let responseId = req.body.responseId;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        mcqResponseModel.GetMcqResponse(responseId).then((mcqResponse) => {\r\n            let evaluator = new Evaluator();\r\n            evaluator.Evaluate(mcqResponse).then((evaluatedMcqResponse) => {\r\n                mcqResponseModel.Update(evaluatedMcqResponse).then((updatedEntity) => {\r\n                    console.log('Evaluation done');\r\n                    // this.GetAll(req, resp);\r\n\r\n                    let model = new InvitationModel();\r\n                    model.GetAllInvitations(req.user).then((res) => {\r\n                        resp.status(200).json(res);\r\n                    }).catch((err) => {\r\n                        console.log('error occurred in get invitations', err);\r\n                        var obj = { status: 500, message: err };\r\n                        resp.status(500).send(obj);\r\n                    });\r\n                }).catch((err) => {\r\n                    console.log('Error in evaluation: ', err);\r\n                    res.status(500).json({ message: 'Error in evaluation: ' + err });\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default new TestInviteController();"]}