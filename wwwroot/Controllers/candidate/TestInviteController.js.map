{"version":3,"sources":["../../../src/Controllers/candidate/TestInviteController.js"],"names":["TestInviteController","StartTest","req","resp","candidateEmailId","user","emailId","model","TestModel","testId","console","log","body","GetTestId","GetTestForSimulator","then","res","UpdateTestInvite","Constants","CandidateTestStatus","Started","status","json","message","data","catch","err","SendInvite","invitations","testName","test_link","generate_test_link","AdminTestController","UpdateTest","length","sentEmailIds","map","inviteInfo","index","includes","emailTo","emailInfo","to","subject","emailSubject","testLink","notificationType","emailHelper","EmailHelper","SendEmail","push","NotStarted","send","link","EmailConfig","testLinkPrefix","initializeCollection","tests","db","getCollection","addCollection"],"mappings":"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","file":"TestInviteController.js","sourcesContent":["import db from '../../db';\r\nimport AdminTestController from '../admin/AdminTestController';\r\nimport Constants from '../../commons/Constants';\r\nimport TestModel from '../../TestModel';\r\nimport { EmailConfig } from '../../commons/ServerConfig';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\n\r\nclass TestInviteController {\r\n\r\n    StartTest = (req, resp) => {\r\n        // let { testId, candidateEmailId } = req.body;\r\n        let candidateEmailId = req.user.emailId;\r\n        let model = new TestModel();\r\n        let testId = 0;\r\n        console.log('req.body', req.body);\r\n        if(req.body.testId) {\r\n            testId = req.body.testId;\r\n        }\r\n        else {\r\n            testId = model.GetTestId(candidateEmailId);\r\n        }\r\n        model.GetTestForSimulator(testId)\r\n                .then((res) => {\r\n                    model.UpdateTestInvite(res, candidateEmailId, Constants.CandidateTestStatus.Started);\r\n                    resp.status(200).json({\r\n                        message: 'success',\r\n                        data: res\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(`Error while loading testId: ${testId} , error: ${err}`);\r\n                    resp.status(404).json({\r\n                        message: err\r\n                    });\r\n                });\r\n    }\r\n    \r\n    SendInvite = (req, resp) => {\r\n        console.log('send invite called');\r\n        console.log(req.body);\r\n        let { invitations, testId, testName } = req.body;\r\n        let test_link = this.generate_test_link(testId);\r\n        AdminTestController.UpdateTest(testId, req.body, test_link);\r\n        if(invitations && invitations.length > 0) {\r\n            let sentEmailIds = [];\r\n            let model = new TestModel();\r\n            invitations.map((inviteInfo, index) => {\r\n                if(!sentEmailIds.includes(inviteInfo.emailTo)) {\r\n                    let emailInfo = {\r\n                        to: inviteInfo.emailTo,\r\n                        subject: inviteInfo.emailSubject,\r\n                        testName: testName,\r\n                        testLink: test_link,\r\n                        notificationType: 'test'\r\n                    };\r\n                    let emailHelper = new EmailHelper();\r\n                    emailHelper.SendEmail(emailInfo);\r\n                    sentEmailIds.push(inviteInfo.emailTo);\r\n\r\n                    model.UpdateTestInvite(testId, emailInfo.to, Constants.CandidateTestStatus.NotStarted);\r\n                }\r\n            })\r\n        }\r\n        resp.send('Email Sent');\r\n    }\r\n\r\n    generate_test_link = (testId) => {\r\n        let link = EmailConfig.testLinkPrefix + testId;\r\n        return link;\r\n    }\r\n\r\n    // UpdateTestInvite = (testEntity, candidateEmailId, testStatus) => {\r\n    //     // let tests = this.initializeCollection();\r\n    //     // let testEntity = this.GetTestToInvite(tests, testId);\r\n    //     if(testEntity !== null) {\r\n    //         let candidateInvite = this.GetCandidateInvite(testEntity, candidateEmailId);\r\n    //         if(candidateInvite !== null) {\r\n    //             candidateInvite.testStatus = testStatus;\r\n    //             tests.update(testEntity);\r\n    //             db.saveDatabase();\r\n    //             return testEntity;\r\n    //         }\r\n    //     }\r\n    //     return null;\r\n    // }\r\n\r\n    // GetCandidateInvite = (testEntity, candidateEmailId) => {\r\n    //     // let tests = this.initializeCollection();\r\n    //     if(testEntity && testEntity.invitations) {\r\n    //         let filteredCandidates = testEntity.invitations.where((item) => {\r\n    //             return item.emailTo == candidateEmailId;    \r\n    //         });\r\n    //         if(filteredCandidates && filteredCandidates.length > 0) {\r\n    //             return filteredCandidates[0];\r\n    //         }\r\n    //     }\r\n    //     return null;\r\n    // }\r\n\r\n    // GetTestToInvite = (tests, testId) => {\r\n    //     let filteredTests = tests.where((item) => {\r\n    //         return item['$loki'] == testId;    \r\n    //     });\r\n    //     if(filteredTests && filteredTests.length > 0) {\r\n    //         return filteredTests[0];\r\n    //     }\r\n    //     return null;\r\n    // }\r\n\r\n    initializeCollection = () => {\r\n        let tests = db.getCollection('tests');\r\n        if(!tests) {\r\n            tests = db.addCollection('tests');\r\n        }\r\n        return tests;\r\n    }\r\n\r\n}\r\n\r\nexport default new TestInviteController();"]}