{"version":3,"sources":["../../../src/Controllers/candidate/TestInviteController.js"],"names":["TestInviteController","GetAll","req","resp","console","log","user","model","InvitationModel","GetAllInvitations","then","res","status","json","catch","err","obj","message","send","GetInvitation","body","invitationId","AuthenticateCandidate","done","invitationModel","GetCandidateInfoByInvitationId","candidateInfo","userEntity","id","candidateId","emailId","candidateEmail","name","candidateName","role","users","UserRoles","candidate","newUser","UpdateInvite","inviteId","newEntity","invitation_meta","Update","entity","StartTest","invitationEntity","testModel","TestModel","mcqModel","McqModel","mcqResponseModel","McqResponseModel","GetTest","testId","testEntity","selectedMcqIds","test_meta","selectedMcqs","map","item","index","push","mcqId","GetMcqsByIds","mcqs","length","mcqResponseMeta","filteredMcq","filter","mcqItem","item_value","mcq","candidateResponse","responseKeys","GetByInvitationId","mcqResponseEntity","parseInt","response_meta","Add","responseId","updateInvitationEntity","Constants","InvitationTestStatus","Started","mcqResponse","SendInvite","candidateModel","CandidateModel","dbConfig","DbConfig","siteUrl","Initialize","KeyValues","site_url","emailIds","emailTo","split","candidateMeta","email","createdBy","emailInfo","to","subject","emailSubject","testName","testLink","EmailConfig","getTestLink","faqLink","getFaqLink","faq_link","notificationType","emailHelper","EmailHelper","SendEmail","CaptureResponse","updatedRecord","getCurrentDateTime","finalStr","dt","Date","getFullYear","getMonth","getDate","getHours","getMinutes","SubmitAnswers","completedOn","Completed","CandidateThanksMessage","EvaluateAnswers","GetMcqResponse","evaluator","Evaluator","Evaluate","evaluatedMcqResponse","updatedEntity"],"mappings":"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","file":"TestInviteController.js","sourcesContent":["// import db from '../../db';\r\nimport db from '../../db/mysqldb';\r\nimport AdminTestController from '../admin/AdminTestController';\r\n// import Constants from '../../commons/Constants';\r\nimport InvitationModel from '../../Models/InvitationModel';\r\nimport { EmailConfig, Constants } from '../../commons/ServerConfig';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\nimport CandidateModel from '../../Models/CandidateModel';\r\nimport TestModel from '../../Models/TestModel';\r\nimport McqModel from '../../Models/McqModel';\r\nimport McqResponseModel from '../../Models/McqResponseModel';\r\nimport Evaluator from '../../commons/Evaluator';\r\nimport users from '../../users';\r\nimport DbConfig from '../../commons/DbConfig';\r\n\r\nclass TestInviteController {\r\n    \r\n    GetAll = (req, resp) => {\r\n        console.log('get all invitations called', req.user);\r\n        let model = new InvitationModel();\r\n        model.GetAllInvitations(req.user).then((res) => {\r\n            resp.status(200).json(res);\r\n        }).catch((err) => {\r\n            console.log('error occurred in get invitations', err);\r\n            var obj = { status: 500, message: err };\r\n            resp.status(500).send(obj);\r\n        });\r\n    }\r\n\r\n    GetInvitation = (req, resp) => {\r\n        console.log('get invitation called', req.body);\r\n        console.log(req.body.invitationId);\r\n        let model = new InvitationModel();\r\n        model.GetInvitation(req.body.invitationId).then((res) => {\r\n            resp.status(200).json(res);\r\n        }).catch((err) => {\r\n            var obj = { status: 500, message: err };\r\n            resp.status(500).send(obj);\r\n        });\r\n    }\r\n\r\n    AuthenticateCandidate = (req, resp, done) => {\r\n        console.log('authenticate candidate called');\r\n        console.log(req.body);\r\n        let { invitationId } = req.body; \r\n        let invitationModel = new InvitationModel();\r\n        invitationModel.GetCandidateInfoByInvitationId(invitationId)\r\n                    .then((candidateInfo) => {\r\n                        if(candidateInfo) {\r\n                            let userEntity = {\r\n                                id: candidateInfo.candidateId,\r\n                                emailId: candidateInfo.candidateEmail,\r\n                                name: candidateInfo.candidateName ? candidateInfo.candidateName : candidateInfo.candidateEmail,\r\n                                role: users.UserRoles.candidate\r\n                            };\r\n                            console.log('candidate found', userEntity);\r\n                            req.user = userEntity;\r\n                            done(null, userEntity);\r\n                        }\r\n                        else {\r\n                            console.log('unknown candidate login being attempted');\r\n                            \r\n                            const newUser = {\r\n                                emailId: emailId,\r\n                                status: 'not found',\r\n                                name: emailId,\r\n                                role: 'guest'\r\n                            }\r\n                            \r\n                            done(null, newUser);\r\n                        }\r\n                    });\r\n\r\n    }\r\n\r\n    UpdateInvite = (req, resp) => {\r\n        console.log('update invite called');\r\n        console.log(req.body);\r\n        let inviteId = req.body.id;\r\n        let newEntity = req.body.invitation_meta;\r\n        let model = new InvitationModel();\r\n        model.Update(req.body).then((entity) => {\r\n            resp.status(200).send(entity);\r\n        }).catch((err) => {\r\n            resp.status(500).send(err);\r\n        });\r\n    }\r\n\r\n    StartTest = (req, resp) => {\r\n        console.log('start test called');\r\n        let { invitationId } = req.body;\r\n        console.log('req.body', req.body);\r\n\r\n        let invitationModel = new InvitationModel();\r\n        invitationModel.GetInvitation(invitationId).then((invitationEntity) => {\r\n            if(!invitationEntity){\r\n                resp.status(404).json({\r\n                    message: \"Not found\"\r\n                });\r\n            }\r\n            else {\r\n                let testModel = new TestModel();\r\n                let mcqModel = new McqModel();\r\n                let mcqResponseModel = new McqResponseModel();\r\n\r\n                testModel.GetTest(invitationEntity.invitation_meta.testId)\r\n                        .then((testEntity) => {\r\n                            let selectedMcqIds = [];\r\n                            console.log(`testEntity: ${testEntity.test_meta}`);\r\n                            testEntity.test_meta.selectedMcqs.map((item, index) => {\r\n                                selectedMcqIds.push(item.mcqId);\r\n                            });\r\n                            mcqModel.GetMcqsByIds(selectedMcqIds).then((mcqs) => {\r\n                                console.log(`get mcqs by id, length: ${mcqs.length}`);\r\n                                let mcqResponseMeta = {\r\n                                    testId: testEntity.id,\r\n                                    invitationId: invitationEntity.id,\r\n                                    mcqs: []\r\n                                };\r\n                                testEntity.test_meta.selectedMcqs.map((item, index) => {\r\n                                    let filteredMcq = mcqs.filter((mcqItem, index) => {\r\n                                        return mcqItem.id === item.mcqId;\r\n                                    });\r\n                                    if(filteredMcq && filteredMcq.length > 0) {\r\n                                        let item_value = filteredMcq[0];\r\n                                        // item_value = item_value.replace(/\\n/g, \"\\\\n\");\r\n                                        // item_value = item_value.replace(/\\r/g, \"\\\\r\");\r\n                                        // item_value = item_value.replace(/\\t/g, \"\\\\t\");\r\n                                        item.mcq = item_value;\r\n                                        // item.mcq = filteredMcq[0];\r\n                                        item.candidateResponse = {\r\n                                            responseKeys: []\r\n                                        }\r\n                                        mcqResponseMeta.mcqs.push(item);\r\n                                    }\r\n                                });\r\n                                console.log('getting invitation entity now', invitationId);\r\n                                mcqResponseModel.GetByInvitationId(invitationId)\r\n                                            .then((mcqResponseEntity) => {\r\n                                                if(mcqResponseEntity) {\r\n                                                    console.log('existing mcq response returned');\r\n                                                    resp.status(200).json(mcqResponseEntity);\r\n                                                }\r\n                                                else {\r\n                                                    mcqResponseEntity = {\r\n                                                        invitationId: parseInt(invitationId),\r\n                                                        response_meta: mcqResponseMeta\r\n                                                    }\r\n                                                        console.log('adding new mcq invitation on invitation: ', invitationId);\r\n                                                        // mcqResponseModel.Add(mcqResponseMeta).then((responseId) => {\r\n                                                        mcqResponseModel.Add(mcqResponseEntity).then((responseId) => {\r\n                                                        console.log('responseId', responseId);\r\n                                                        if(responseId > 0) {\r\n                                                            let updateInvitationEntity = {\r\n                                                                ...invitationEntity,\r\n                                                                status: Constants.InvitationTestStatus.Started \r\n                                                            }\r\n                                                            invitationModel.Update(updateInvitationEntity).then((res) => {\r\n                                                                let mcqResponse = {\r\n                                                                    id: responseId,\r\n                                                                    response_meta: mcqResponseMeta\r\n                                                                }\r\n                                                                resp.status(200).json(mcqResponse);\r\n                                                            });\r\n                                                        }\r\n                                                        else {\r\n                                                            console.log('Nothing inserted as response to table');\r\n                                                            resp.status(500).json({message: 'Error in loading response' });\r\n                                                        }\r\n                                                    }).catch((err) => {\r\n                                                            console.log('Exception in inserting response to table', err);\r\n                                                            resp.status(500).json({message: 'Error in adding response' })\r\n                                                    });\r\n                                                    \r\n                                                }\r\n                                            })\r\n\r\n                            })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(`Error while loading test, error: ${err}`);\r\n                            resp.status(404).json({\r\n                                message: err\r\n                            });\r\n                        });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    SendInvite = (req, resp) => {\r\n        console.log('send invite called');\r\n        console.log(req.body);\r\n        let entity = req.body.invitation_meta;\r\n        let invitationModel = new InvitationModel();\r\n        let candidateModel = new CandidateModel();\r\n        let testModel = new TestModel();\r\n        let dbConfig = new DbConfig();\r\n\r\n        let siteUrl = '';\r\n        dbConfig.Initialize().then((KeyValues) => {\r\n            siteUrl = KeyValues ? \r\n                    (KeyValues.site_url ? KeyValues.site_url : '') : '';\r\n        })\r\n        // let siteUrl = dbConfig.KeyValues ? \r\n        //                     (dbConfig.KeyValues.site_url ? dbConfig.KeyValues.site_url : '') : '';\r\n\r\n        let emailIds = entity.emailTo.split(\";\");\r\n        if(emailIds && emailIds.length > 0){\r\n            emailIds.map((emailId, index) => {\r\n                let candidateMeta = {\r\n                    name: entity.name,\r\n                    email: emailId\r\n                }\r\n                candidateModel.Add(candidateMeta).then((candidateId) => {\r\n                    testModel.GetTest(entity.testId).then((testEntity) => {\r\n                        let invitationEntity = {\r\n                            candidateId: candidateId, \r\n                            testId: testEntity.id,\r\n                            createdBy: req.user.id                            \r\n                        }\r\n                        invitationModel.Add(invitationEntity).then((invitationId) => {\r\n                            let emailInfo = {\r\n                                to: emailId,\r\n                                subject: entity.emailSubject,\r\n                                testName: testEntity.test_meta.testName,\r\n                                testLink: EmailConfig.getTestLink(dbConfig.KeyValues.site_url, invitationId),\r\n                                faqLink: EmailConfig.getFaqLink(dbConfig.KeyValues.site_url, dbConfig.KeyValues.faq_link),\r\n                                notificationType: 'test'\r\n                            };\r\n                            let emailHelper = new EmailHelper();\r\n                            emailHelper.SendEmail(emailInfo);\r\n                            resp.status(200).json(testEntity);\r\n                        })\r\n                    });        \r\n                }).catch((err) => {\r\n                    resp.status(500).json({message: 'error occured in sending invite:' + err});\r\n                });  \r\n            }); \r\n        }\r\n\r\n    }\r\n\r\n    CaptureResponse = (req, resp) => {\r\n        console.log('Capture response called');\r\n        console.log(req.body);\r\n        let entity = req.body;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        mcqResponseModel.Update(entity).then((updatedRecord) => {\r\n            console.log('Response captured');\r\n            resp.status(200).json(updatedRecord);\r\n        }).catch((err) => {\r\n            console.log('Exception occurred in Capturing response', err);\r\n            resp.status(500).json({message: `Error in capturing response: ${err}`});  \r\n        }); \r\n    }\r\n\r\n    getCurrentDateTime = () => {\r\n        let finalStr = '';\r\n        let dt = new Date();\r\n        finalStr = `${dt.getFullYear()}-${dt.getMonth()+1}-${dt.getDate()}`;\r\n        finalStr += ` ${dt.getHours()}:${dt.getMinutes()}`;\r\n        return finalStr; \r\n    }\r\n\r\n    SubmitAnswers = (req, resp) => {\r\n        console.log('Submit answers called');\r\n        console.log(req.body);\r\n        let entity = req.body;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        let invitationModel = new InvitationModel();\r\n        \r\n        mcqResponseModel.Update(entity).then((updatedRecord) => {\r\n            console.log('All Responses submitted');\r\n            invitationModel.GetInvitation(entity.response_meta.invitationId).then((invitationEntity) => {\r\n                \r\n                invitationEntity.invitation_meta.completedOn = this.getCurrentDateTime();\r\n                invitationEntity.invitation_meta.status = Constants.InvitationTestStatus.Completed; \r\n                invitationModel.Update(invitationEntity).then((res) => {\r\n                    resp.status(200).json({message: Constants.CandidateThanksMessage });\r\n                })\r\n            })\r\n        }).catch((err) => {\r\n            console.log('Exception occurred in submitting answers', err);\r\n            resp.status(500).json({message: `Error in submitting answers: ${err}`});  \r\n        }); \r\n    }\r\n\r\n    EvaluateAnswers = (req, resp) => {\r\n        console.log('Evaluate answers called by', req.user);\r\n        console.log(req.body);\r\n        let responseId = req.body.responseId;\r\n        let mcqResponseModel = new McqResponseModel();\r\n        mcqResponseModel.GetMcqResponse(responseId).then((mcqResponse) => {\r\n            let evaluator = new Evaluator();\r\n            evaluator.Evaluate(mcqResponse).then((evaluatedMcqResponse) => {\r\n                mcqResponseModel.Update(evaluatedMcqResponse).then((updatedEntity) => {\r\n                    console.log('Evaluation done');\r\n                    // this.GetAll(req, resp);\r\n\r\n                    let model = new InvitationModel();\r\n                    model.GetAllInvitations(req.user).then((res) => {\r\n                        resp.status(200).json(res);\r\n                    }).catch((err) => {\r\n                        console.log('error occurred in get invitations', err);\r\n                        var obj = { status: 500, message: err };\r\n                        resp.status(500).send(obj);\r\n                    });\r\n                }).catch((err) => {\r\n                    console.log('Error in evaluation: ', err);\r\n                    res.status(500).json({message: 'Error in evaluation: ' + err});\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default new TestInviteController();"]}