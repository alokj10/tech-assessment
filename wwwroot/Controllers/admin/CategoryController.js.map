{"version":3,"sources":["../../../src/Controllers/admin/CategoryController.js"],"names":["CategoryController","entityName","categories","GetAll","req","resp","console","log","initializeCollection","then","res","send","data","catch","err","obj","status","message","Add","body","db","insert","category_meta","JSON","stringify","Update","update","id","Delete","delete","promise","Promise","resolve","reject","getCollection","BaseController"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;AAHA;;;IAKMA,kB;;;;;;;;;;;;;;kNACFC,U,GAAa,Y,QACbC,U,GAAa,E,QAEbC,M,GAAS,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,2BAAZ;AACA;AACA,kBAAKC,oBAAL,GAA4BC,IAA5B,CAAiC,UAACC,GAAD,EAAS;AACtCJ,wBAAQC,GAAR,CAAY,aAAZ;AACAF,qBAAKM,IAAL,CAAU,MAAKT,UAAL,CAAgBU,IAA1B;AACH,aAHD,EAGGC,KAHH,CAGS,UAACC,GAAD,EAAS;AACd,oBAAIC,MAAM,EAAEC,QAAQ,GAAV,EAAeC,SAASH,GAAxB,EAAV;AACAT,qBAAKW,MAAL,CAAY,GAAZ,EAAiBL,IAAjB,CAAsBI,GAAtB;AACH,aAND;AAOA;;AAEA;AACH,S,QAEDG,G,GAAM,UAACd,GAAD,EAAMC,IAAN,EAAe;AACjBC,oBAAQC,GAAR,CAAY,qBAAZ;AACAD,oBAAQC,GAAR,CAAYH,IAAIe,IAAhB;AACAC,8BAAGC,MAAH,CAAU,MAAKpB,UAAf,EAA2BG,IAAIe,IAAJ,CAASG,aAApC;AACAjB,iBAAKM,IAAL,CAAUY,KAAKC,SAAL,CAAepB,IAAIe,IAAnB,CAAV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,S,QAEDM,M,GAAS,UAACrB,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,wBAAZ;AACAD,oBAAQC,GAAR,CAAYH,IAAIe,IAAhB;AACA;AACAC,8BAAGM,MAAH,CAAU,MAAKzB,UAAf,EAA2BG,IAAIe,IAAJ,CAASG,aAApC,EAAmDlB,IAAIe,IAAJ,CAASQ,EAA5D;AACAtB,iBAAKM,IAAL,CAAUY,KAAKC,SAAL,CAAepB,IAAIe,IAAnB,CAAV;AACC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACH,S,QAEDS,M,GAAS,UAACxB,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,wBAAZ;AACAD,oBAAQC,GAAR,CAAYH,IAAIe,IAAhB;AACAC,8BAAGS,MAAH,CAAU,MAAK5B,UAAf,EAA2BG,IAAIe,IAAJ,CAASQ,EAApC;AACAtB,iBAAKW,MAAL,CAAY,GAAZ,EAAiBL,IAAjB,CAAsB,SAAtB;AACH,S,QAUDH,oB,GAAuB,YAAM;AACzB,gBAAIsB,UAAU,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3Cb,kCAAGc,aAAH,CAAiB,MAAKjC,UAAtB,EACKQ,IADL,CACU,UAACC,GAAD,EAAS;AACX;AACA,0BAAKR,UAAL,GAAkBQ,GAAlB;AACAsB,4BAAQ,MAAK9B,UAAb;AACH,iBALL,EAKOW,KALP,CAKa,UAACC,GAAD,EAAS;AACdR,4BAAQC,GAAR,CAAY,kBAAZ,EAAgCO,GAAhC;AACAmB,2BAAOnB,GAAP;AACH,iBARL;AASH,aAVa,CAAd;AAWA,mBAAOgB,OAAP;AACH,S;;;AArBD;;;;;;;;;EAlF6BK,wB;;kBA0GlB,IAAInC,kBAAJ,E","file":"CategoryController.js","sourcesContent":["import BaseController from '../BaseController';\r\n// import db from '../../db';\r\nimport db from '../../db/mysqldb';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\nimport { DbConfig } from '../../commons/ServerConfig';\r\n\r\nclass CategoryController extends BaseController {\r\n    entityName = 'categories';\r\n    categories = {};\r\n\r\n    GetAll = (req, resp) => {\r\n        console.log('get all categories called');\r\n        // let categories = this.initializeCollection();\r\n        this.initializeCollection().then((res) => {\r\n            console.log('initialized');\r\n            resp.send(this.categories.data);\r\n        }).catch((err) => {\r\n            var obj = { status: 500, message: err };\r\n            resp.status(500).send(obj);\r\n        });\r\n        // console.log(this.categories.data.length);\r\n\r\n        //resp.send(categories.data);\r\n    }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Category called');\r\n        console.log(req.body);\r\n        db.insert(this.entityName, req.body.category_meta);\r\n        resp.send(JSON.stringify(req.body));\r\n        // let categories = this.initializeCollection();\r\n        // this.initializeCollection().then((res) => {\r\n        //     this.categories.insert(req.body);\r\n        //     // this.EmailSnapshot('CategoryAdd');\r\n        //     // db.saveDatabase(() => {\r\n        //     //     this.EmailSnapshot('CategoryAdd');\r\n        //     // });\r\n        //     resp.send(JSON.stringify(req.body));\r\n        // })\r\n\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update category called');\r\n        console.log(req.body);\r\n        // let categories = this.initializeCollection();\r\n        db.update(this.entityName, req.body.category_meta, req.body.id);\r\n        resp.send(JSON.stringify(req.body));\r\n         // this.initializeCollection((res) => {\r\n\r\n        //     this.categories.findById(req.body.id).then((res) => {\r\n        //         console.log('findbyid result', res);\r\n        //         if(res && res.length > 0){\r\n        //             let categoryToUpdate = res[0];\r\n        //             console.log('categoryToUpdate', categoryToUpdate);\r\n        //             categoryToUpdate.category_meta = req.body;\r\n        //             // categoryToUpdate.title = req.body.title;\r\n        //             // categoryToUpdate.description = req.body.description;\r\n        //             this.categories.update(categoryToUpdate, categoryToUpdate.id);\r\n        //             console.log(categoryToUpdate);\r\n        //         }\r\n        //         else {\r\n        //             console.log('nothing to update');\r\n        //         }\r\n        //         resp.send(JSON.stringify(req.body)); \r\n        //     });\r\n        //     // let categoryToUpdate = categories.find({ '$loki': req.body.$loki });\r\n            // if(categoryToUpdate && categoryToUpdate.length > 0) {\r\n            //     categoryToUpdate[0].title = req.body.title;\r\n            //     categoryToUpdate[0].description = req.body.description;\r\n            //     categories.update(categoryToUpdate[0], categoryToUpdate.id);\r\n            //     // categories.update(categoryToUpdate[0]);\r\n            // }\r\n            // else {\r\n            //     console.log('nothing to update');\r\n            // }\r\n            // console.log(categoryToUpdate);\r\n            // resp.send(JSON.stringify(req.body));\r\n        //})\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('delete category called');\r\n        console.log(req.body);\r\n        db.delete(this.entityName, req.body.id);\r\n        resp.status(200).send('success');\r\n    }\r\n\r\n    /*initializeCollection = () => {\r\n        let categories = db.getCollection('categories');\r\n        if(!categories) {\r\n            categories = db.addCollection('categories');\r\n        }\r\n        return categories;\r\n    }*/\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    // console.log('fetched all categories', res);\r\n                    this.categories = res;\r\n                    resolve(this.categories);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport default new CategoryController();"]}