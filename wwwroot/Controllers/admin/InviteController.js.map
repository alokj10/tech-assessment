{"version":3,"sources":["../../../src/Controllers/admin/InviteController.js"],"names":[],"mappings":"AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"InviteController.js","sourcesContent":["// import db from '../../db';\r\n\r\n// class InviteController {\r\n    \r\n//     SendInvite = (req, resp) => {\r\n//         console.log('send invite called');\r\n\r\n//         resp.send('Send invite');\r\n//     }\r\n\r\n//     GetAll = (req, resp) => {\r\n//         console.log('get all tests called');\r\n//         let tests = this.initializeCollection();\r\n//         console.log(tests.data.length);\r\n//         resp.send(tests.data);\r\n//     }\r\n\r\n//     GetTest = (req, resp) => {\r\n//         let testId = req.query.testId;\r\n//         console.log('get test called: ' + testId);\r\n//         let tests = this.initializeCollection();\r\n//         // let test = tests.findOne({ '$loki': testId });\r\n//         let filteredTests = tests.where((item) => {\r\n//             console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n//             return item['$loki'] == testId;    \r\n//         });\r\n\r\n//         console.log(filteredTests[0]);\r\n//         resp.send(filteredTests[0]);\r\n//     }\r\n\r\n//     Add = (req, resp) => {\r\n//         console.log('Add Test called');\r\n//         let tests = this.initializeCollection();\r\n//         let test = tests.insert(req.body);\r\n//         db.saveDatabase();\r\n//         console.log(test);\r\n//         resp.send(test);\r\n//     }\r\n\r\n//     Update = (req, resp) => {\r\n//         console.log('update test called');\r\n//         console.log(req.body);\r\n//         let tests = this.initializeCollection();\r\n//         let testId = req.body.$loki;\r\n//         let filteredTests = tests.where((item) => {\r\n//             console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n//             return item['$loki'] == testId;    \r\n//         });\r\n//         console.log(testId);\r\n//         if(filteredTests && filteredTests.length > 0) {\r\n//             let testToUpdate = filteredTests[0];\r\n//             let entityToUpdate = this.replaceEntity(testToUpdate, req.body);\r\n//             tests.update(entityToUpdate);\r\n//             db.saveDatabase();\r\n//             resp.send(entityToUpdate);\r\n//         }\r\n//         else {\r\n//             console.log('nothing to update');\r\n//             resp.send('nothing to update');\r\n//         }\r\n//     }\r\n\r\n//     Delete = (req, resp) => {\r\n//         console.log('delete test called');\r\n//         resp.send('delete test called');\r\n//     }\r\n\r\n//     initializeCollection = () => {\r\n//         let tests = db.getCollection('tests');\r\n//         if(!tests) {\r\n//             tests = db.addCollection('tests');\r\n//         }\r\n//         return tests;\r\n//     }\r\n\r\n//     replaceEntity = (oldEntity, newEntity) => {\r\n//         if(oldEntity != null){\r\n//             for (var property in newEntity) {\r\n//                 if (newEntity.hasOwnProperty(property) && property !== \"$loki\" && property !== 'meta') {\r\n//                     oldEntity[property] = newEntity[property];\r\n//                 }\r\n//             }\r\n//         }\r\n//         return oldEntity;\r\n//     }\r\n// }\r\n\r\n// export default new InviteController();"]}