{"version":3,"sources":["../../../src/Controllers/admin/AdminTestController.js"],"names":["AdminTestController","GetAll","req","resp","console","log","user","tests","initializeCollection","data","length","status","json","GetTest","testId","query","filteredTests","where","item","send","Add","test","insert","body","db","saveDatabase","Update","$loki","entity","UpdateTest","newEntity","test_link","testToUpdate","invitations","map","invitation","index","filteredInvitations","filter","id","emailTo","push","entityToUpdate","replaceEntity","update","Delete","getCollection","addCollection","oldEntity","property","hasOwnProperty"],"mappings":"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","file":"AdminTestController.js","sourcesContent":["import db from '../../db';\r\n\r\nclass AdminTestController {\r\n    GetAll = (req, resp) => {\r\n        console.log('get all tests called', req.user);\r\n        let tests = this.initializeCollection();\r\n        console.log(tests.data.length);\r\n        resp.status(200).json(tests.data);\r\n    }\r\n\r\n    GetTest = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get test called: ' + testId);\r\n        let tests = this.initializeCollection();\r\n        // let test = tests.findOne({ '$loki': testId });\r\n        let filteredTests = tests.where((item) => {\r\n            console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n            return item['$loki'] == testId;    \r\n        });\r\n\r\n        console.log(filteredTests[0]);\r\n        resp.send(filteredTests[0]);\r\n    }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Test called');\r\n        let tests = this.initializeCollection();\r\n        let test = tests.insert(req.body);\r\n        db.saveDatabase();\r\n        console.log(test);\r\n        resp.send(test);\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update test called');\r\n        console.log(req.body);\r\n        let testId = req.body.$loki;\r\n        let entity = this.UpdateTest(testId, req.body);\r\n        resp.send(entity);\r\n        \r\n        // let filteredTests = tests.where((item) => {\r\n        //     console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n        //     return item['$loki'] == testId;    \r\n        // });\r\n        // console.log(testId);\r\n        // if(filteredTests && filteredTests.length > 0) {\r\n        //     let testToUpdate = filteredTests[0];\r\n        //     let entityToUpdate = this.replaceEntity(testToUpdate, req.body);\r\n        //     tests.update(entityToUpdate);\r\n        //     db.saveDatabase();\r\n        //     resp.send(entityToUpdate);\r\n        // }\r\n        // else {\r\n        //     console.log('nothing to update');\r\n        //     resp.send('nothing to update');\r\n        // }\r\n    }\r\n\r\n    UpdateTest = (testId, newEntity, test_link) => {\r\n        let tests = this.initializeCollection();\r\n        let filteredTests = tests.where((item) => {\r\n            console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n            return item['$loki'] == testId;    \r\n        });\r\n        console.log(testId);\r\n        if(filteredTests && filteredTests.length > 0) {\r\n            let testToUpdate = filteredTests[0];\r\n            if(newEntity && newEntity.invitations && newEntity.invitations.length > 0) {\r\n                let invitations = [];\r\n                newEntity.invitations.map((invitation, index) => {\r\n                    let filteredInvitations = invitations.filter((item,id) => {\r\n                        return item.emailTo === invitation.emailTo;\r\n                    });\r\n                    if(filteredInvitations && filteredInvitations.length > 0) {\r\n                    } else {\r\n                        invitation.test_link = test_link;\r\n                        invitations.push(invitation);\r\n                    }\r\n                });\r\n                newEntity.invitations = [];\r\n                newEntity.invitations = invitations;\r\n            }\r\n            let entityToUpdate = this.replaceEntity(testToUpdate, newEntity);\r\n            tests.update(entityToUpdate);\r\n            db.saveDatabase();\r\n            return entityToUpdate;\r\n        }\r\n        else {\r\n            console.log('nothing to update');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('delete test called');\r\n        resp.send('delete test called');\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        let tests = db.getCollection('tests');\r\n        if(!tests) {\r\n            tests = db.addCollection('tests');\r\n        }\r\n        return tests;\r\n    }\r\n\r\n    replaceEntity = (oldEntity, newEntity) => {\r\n        if(oldEntity != null){\r\n            for (var property in newEntity) {\r\n                if (newEntity.hasOwnProperty(property) && property !== \"$loki\" && property !== 'meta') {\r\n                    oldEntity[property] = newEntity[property];\r\n                }\r\n            }\r\n        }\r\n        return oldEntity;\r\n    }\r\n}\r\n\r\nexport default new AdminTestController();"]}