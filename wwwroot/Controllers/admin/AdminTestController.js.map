{"version":3,"sources":["../../../src/Controllers/admin/AdminTestController.js"],"names":["AdminTestController","entityName","tests","GetAll","req","resp","console","log","user","model","TestModel","then","res","send","catch","err","obj","status","message","GetTest","testId","query","testModel","GetTestById","testEntity","GetMcqsByTestId","test_meta","selectedMcqs","selectedMcqIds","map","item","index","push","mcqId","mcqModel","McqModel","GetMcqsByIds","mcqs","GetCandidatesByTestId","candidates","length","Add","body","createdOn","Date","toLocaleDateString","createdBy","id","db","insert","Update","newEntity","entity","UpdateTest","test_link","invitations","invitation","filteredInvitations","filter","emailTo","update","Delete","initializeCollection","promise","Promise","resolve","reject","getCollection","replaceEntity","oldEntity","property","hasOwnProperty","BaseController"],"mappings":"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","file":"AdminTestController.js","sourcesContent":["// import db from '../../db';\r\nimport db from '../../db/mysqldb';\r\nimport BaseController from '../BaseController';\r\nimport TestModel from '../../Models/TestModel';\r\nimport InvitationModel from '../../Models/InvitationModel';\r\nimport McqModel from '../../Models/McqModel';\r\n\r\nclass AdminTestController extends BaseController {\r\n    entityName = 'tests';\r\n    tests = {};\r\n    \r\n    GetAll = (req, resp) => {\r\n        console.log('get all tests called', req.user);\r\n        let model = new TestModel();\r\n        model.GetAll(req.user)\r\n        // this.initializeCollection()\r\n            .then((res) => {\r\n                console.log('fetched tests');\r\n                resp.send(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in get all tests', err);\r\n                var obj = { status: 500, message: err };\r\n                resp.status(500).send(obj);\r\n            });\r\n    }\r\n\r\n    GetTest = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get test called: ' + testId);\r\n        \r\n        let testModel = new TestModel();\r\n        testModel.GetTestById(req.user, testId).then((testEntity) => {\r\n            resp.status(200).send(testEntity);\r\n        })\r\n        .catch((err) => {\r\n            console.log('error in get mcqs by test id');\r\n            console.log(err);\r\n            resp.status(500).send(err);\r\n        })\r\n        // db.findOne(this.entityName, testId).then((data) => {\r\n        //     resp.status(200).send(data);\r\n        // }).catch((err) => {\r\n        //     resp.status(500).send(err);\r\n        // })\r\n        \r\n    }\r\n\r\n    GetMcqsByTestId = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get mcqs by testid called: ', testId);\r\n\r\n        let testModel = new TestModel();\r\n        testModel.GetTest(testId).then((testEntity) => {\r\n            if(!testEntity.test_meta.selectedMcqs) {\r\n                resp.status(200).send([]);\r\n            }\r\n            else {\r\n                let selectedMcqIds = [];\r\n                testEntity.test_meta.selectedMcqs.map((item, index) => {\r\n                    selectedMcqIds.push(item.mcqId);\r\n                });\r\n                let mcqModel = new McqModel();\r\n                mcqModel.GetMcqsByIds(selectedMcqIds).then((mcqs) => {\r\n                    resp.status(200).send(mcqs);\r\n                }).catch((err) => {\r\n                    console.log('error in get mcqs by test id');\r\n                    console.log(err);\r\n                    resp.status(500).send(err);\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    GetCandidatesByTestId = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get candidates by testid called: ', testId);\r\n\r\n        let testModel = new TestModel();\r\n        testModel.GetCandidatesByTestId(testId).then((candidates) => {\r\n            if(!candidates) {\r\n                console.log('no candidates found');\r\n                resp.status(200).send([]);\r\n            }\r\n            else {\r\n                console.log('candidates found: ', candidates.length);\r\n                resp.status(200).send(candidates);\r\n            }\r\n        });\r\n    }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Test called');\r\n        console.log(req.body);\r\n        // let tests = this.initializeCollection();\r\n        // let test = tests.insert(req.body);\r\n        // db.saveDatabase(() => {\r\n        //     this.EmailSnapshot('CategoryAdd');\r\n        // });\r\n\r\n        let { test_meta } = req.body;\r\n        test_meta.createdOn = (new Date()).toLocaleDateString();\r\n        test_meta.createdBy = req.user.id ? req.user.id : '';\r\n        db.insert(this.entityName, req.body.test_meta);\r\n        resp.status(200).send('success');\r\n        // console.log(test);\r\n        // resp.send(test);\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update test called');\r\n        console.log(req.body);\r\n        // let testId = req.body.id;\r\n        // let testId = req.body.$loki;\r\n        // let entity = this.UpdateTest(testId, req.body.test_meta);\r\n        let testModel = new TestModel();\r\n        let newEntity = req.body;\r\n        \r\n        testModel.Update(newEntity).then((entity) => {\r\n            resp.status(200).send(entity);\r\n        }).catch((err) => {\r\n            resp.status(500).send(err);\r\n        });\r\n\r\n        \r\n        // let filteredTests = tests.where((item) => {\r\n        //     console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n        //     return item['$loki'] == testId;    \r\n        // });\r\n        // console.log(testId);\r\n        // if(filteredTests && filteredTests.length > 0) {\r\n        //     let testToUpdate = filteredTests[0];\r\n        //     let entityToUpdate = this.replaceEntity(testToUpdate, req.body);\r\n        //     tests.update(entityToUpdate);\r\n        //     db.saveDatabase();\r\n        //     resp.send(entityToUpdate);\r\n        // }\r\n        // else {\r\n        //     console.log('nothing to update');\r\n        //     resp.send('nothing to update');\r\n        // }\r\n    }\r\n\r\n    UpdateTest = (testId, newEntity, test_link) => {\r\n        // let tests = this.initializeCollection();\r\n        // let filteredTests = tests.where((item) => {\r\n        //     console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n        //     return item['$loki'] == testId;    \r\n        // });\r\n        console.log(testId);\r\n        // if(filteredTests && filteredTests.length > 0) {\r\n        //     let testToUpdate = filteredTests[0];\r\n            if(newEntity && newEntity.invitations && newEntity.invitations.length > 0) {\r\n                let invitations = [];\r\n                newEntity.invitations.map((invitation, index) => {\r\n                    let filteredInvitations = invitations.filter((item,id) => {\r\n                        return item.emailTo === invitation.emailTo;\r\n                    });\r\n                    if(filteredInvitations && filteredInvitations.length > 0) {\r\n                    } else {\r\n                        invitation.test_link = test_link;\r\n                        invitations.push(invitation);\r\n                    }\r\n                });\r\n                newEntity.invitations = [];\r\n                newEntity.invitations = invitations;\r\n            }\r\n            // let entityToUpdate = this.replaceEntity(testToUpdate, newEntity);\r\n            // tests.update(entityToUpdate);\r\n            // db.saveDatabase(() => {\r\n            //     this.EmailSnapshot('CategoryAdd');\r\n            // });\r\n            db.update(this.entityName, newEntity, testId);\r\n    \r\n            // return entityToUpdate;\r\n        // }\r\n        // else {\r\n        //     console.log('nothing to update');\r\n        //     return null;\r\n        // }\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('delete test called');\r\n        resp.send('delete test called');\r\n    }\r\n\r\n    // initializeCollection = () => {\r\n    //     let tests = db.getCollection('tests');\r\n    //     if(!tests) {\r\n    //         tests = db.addCollection('tests');\r\n    //     }\r\n    //     return tests;\r\n    // }\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.tests = res;\r\n                    resolve(this.tests);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    replaceEntity = (oldEntity, newEntity) => {\r\n        if(oldEntity != null){\r\n            for (var property in newEntity) {\r\n                if (newEntity.hasOwnProperty(property) && property !== \"$loki\" && property !== 'meta') {\r\n                    oldEntity[property] = newEntity[property];\r\n                }\r\n            }\r\n        }\r\n        return oldEntity;\r\n    }\r\n}\r\n\r\nexport default new AdminTestController();"]}