{"version":3,"sources":["../../../src/Controllers/admin/AdminTestController.js"],"names":["AdminTestController","entityName","tests","GetAll","req","resp","console","log","user","model","TestModel","then","res","send","catch","err","obj","status","message","GetMy","GetTest","testId","query","testModel","GetTestById","testEntity","GetTestsAvailableForMe","grade","GetMcqsByTestId","test_meta","selectedMcqs","selectedMcqIds","map","item","index","push","mcqId","questionOrderIndex","mcqModel","McqModel","GetMcqsByIds","mcqs","length","GetCandidatesByTestId","candidates","GetStudentsByTestId","students","Add","body","createdOn","createdBy","id","AddCustom","error","Update","newEntity","entity","UpdateTest","test_link","invitations","invitation","filteredInvitations","filter","emailTo","db","update","Delete","initializeCollection","promise","Promise","resolve","reject","getCollection","replaceEntity","oldEntity","property","hasOwnProperty","BaseController"],"mappings":"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","file":"AdminTestController.js","sourcesContent":["// import db from '../../db';\r\nimport db from '../../db/mysqldb';\r\nimport BaseController from '../BaseController';\r\nimport TestModel from '../../Models/TestModel';\r\nimport InvitationModel from '../../Models/InvitationModel';\r\nimport McqModel from '../../Models/McqModel';\r\nimport { getCurrentDateTime } from '../../commons/HelperFunctions';\r\n\r\nclass AdminTestController extends BaseController {\r\n    entityName = 'tests';\r\n    tests = {};\r\n    \r\n    GetAll = (req, resp) => {\r\n        console.log('get all tests called', req.user);\r\n        let model = new TestModel();\r\n        model.GetAll(req.user)\r\n            .then((res) => {\r\n                console.log('fetched tests');\r\n                resp.send(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in get all tests', err);\r\n                var obj = { status: 500, message: err };\r\n                resp.status(500).send(obj);\r\n            });\r\n    }\r\n\r\n    GetMy = (req, resp) => {\r\n        console.log('get my tests called', req.user);\r\n        let model = new TestModel();\r\n        model.GetMy(req.user)\r\n            .then((res) => {\r\n                console.log('fetched tests');\r\n                resp.send(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in get my tests', err);\r\n                var obj = { status: 500, message: err };\r\n                resp.status(500).send(obj);\r\n            });\r\n    }\r\n\r\n    GetTest = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get test called: ' + testId);\r\n        \r\n        let testModel = new TestModel();\r\n        testModel.GetTestById(req.user, testId).then((testEntity) => {\r\n            resp.status(200).send(testEntity);\r\n        })\r\n        .catch((err) => {\r\n            console.log('error in get mcqs by test id');\r\n            console.log(err);\r\n            resp.status(500).send(err);\r\n        })\r\n    }\r\n\r\n    GetTestsAvailableForMe = (req, resp) => {\r\n        console.log('GetTestsAvailableForMe called', req.user);\r\n        let model = new TestModel();\r\n        let grade = '6';\r\n        model.GetTestsAvailableForMe(req.user, grade)\r\n            .then((res) => {\r\n                console.log('fetched tests');\r\n                resp.send(res);\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in get my tests', err);\r\n                var obj = { status: 500, message: err };\r\n                resp.status(500).send(obj);\r\n            });\r\n    }\r\n\r\n    GetMcqsByTestId = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get mcqs by testid called: ', testId);\r\n\r\n        let testModel = new TestModel();\r\n        testModel.GetTest(testId).then((testEntity) => {\r\n            if(!testEntity.test_meta.selectedMcqs) {\r\n                resp.status(200).send([]);\r\n            }\r\n            else {\r\n                let selectedMcqIds = [];\r\n                testEntity.test_meta.selectedMcqs.map((item, index) => {\r\n                    selectedMcqIds.push({ mcqId: item.mcqId, questionOrderIndex: item.questionOrderIndex });\r\n                });\r\n                let mcqModel = new McqModel();\r\n                mcqModel.GetMcqsByIds(selectedMcqIds).then((mcqs) => {\r\n                    if(mcqs && mcqs.length === 0) {\r\n                        console.log('No MCQs found for selected MCQ Ids in Test');\r\n                    }\r\n                    resp.status(200).send(mcqs);\r\n                }).catch((err) => {\r\n                    console.log('error in get mcqs by test id');\r\n                    console.log(err);\r\n                    resp.status(500).send(err);\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    GetCandidatesByTestId = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get candidates by testid called: ', testId);\r\n\r\n        let testModel = new TestModel();\r\n        testModel.GetCandidatesByTestId(testId).then((candidates) => {\r\n            if(!candidates) {\r\n                console.log('no candidates found');\r\n                resp.status(200).send([]);\r\n            }\r\n            else {\r\n                console.log('candidates found: ', candidates.length);\r\n                resp.status(200).send(candidates);\r\n            }\r\n        });\r\n    }\r\n\r\n    GetStudentsByTestId = (req, resp) => {\r\n        let testId = req.query.testId;\r\n        console.log('get candidates by testid called: ', testId);\r\n\r\n        let testModel = new TestModel();\r\n        testModel.GetStudentsByTestId(testId).then((students) => {\r\n            if(!students) {\r\n                console.log('no students found');\r\n                resp.status(200).send([]);\r\n            }\r\n            else {\r\n                console.log('students found: ', students.length);\r\n                resp.status(200).send(students);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Add = (req, resp) => {\r\n    //     console.log('Add Test called');\r\n    //     console.log(req.body);\r\n    //     let { test_meta } = req.body;\r\n    //     test_meta.createdOn = (new Date()).toLocaleDateString();\r\n    //     test_meta.createdBy = req.user.id ? req.user.id : '';\r\n    //     db.insert(this.entityName, req.body.test_meta);\r\n    //     resp.status(200).send('success');\r\n    // }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Test called');\r\n        console.log(req.body);\r\n        let testEntity = req.body;\r\n        testEntity.test_meta.createdOn = getCurrentDateTime();\r\n        testEntity.test_meta.createdBy = req.user.id;\r\n        testEntity.test_meta.status = 'draft';\r\n        let testModel = new TestModel();\r\n        testModel.AddCustom(testEntity)\r\n                 .then((res) => {\r\n                    resp.status(200).send('success');\r\n                 })\r\n                 .catch((error) => {\r\n                    resp.status(500).send(error);         \r\n                 })\r\n        \r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update test called');\r\n        console.log(req.body);\r\n        let testModel = new TestModel();\r\n        let newEntity = req.body;\r\n        \r\n        testModel.Update(newEntity).then((entity) => {\r\n            resp.status(200).send(entity);\r\n        }).catch((err) => {\r\n            resp.status(500).send(err);\r\n        });\r\n\r\n    }\r\n\r\n    UpdateTest = (testId, newEntity, test_link) => {\r\n        console.log(testId);\r\n        if(newEntity && newEntity.invitations && newEntity.invitations.length > 0) {\r\n            let invitations = [];\r\n            newEntity.invitations.map((invitation, index) => {\r\n                let filteredInvitations = invitations.filter((item,id) => {\r\n                    return item.emailTo === invitation.emailTo;\r\n                });\r\n                if(filteredInvitations && filteredInvitations.length > 0) {\r\n                } else {\r\n                    invitation.test_link = test_link;\r\n                    invitations.push(invitation);\r\n                }\r\n            });\r\n            newEntity.invitations = [];\r\n            newEntity.invitations = invitations;\r\n        }\r\n        db.update(this.entityName, newEntity, testId);\r\n\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('delete test called');\r\n        resp.send('delete test called');\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.tests = res;\r\n                    resolve(this.tests);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    replaceEntity = (oldEntity, newEntity) => {\r\n        if(oldEntity != null){\r\n            for (var property in newEntity) {\r\n                if (newEntity.hasOwnProperty(property) && property !== \"$loki\" && property !== 'meta') {\r\n                    oldEntity[property] = newEntity[property];\r\n                }\r\n            }\r\n        }\r\n        return oldEntity;\r\n    }\r\n}\r\n\r\nexport default new AdminTestController();"]}