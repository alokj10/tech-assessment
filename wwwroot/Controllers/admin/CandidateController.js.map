{"version":3,"sources":["../../../src/Controllers/admin/CandidateController.js"],"names":["CandidateController","GetAll","req","resp","console","log","candidates","initializeCollection","data","length","send","Add","body","insert","db","saveDatabase","JSON","stringify","Update","candidateToUpdate","find","$loki","title","description","update","Delete","getCollection","addCollection"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;IAEMA,mB;;;;;SACFC,M,GAAS,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpBC,gBAAQC,GAAR,CAAY,2BAAZ;AACA,YAAIC,aAAa,MAAKC,oBAAL,EAAjB;AACAH,gBAAQC,GAAR,CAAYC,WAAWE,IAAX,CAAgBC,MAA5B;AACAN,aAAKO,IAAL,CAAUJ,WAAWE,IAArB;AACH,K;;SAEDG,G,GAAM,UAACT,GAAD,EAAMC,IAAN,EAAe;AACjBC,gBAAQC,GAAR,CAAY,sBAAZ;AACAD,gBAAQC,GAAR,CAAYH,IAAIU,IAAhB;AACA,YAAIN,aAAa,MAAKC,oBAAL,EAAjB;AACAD,mBAAWO,MAAX,CAAkBX,IAAIU,IAAtB;AACAE,qBAAGC,YAAH;AACAZ,aAAKO,IAAL,CAAUM,KAAKC,SAAL,CAAef,IAAIU,IAAnB,CAAV;AACH,K;;SAEDM,M,GAAS,UAAChB,GAAD,EAAMC,IAAN,EAAe;AACpBC,gBAAQC,GAAR,CAAY,yBAAZ;AACAD,gBAAQC,GAAR,CAAYH,IAAIU,IAAhB;AACA,YAAIN,aAAa,MAAKC,oBAAL,EAAjB;AACA,YAAIY,oBAAoBb,WAAWc,IAAX,CAAgB,EAAE,SAASlB,IAAIU,IAAJ,CAASS,KAApB,EAAhB,CAAxB;AACA,YAAGF,qBAAqBA,kBAAkBV,MAAlB,GAA2B,CAAnD,EAAsD;AAClDU,8BAAkB,CAAlB,EAAqBG,KAArB,GAA6BpB,IAAIU,IAAJ,CAASU,KAAtC;AACAH,8BAAkB,CAAlB,EAAqBI,WAArB,GAAmCrB,IAAIU,IAAJ,CAASW,WAA5C;AACAjB,uBAAWkB,MAAX,CAAkBL,kBAAkB,CAAlB,CAAlB;AACH,SAJD,MAKK;AACDf,oBAAQC,GAAR,CAAY,mBAAZ;AACH;AACDD,gBAAQC,GAAR,CAAYc,iBAAZ;AACAhB,aAAKO,IAAL,CAAUM,KAAKC,SAAL,CAAef,IAAIU,IAAnB,CAAV;AACH,K;;SAEDa,M,GAAS,UAACvB,GAAD,EAAMC,IAAN,EAAe;AACpBC,gBAAQC,GAAR,CAAY,2BAAZ;AACAF,aAAKO,IAAL,CAAU,2BAAV;AACH,K;;SAgCDH,oB,GAAuB,YAAM;AACzB,YAAID,aAAaQ,aAAGY,aAAH,CAAiB,YAAjB,CAAjB;AACA,YAAG,CAACpB,UAAJ,EAAgB;AACZA,yBAAaQ,aAAGa,aAAH,CAAiB,YAAjB,CAAb;AACH;AACD,eAAOrB,UAAP;AACH,K;;;AApCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;kBAWW,IAAIN,mBAAJ,E","file":"CandidateController.js","sourcesContent":["import db from '../../db';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\nimport { EmailConfig } from '../../commons/ServerConfig';\r\nimport AdminTestController from './AdminTestController';\r\n\r\nclass CandidateController {\r\n    GetAll = (req, resp) => {\r\n        console.log('get all candidates called');\r\n        let candidates = this.initializeCollection();\r\n        console.log(candidates.data.length);\r\n        resp.send(candidates.data);\r\n    }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Candidate called');\r\n        console.log(req.body);\r\n        let candidates = this.initializeCollection();\r\n        candidates.insert(req.body);\r\n        db.saveDatabase();\r\n        resp.send(JSON.stringify(req.body));\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update candidate called');\r\n        console.log(req.body);\r\n        let candidates = this.initializeCollection();\r\n        let candidateToUpdate = candidates.find({ '$loki': req.body.$loki });\r\n        if(candidateToUpdate && candidateToUpdate.length > 0) {\r\n            candidateToUpdate[0].title = req.body.title;\r\n            candidateToUpdate[0].description = req.body.description;\r\n            candidates.update(candidateToUpdate[0]);\r\n        }\r\n        else {\r\n            console.log('nothing to update');\r\n        }\r\n        console.log(candidateToUpdate);\r\n        resp.send(JSON.stringify(req.body));\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('get all candidates called');\r\n        resp.send('get all candidates called');\r\n    }\r\n\r\n    // SendInvite = (req, resp) => {\r\n    //     console.log('send invite called');\r\n    //     console.log(req.body);\r\n    //     let { invitations, testId, testName } = req.body;\r\n    //     let test_link = this.generate_test_link(testId);\r\n    //     AdminTestController.UpdateTest(testId, req.body, test_link);\r\n    //     if(invitations && invitations.length > 0) {\r\n    //         let sentEmailIds = [];\r\n    //         invitations.map((inviteInfo, index) => {\r\n    //             if(!sentEmailIds.includes(inviteInfo.emailTo)) {\r\n    //                 let emailInfo = {\r\n    //                     to: inviteInfo.emailTo,\r\n    //                     subject: inviteInfo.emailSubject,\r\n    //                     testName: testName,\r\n    //                     testLink: test_link\r\n    //                 };\r\n    //                 let emailHelper = new EmailHelper();\r\n    //                 emailHelper.SendEmail(emailInfo);\r\n    //                 sentEmailIds.push(inviteInfo.emailTo);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //     resp.send('Email Sent');\r\n    // }\r\n\r\n    // generate_test_link = (testId) => {\r\n    //     let link = EmailConfig.testLinkPrefix + testId;\r\n    //     return link;\r\n    // }\r\n\r\n    initializeCollection = () => {\r\n        let candidates = db.getCollection('candidates');\r\n        if(!candidates) {\r\n            candidates = db.addCollection('candidates');\r\n        }\r\n        return candidates;\r\n    }\r\n}\r\n\r\nexport default new CandidateController();"]}