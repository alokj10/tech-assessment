{"version":3,"sources":["../../../src/Controllers/admin/CandidateController.js"],"names":["CandidateController","GetAll","req","resp","console","log","candidates","initializeCollection","data","length","send","Add","body","insert","db","saveDatabase","EmailSnapshot","JSON","stringify","Update","candidateToUpdate","find","$loki","title","description","update","Delete","getCollection","addCollection","BaseController"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,mB;;;;;;;;;;;;;;oNACFC,M,GAAS,UAACC,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,2BAAZ;AACA,gBAAIC,aAAa,MAAKC,oBAAL,EAAjB;AACAH,oBAAQC,GAAR,CAAYC,WAAWE,IAAX,CAAgBC,MAA5B;AACAN,iBAAKO,IAAL,CAAUJ,WAAWE,IAArB;AACH,S,QAEDG,G,GAAM,UAACT,GAAD,EAAMC,IAAN,EAAe;AACjBC,oBAAQC,GAAR,CAAY,sBAAZ;AACAD,oBAAQC,GAAR,CAAYH,IAAIU,IAAhB;AACA,gBAAIN,aAAa,MAAKC,oBAAL,EAAjB;AACAD,uBAAWO,MAAX,CAAkBX,IAAIU,IAAtB;AACAE,yBAAGC,YAAH,CAAgB,YAAM;AAClB,sBAAKC,aAAL,CAAmB,aAAnB;AACH,aAFD;;AAIAb,iBAAKO,IAAL,CAAUO,KAAKC,SAAL,CAAehB,IAAIU,IAAnB,CAAV;AACH,S,QAEDO,M,GAAS,UAACjB,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,yBAAZ;AACAD,oBAAQC,GAAR,CAAYH,IAAIU,IAAhB;AACA,gBAAIN,aAAa,MAAKC,oBAAL,EAAjB;AACA,gBAAIa,oBAAoBd,WAAWe,IAAX,CAAgB,EAAE,SAASnB,IAAIU,IAAJ,CAASU,KAApB,EAAhB,CAAxB;AACA,gBAAGF,qBAAqBA,kBAAkBX,MAAlB,GAA2B,CAAnD,EAAsD;AAClDW,kCAAkB,CAAlB,EAAqBG,KAArB,GAA6BrB,IAAIU,IAAJ,CAASW,KAAtC;AACAH,kCAAkB,CAAlB,EAAqBI,WAArB,GAAmCtB,IAAIU,IAAJ,CAASY,WAA5C;AACAlB,2BAAWmB,MAAX,CAAkBL,kBAAkB,CAAlB,CAAlB;AACH,aAJD,MAKK;AACDhB,wBAAQC,GAAR,CAAY,mBAAZ;AACH;AACDD,oBAAQC,GAAR,CAAYe,iBAAZ;AACAjB,iBAAKO,IAAL,CAAUO,KAAKC,SAAL,CAAehB,IAAIU,IAAnB,CAAV;AACH,S,QAEDc,M,GAAS,UAACxB,GAAD,EAAMC,IAAN,EAAe;AACpBC,oBAAQC,GAAR,CAAY,2BAAZ;AACAF,iBAAKO,IAAL,CAAU,2BAAV;AACH,S,QAgCDH,oB,GAAuB,YAAM;AACzB,gBAAID,aAAaQ,aAAGa,aAAH,CAAiB,YAAjB,CAAjB;AACA,gBAAG,CAACrB,UAAJ,EAAgB;AACZA,6BAAaQ,aAAGc,aAAH,CAAiB,YAAjB,CAAb;AACH;AACD,mBAAOtB,UAAP;AACH,S;;;AApCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;EAtE8BuB,wB;;kBAiFnB,IAAI7B,mBAAJ,E","file":"CandidateController.js","sourcesContent":["import db from '../../db';\r\nimport EmailHelper from '../../commons/EmailHelper';\r\nimport { EmailConfig } from '../../commons/ServerConfig';\r\nimport AdminTestController from './AdminTestController';\r\nimport BaseController from '../BaseController';\r\n\r\nclass CandidateController extends BaseController {\r\n    GetAll = (req, resp) => {\r\n        console.log('get all candidates called');\r\n        let candidates = this.initializeCollection();\r\n        console.log(candidates.data.length);\r\n        resp.send(candidates.data);\r\n    }\r\n\r\n    Add = (req, resp) => {\r\n        console.log('Add Candidate called');\r\n        console.log(req.body);\r\n        let candidates = this.initializeCollection();\r\n        candidates.insert(req.body);\r\n        db.saveDatabase(() => {\r\n            this.EmailSnapshot('CategoryAdd');\r\n        });\r\n\r\n        resp.send(JSON.stringify(req.body));\r\n    }\r\n\r\n    Update = (req, resp) => {\r\n        console.log('update candidate called');\r\n        console.log(req.body);\r\n        let candidates = this.initializeCollection();\r\n        let candidateToUpdate = candidates.find({ '$loki': req.body.$loki });\r\n        if(candidateToUpdate && candidateToUpdate.length > 0) {\r\n            candidateToUpdate[0].title = req.body.title;\r\n            candidateToUpdate[0].description = req.body.description;\r\n            candidates.update(candidateToUpdate[0]);\r\n        }\r\n        else {\r\n            console.log('nothing to update');\r\n        }\r\n        console.log(candidateToUpdate);\r\n        resp.send(JSON.stringify(req.body));\r\n    }\r\n\r\n    Delete = (req, resp) => {\r\n        console.log('get all candidates called');\r\n        resp.send('get all candidates called');\r\n    }\r\n\r\n    // SendInvite = (req, resp) => {\r\n    //     console.log('send invite called');\r\n    //     console.log(req.body);\r\n    //     let { invitations, testId, testName } = req.body;\r\n    //     let test_link = this.generate_test_link(testId);\r\n    //     AdminTestController.UpdateTest(testId, req.body, test_link);\r\n    //     if(invitations && invitations.length > 0) {\r\n    //         let sentEmailIds = [];\r\n    //         invitations.map((inviteInfo, index) => {\r\n    //             if(!sentEmailIds.includes(inviteInfo.emailTo)) {\r\n    //                 let emailInfo = {\r\n    //                     to: inviteInfo.emailTo,\r\n    //                     subject: inviteInfo.emailSubject,\r\n    //                     testName: testName,\r\n    //                     testLink: test_link\r\n    //                 };\r\n    //                 let emailHelper = new EmailHelper();\r\n    //                 emailHelper.SendEmail(emailInfo);\r\n    //                 sentEmailIds.push(inviteInfo.emailTo);\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //     resp.send('Email Sent');\r\n    // }\r\n\r\n    // generate_test_link = (testId) => {\r\n    //     let link = EmailConfig.testLinkPrefix + testId;\r\n    //     return link;\r\n    // }\r\n\r\n    initializeCollection = () => {\r\n        let candidates = db.getCollection('candidates');\r\n        if(!candidates) {\r\n            candidates = db.addCollection('candidates');\r\n        }\r\n        return candidates;\r\n    }\r\n}\r\n\r\nexport default new CandidateController();"]}