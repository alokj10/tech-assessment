{"version":3,"sources":["../../src/Models/CandidateModel.js"],"names":["CandidateModel","entityName","entities","GetAll","userEntity","Promise","resolve","reject","initializeCollection","then","res","role","users","UserRoles","admin","console","log","data","length","GetCandidatesByUser","filteredCandidates","filter","item","index","candidate_meta","addedBy","emailId","GetCandidate","candidateId","db","findOne","GetCandidateByEmail","sql","queries","getCandidateByEmailQuery","executeQuery","Add","entity","insert","insertId","Update","update","id","promise","getCollection","catch","err"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;;;0JAHA;;;IAKMA,c;;;;;SACFC,U,GAAa,Y;SACbC,Q,GAAW,E;;SAEXC,M,GAAS,UAACC,UAAD,EAAgB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,kBAAKC,oBAAL,GAA4BC,IAA5B,CAAiC,UAACC,GAAD,EAAS;AACtC,oBAAGN,cAAcA,WAAWO,IAAX,KAAoBC,gBAAMC,SAAN,CAAgBC,KAArD,EAA4D;AACxDC,4BAAQC,GAAR,CAAY,MAAKd,QAAL,CAAce,IAAd,CAAmBC,MAA/B;AACAZ,4BAAQ,MAAKJ,QAAL,CAAce,IAAtB;AACH,iBAHD,MAIK;AACDX,4BAAQ,MAAKa,mBAAL,CAAyBf,UAAzB,CAAR;AACH;AACJ,aARD;AASH,SAVM,CAAP;AAWH,K;;SAEDe,mB,GAAsB,UAACf,UAAD,EAAgB;AAClC,YAAG,MAAKF,QAAL,CAAce,IAAd,IAAsB,MAAKf,QAAL,CAAce,IAAd,CAAmBC,MAAnB,GAA4B,CAAlD,IAAuDd,UAA1D,EAAsE;AAClE,gBAAIgB,qBAAqB,MAAKlB,QAAL,CAAce,IAAd,CAAmBI,MAAnB,CAA0B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChE,uBAAOD,KAAKE,cAAL,CAAoBC,OAApB,GAA8BrB,WAAWsB,OAAhD;AACH,aAFwB,CAAzB;AAGAX,oBAAQC,GAAR,CAAYI,mBAAmBF,MAA/B;AACA,mBAAOE,kBAAP;AACH;AACD,eAAO,EAAP;AACH,K;;SAEDO,Y,GAAe,UAACC,WAAD,EAAiB;AAC5B,eAAO,IAAIvB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCsB,8BAAGC,OAAH,CAAW,MAAK7B,UAAhB,EAA4B2B,WAA5B,EAAyCnB,IAAzC,CAA8C,UAACC,GAAD,EAAS;AACnDJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAEDqB,mB,GAAsB,UAACL,OAAD,EAAa;AAC/B,eAAO,IAAIrB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIyB,MAAMC,kBAAQC,wBAAR,CAAiCR,OAAjC,CAAV;AACAG,8BAAGM,YAAH,CAAgBH,GAAhB,EAAqBvB,IAArB,CAA0B,UAACC,GAAD,EAAS;AAC/BJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SALM,CAAP;AAMH,K;;SAED0B,G,GAAM,UAACC,MAAD,EAAY;AACd,eAAO,IAAIhC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCsB,8BAAGS,MAAH,CAAU,MAAKrC,UAAf,EAA2BoC,MAA3B,EAAmC5B,IAAnC,CAAwC,UAAC8B,QAAD,EAAc;AAClDjC,wBAAQiC,QAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAEDC,M,GAAS,UAACH,MAAD,EAAY;AACjB,eAAO,IAAIhC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCsB,8BAAGY,MAAH,CAAU,MAAKxC,UAAf,EAA2BoC,OAAOb,cAAlC,EAAkDa,OAAOK,EAAzD,EAA6DjC,IAA7D,CAAkE,UAACC,GAAD,EAAS;AACvEJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SASDF,oB,GAAuB,YAAM;AACzB,YAAImC,UAAU,IAAItC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3CsB,8BAAGe,aAAH,CAAiB,MAAK3C,UAAtB,EACKQ,IADL,CACU,UAACC,GAAD,EAAS;AACX,sBAAKR,QAAL,GAAgBQ,GAAhB;AACAJ,wBAAQ,MAAKJ,QAAb;AACH,aAJL,EAIO2C,KAJP,CAIa,UAACC,GAAD,EAAS;AACd/B,wBAAQC,GAAR,CAAY,kBAAZ,EAAgC8B,GAAhC;AACAvC,uBAAOuC,GAAP;AACH,aAPL;AAQH,SATa,CAAd;AAUA,eAAOH,OAAP;AACH,K;;;AAnBD;AACA;AACA;AACA;AACA;AACA;AACA;;;kBAeW3C,c","file":"CandidateModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\n\r\nclass CandidateModel {\r\n    entityName = 'candidates';\r\n    entities = {};\r\n    \r\n    GetAll = (userEntity) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    resolve(this.entities.data);\r\n                }\r\n                else {\r\n                    resolve(this.GetCandidatesByUser(userEntity));\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    GetCandidatesByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredCandidates = this.entities.data.filter((item, index) => {\r\n                return item.candidate_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredCandidates.length);\r\n            return filteredCandidates;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    GetCandidate = (candidateId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, candidateId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n    \r\n    GetCandidateByEmail = (emailId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getCandidateByEmailQuery(emailId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity).then((insertId) => {\r\n                resolve(insertId);\r\n            });\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.candidate_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    // initializeCollection = () => {\r\n    //     this.entities = db.getCollection('tests');\r\n    //     if(!this.entities) {\r\n    //         this.entities = db.addCollection('tests');\r\n    //     }\r\n    //     console.log('tests entity initialized', this.entities.data.length);\r\n    // }\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default CandidateModel;"]}