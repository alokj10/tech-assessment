{"version":3,"sources":["../../src/Models/UserModel.js"],"names":["UserModel","entityName","entities","GetAll","userEntity","queryConfig","VIEW_USERS","db","GetUser","userId","Promise","resolve","reject","findOne","then","res","GetUserByEmail","emailId","sql","queries","getUserByEmailIdQuery","executeQuery","CheckUserCredentials","password","checkUserCredentials","length","userRow","console","log","compareResult","catch","err","ChangePassword","currentPassword","currentUser","newPassword","id","Add","entity","insert","insertId","CreateCandidateOrStudent","AddCustom","insertCustom","userToAdd","user_meta","role","candidate","student","candidateModel","CandidateModel","candEntity","candidate_meta","name","email","user_id","AddCandidate","Update","modifiedOn","Date","toLocaleDateString","update","UpdateCustom","updateCustom","Delete","delete","VerifyUser","userIv","userContent","SendVerificationEmail","dbConfig","DbConfig","Initialize","KeyValues","siteUrl","site_url","userDetail","encryptedObject","verificationLink","EmailConfig","getVerificationLink","emailInfo","to","subject","user_name","verification_link","notificationType","emailHelper","EmailHelper","SendEmail","entityToUpdate","emailStatus"],"mappings":"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","file":"UserModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\n\r\nimport { candidate, GetQueryConfig, \r\n    HandlePromise, \r\n    student} from '../commons/RoleDefinitions';\r\nimport { VIEW_USERS } from '../commons/RoleBasedQueries/UserQueries';\r\nimport { getSiteUrl, encrypt, decrypt,\r\n    comparePasswordHash, \r\n    createPasswordHash} from '../utils/general';\r\nimport EmailHelper from '../commons/EmailHelper';\r\nimport { EmailConfig } from '../commons/ServerConfig';\r\nimport { getCurrentDateTime } from '../commons/HelperFunctions';\r\nimport DbConfig from '../commons/DbConfig';\r\nimport CandidateModel from './CandidateModel';\r\n\r\nclass UserModel {\r\n    entityName = 'users';\r\n    entities = {};\r\n    \r\n    constructor() {\r\n    }\r\n    \r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_USERS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n\r\n    GetUser = (userId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, userId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    GetUserByEmail = (emailId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getUserByEmailIdQuery(emailId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    CheckUserCredentials = (emailId, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.checkUserCredentials(emailId);\r\n            db.executeQuery(sql).then((res) => {\r\n                if(res && res.length > 0) {\r\n                    let userRow = res[0];\r\n                    console.log('userRow', userRow);\r\n                    let compareResult = comparePasswordHash(password, userRow.password);\r\n                    console.log('compareResult', compareResult);\r\n                    if(compareResult) {\r\n                        resolve(res[0]);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }\r\n                else {\r\n                    resolve(null);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        })\r\n    }\r\n\r\n    ChangePassword = (currentPassword, password, userEntity) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            let currentUser = await this.CheckUserCredentials(userEntity.emailId, currentPassword);\r\n            if(currentUser) {\r\n                let newPassword = createPasswordHash(password);\r\n                let sql = `update ta_users set password = '${newPassword}' where id = ${userEntity.id}`;\r\n                db.executeQuery(sql)\r\n                    .then((res) => {\r\n                        resolve(true);\r\n                    })\r\n            }\r\n            else {\r\n                reject('Current password is invalid');\r\n            }\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity)\r\n                .then(async (insertId) => {\r\n                    if(insertId) {\r\n                        await this.CreateCandidateOrStudent(insertId);\r\n                        resolve(insertId);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n        });\r\n    }\r\n\r\n    AddCustom = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insertCustom(this.entityName, entity)\r\n                .then(async (insertId) => {\r\n                    if(insertId) {\r\n                        await this.CreateCandidateOrStudent(insertId);\r\n                        resolve(insertId);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n        });\r\n    }\r\n\r\n    CreateCandidateOrStudent = async (userId) => {\r\n        let userToAdd = await this.GetUser(userId);\r\n        if(userToAdd.user_meta.role === candidate || userToAdd.user_meta.role === student) {\r\n            let candidateModel = new CandidateModel();\r\n            let candEntity = {\r\n                candidate_meta : {\r\n                    name: userToAdd.user_meta.name,\r\n                    email: userToAdd.user_meta.emailId\r\n                },\r\n                user_id: userId\r\n            }\r\n            await candidateModel.AddCandidate(candEntity);\r\n        }\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.user_meta.modifiedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.user_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    UpdateCustom = (entity) => {\r\n        entity.user_meta.modifiedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.updateCustom(this.entityName, entity, entity.id)\r\n            .then((res) => {\r\n                resolve(res);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    Delete = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, entity.id);\r\n            resolve(entity.user_meta);\r\n        });\r\n    }\r\n\r\n    VerifyUser = async (userIv, userContent) => {\r\n        let userId = decrypt(userIv, userContent);\r\n        console.log('decryption result: ', userId);\r\n        if(userId) {\r\n            let userEntity = await this.GetUser(userId);\r\n            return userEntity;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    SendVerificationEmail = async (userId) => {\r\n        let dbConfig = new DbConfig();\r\n        let KeyValues = await dbConfig.Initialize();\r\n        let siteUrl = KeyValues ? (KeyValues.site_url ? KeyValues.site_url : '') : '';\r\n        let userEntity = await this.GetUser(userId);\r\n        let userDetail = {\r\n            userId: userId, \r\n            email: userEntity.user_meta.emailId,\r\n            name: userEntity.user_meta.name\r\n        }\r\n        let encryptedObject = encrypt(`${userDetail.userId}`); \r\n        console.log('encryptedObject in model: ', encryptedObject);\r\n        let verificationLink = EmailConfig.getVerificationLink(siteUrl, encryptedObject);\r\n        console.log('verification link: ', verificationLink);\r\n        let emailInfo = {\r\n            to: userDetail.email,\r\n            subject: `Welcome - Verify user email`,\r\n            user_name: userEntity.user_meta.name,\r\n            verification_link: verificationLink,\r\n            notificationType: 'verify_user_email'\r\n        };\r\n        let emailHelper = new EmailHelper();\r\n        emailHelper.SendEmail(emailInfo)\r\n                .then(() => {\r\n                    let entityToUpdate = {...userEntity};\r\n                    entityToUpdate.user_meta.emailStatus = `Verification Email Sent on ${getCurrentDateTime()}`;\r\n                    this.Update(entityToUpdate);\r\n                })\r\n                .catch((err) => {\r\n                    let entityToUpdate = {...userEntity};\r\n                    entityToUpdate.user_meta.emailStatus = `Email Sending Failed`;\r\n                    this.Update(entityToUpdate);\r\n                })\r\n    }\r\n\r\n    /*initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }*/\r\n}\r\nexport default UserModel;"]}