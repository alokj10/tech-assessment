{"version":3,"sources":["../../src/Models/UserModel.js"],"names":["UserModel","entityName","entities","GetAll","userEntity","queryConfig","VIEW_USERS","db","GetUser","userId","Promise","resolve","reject","findOne","then","res","GetUserByEmail","emailId","sql","queries","getUserByEmailIdQuery","executeQuery","Add","entity","insert","insertId","catch","err","Update","user_meta","modifiedOn","Date","toLocaleDateString","update","id","Delete","delete"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;0JALA;;;IASMA,S;;AAsDF;;;;;;;;;;;;;;;;;;SArDAC,U,GAAa,O;SACbC,Q,GAAW,E;;SAGXC,M,GAAS,UAACC,UAAD,EAAgB;AACrB,YAAIC,cAAc,qCAAeC,2BAAf,CAAlB;AACA,eAAO,oCAAcC,iBAAd,EAAkBF,WAAlB,EAA+BD,UAA/B,CAAP;AACH,K;;SAEDI,O,GAAU,UAACC,MAAD,EAAY;AAClB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAGM,OAAH,CAAW,MAAKZ,UAAhB,EAA4BQ,MAA5B,EAAoCK,IAApC,CAAyC,UAACC,GAAD,EAAS;AAC9CJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAEDC,c,GAAiB,UAACC,OAAD,EAAa;AAC1B,eAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIM,MAAMC,kBAAQC,qBAAR,CAA8BH,OAA9B,CAAV;AACAV,8BAAGc,YAAH,CAAgBH,GAAhB,EAAqBJ,IAArB,CAA0B,UAACC,GAAD,EAAS;AAC/BJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SALM,CAAP;AAMH,K;;SAEDO,G,GAAM,UAACC,MAAD,EAAY;AACd,eAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAGiB,MAAH,CAAU,MAAKvB,UAAf,EAA2BsB,MAA3B,EAAmCT,IAAnC,CAAwC,UAACW,QAAD,EAAc;AAClDd,wBAAQc,QAAR;AACH,aAFD,EAGCC,KAHD,CAGO,UAACC,GAAD,EAAS;AACZf,uBAAOe,GAAP;AACH,aALD;AAMH,SAPM,CAAP;AAQH,K;;SAEDC,M,GAAS,UAACL,MAAD,EAAY;AACjBA,eAAOM,SAAP,CAAiBC,UAAjB,GAA+B,IAAIC,IAAJ,EAAD,CAAaC,kBAAb,EAA9B;AACA,eAAO,IAAItB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAG0B,MAAH,CAAU,MAAKhC,UAAf,EAA2BsB,OAAOM,SAAlC,EAA6CN,OAAOW,EAApD,EAAwDpB,IAAxD,CAA6D,UAACC,GAAD,EAAS;AAClEJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAEDoB,M,GAAS,UAACZ,MAAD,EAAY;AACjB,eAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAG6B,MAAH,CAAU,MAAKnC,UAAf,EAA2BsB,OAAOW,EAAlC;AACAvB,oBAAQY,OAAOM,SAAf;AACH,SAHM,CAAP;AAIH,K;;;kBAgBU7B,S","file":"UserModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\n\r\nimport { GetQueryConfig, \r\n    HandlePromise,    \r\n    VIEW_USERS } from '../commons/RoleDefinitions';\r\n\r\nclass UserModel {\r\n    entityName = 'users';\r\n    entities = {};\r\n    \r\n    \r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_USERS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n\r\n    GetUser = (userId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, userId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    GetUserByEmail = (emailId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getUserByEmailIdQuery(emailId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity).then((insertId) => {\r\n                resolve(insertId);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.user_meta.modifiedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.user_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    Delete = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, entity.id);\r\n            resolve(entity.user_meta);\r\n        });\r\n    }\r\n\r\n    /*initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }*/\r\n}\r\nexport default UserModel;"]}