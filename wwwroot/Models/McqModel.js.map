{"version":3,"sources":["../../src/Models/McqModel.js"],"names":["McqModel","entityName","entities","entityModel","dbObject","model","id","mcq_meta","author","addedBy","category","choices","correctAnswer","description","minimumExperience","maximumExperience","question","score","skill","GetAll","userEntity","queryConfig","VIEW_MCQS","db","GetMcqsBySkill","VIEW_MCQS_BY_SKILL","GetMcqsByGrade","grade","VIEW_MCQS_BY_GRADE","BulkAddMcq","jsonData","Promise","resolve","reject","mcqs","length","map","item","index","Add","then","res","console","log","catch","error","entity","correctOptions","indexOf","choice","chIndex","isCorrect","key","content","replace","mcqEntity","createdBy","insertCustom","insertId","err","GetMcqByDescription","VIEW_MCQS_BY_DESCRIPTION","AddAcademicMcq","subject","GetMcqsByIds","selectedMcqs","mcqIds","forEach","selectedMcq","push","mcqId","getByIds","mcqsWithIndex","mcqItem","matchingSelectedMcq","filter","smItem","questionOrderIndex","GetMcqsByMcqIds","GetMcqById","findOne","Update","update","DeleteByIds","deleteByIds","DeleteById","delete","Delete","initializeCollection","promise","getCollection"],"mappings":"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","file":"McqModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\n\r\nimport {\r\n    GetQueryConfig,\r\n    HandlePromise,\r\n    HandlePromiseWithParams\r\n} from '../commons/RoleDefinitions';\r\nimport { VIEW_MCQS, VIEW_MCQS_BY_DESCRIPTION, VIEW_MCQS_BY_SKILL,\r\n    VIEW_MCQS_BY_GRADE } from '../commons/RoleBasedQueries/McqQueries';\r\n\r\n\r\nclass McqModel {\r\n    entityName = 'mcq';\r\n    entities = {};\r\n    entityModel = (dbObject) => {\r\n        let model = {\r\n            // id: dbObject['$loki'],\r\n            id: dbObject.id,\r\n            mcq_meta: {\r\n                author: dbObject.mcq_meta.addedBy,\r\n                category: dbObject.mcq_meta.category,\r\n                choices: dbObject.mcq_meta.choices,\r\n                correctAnswer: dbObject.mcq_meta.correctAnswer,\r\n                description: dbObject.mcq_meta.description,\r\n                minimumExperience: dbObject.mcq_meta.minimumExperience,\r\n                maximumExperience: dbObject.mcq_meta.maximumExperience,\r\n                question: dbObject.mcq_meta.question,\r\n                score: dbObject.mcq_meta.score,\r\n                skill: dbObject.mcq_meta.skill\r\n            }\r\n        };\r\n        // dbObject.mcq_meta.choices.map((choice, index) => {\r\n        //     model.mcq_meta.choices.push(choice);\r\n        // });\r\n        return model;\r\n    };\r\n\r\n    constructor() {\r\n        //this.initializeCollection();\r\n    }\r\n\r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n            \r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    let entityModelCollection = [];\r\n                    console.log('entities',this.entities);\r\n                    this.entities.data.map((mcq, index) => {\r\n                        let entityModel = this.entityModel(mcq);\r\n                        entityModelCollection.push(entityModel);\r\n                    });\r\n                    resolve(entityModelCollection);\r\n                }\r\n                else {\r\n                    resolve(this.GetMcqsByUser(userEntity));\r\n                }\r\n            });\r\n        })*/\r\n    }\r\n\r\n    GetMcqsBySkill = (userEntity, skill) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS_BY_SKILL);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity: userEntity, skill: skill });\r\n    }\r\n\r\n    GetMcqsByGrade = (userEntity, grade) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS_BY_GRADE);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity: userEntity, grade: grade });\r\n    }\r\n    /*GetMcqsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredMcqs = this.entities.data.filter((item, index) => {\r\n                return item.mcq_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredMcqs.length);\r\n            let entityModelCollection = [];\r\n            filteredMcqs.map((mcq, index) => {\r\n                let entityModel = this.entityModel(mcq);\r\n                entityModelCollection.push(entityModel);\r\n            });\r\n            return entityModelCollection;\r\n        }\r\n        return [];\r\n    }*/\r\n\r\n    BulkAddMcq = (jsonData) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqs = jsonData.mcqs;\r\n            if (mcqs && mcqs.length > 0) {\r\n                mcqs.map((item, index) => {\r\n                    item.mcq_meta.addedBy = jsonData.addedBy;\r\n                    this.Add(item.mcq_meta)\r\n                        .then((res) => {\r\n                            console.log('mcq added');\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('mcq add failed: ' + error);\r\n                        });\r\n                })\r\n            }\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('mcq insert called');\r\n            let correctOptions = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n            if (entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n                if (entity.choices && entity.choices.length > 0) {\r\n                    entity.choices.map((choice, chIndex) => {\r\n                        if (chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n                            choice.isCorrect = true;\r\n                        }\r\n                        else {\r\n                            choice.isCorrect = false;\r\n                        }\r\n                        if (!choice.key) {\r\n                            choice.key = correctOptions[chIndex];\r\n                        }\r\n                        if(choice.content && choice.content.indexOf('\"')) {\r\n                            console.log('escaping double quotes from choice content');\r\n                            choice.content = choice.content.replace(/\\\"/g, '<doublequotes>');\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            if(entity.description && entity.description.indexOf('\"') > -1) {\r\n                console.log('escaping double quotes');\r\n                entity.description = entity.description.replace(/\\\"/g, '<doublequotes>');\r\n            }\r\n            if (entity.choices && entity.choices.length > 0) {\r\n                entity.choices.map((choice, chIndex) => {\r\n                    console.log(`choice ${chIndex}: ${choice.content}`);\r\n                    console.log(`choice type ${typeof choice}`);\r\n                    if(choice.content && choice.content.indexOf('\"') > -1) {\r\n                        console.log('escaping double quotes from choice content');\r\n                        choice.content = choice.content.replace(/\\\"/g, '<doublequotes>');\r\n                    }\r\n                })\r\n            }\r\n            let mcqEntity = {\r\n                mcq_meta: entity,\r\n                skill: entity.skill,\r\n                category: entity.category,\r\n                addedBy: entity.createdBy\r\n            }\r\n            //return;\r\n            //   db.insert(this.entityName, entity)\r\n            db.insertCustom(this.entityName, mcqEntity)\r\n                .then((insertId) => {\r\n                    resolve(insertId);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n\r\n        });\r\n    }\r\n\r\n    GetMcqByDescription = (userEntity, description) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS_BY_DESCRIPTION);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity: userEntity, description: description });\r\n    }\r\n\r\n    AddAcademicMcq = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('mcq insert called');\r\n            let correctOptions = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n            if (entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n                if (entity.choices && entity.choices.length > 0) {\r\n                    entity.choices.map((choice, chIndex) => {\r\n                        if (chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n                            choice.isCorrect = true;\r\n                        }\r\n                        else {\r\n                            choice.isCorrect = false;\r\n                        }\r\n                        if (!choice.key) {\r\n                            choice.key = correctOptions[chIndex];\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            let mcqEntity = {\r\n                mcq_meta: entity,\r\n                grade: entity.grade,\r\n                subject: entity.subject,\r\n                category: entity.category,\r\n                addedBy: entity.createdBy\r\n            }\r\n\r\n            //   db.insert(this.entityName, entity)\r\n            db.insertCustom(this.entityName, mcqEntity)\r\n                .then((insertId) => {\r\n                    resolve(insertId);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n\r\n        });\r\n    }\r\n\r\n    GetMcqsByIds = (selectedMcqs) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqIds = [];\r\n            selectedMcqs.forEach((selectedMcq) => {\r\n                mcqIds.push(selectedMcq.mcqId);\r\n            })\r\n            db.getByIds(this.entityName, mcqIds).then((mcqs) => {\r\n                let mcqsWithIndex = [];\r\n                if (mcqs && mcqs.length > 0) {\r\n                    mcqs.map((mcqItem) => {\r\n                        let matchingSelectedMcq = selectedMcqs.filter((smItem) => {\r\n                            return smItem.mcqId === mcqItem.id;\r\n                        })\r\n\r\n                        if (matchingSelectedMcq && matchingSelectedMcq.length > 0) {\r\n                            mcqsWithIndex.push({\r\n                                questionOrderIndex: matchingSelectedMcq[0].questionOrderIndex,\r\n                                ...mcqItem\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n\r\n                resolve(mcqsWithIndex);\r\n                // resolve(mcqs);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    GetMcqsByMcqIds = (mcqIds) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.getByIds(this.entityName, mcqIds).then((mcqs) => {\r\n                resolve(mcqs);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    GetMcqById = (mcqId) => {\r\n        console.log('mcqentity', mcqId);\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, mcqId).then((mcqs) => {\r\n                if (mcqs && mcqs.length > 0) {\r\n                    console.log('mcqentity', mcqs[0]);\r\n                    resolve(mcqs[0]);\r\n                }\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Update = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            // let mcqs = this.initializeCollection();\r\n            db.update(this.entityName, entity.mcq_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n            /*\r\n            let mcqToUpdate = this.entities.find({ '$loki': entity.$loki });\r\n            if(mcqToUpdate && mcqToUpdate.length > 0) {\r\n                mcqToUpdate[0].title = entity.title;\r\n                mcqToUpdate[0].description = entity.description;\r\n                if(entity.user) {\r\n                    mcqToUpdate[0].updatedBy = entity.emailId;\r\n                }\r\n                this.entities.update(mcqToUpdate[0]);\r\n                db.saveDatabase(() => {\r\n                  this.EmailSnapshot('CategoryAdd');\r\n              });\r\n      \r\n                resolve(true);\r\n            }\r\n            else {\r\n                console.log('nothing to update');\r\n                reject(\"nothing to update\");\r\n            }*/\r\n        })\r\n    }\r\n\r\n    DeleteByIds = (mcqIds) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.deleteByIds(this.entityName, mcqIds).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    DeleteById = (mcqId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, mcqId).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Delete = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, entity.id)\r\n                .then((res) => {\r\n                    resolve(entity.mcq_meta);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n          \r\n        })\r\n    }\r\n\r\n    // initializeCollection = () => {\r\n    //   this.entities = db.getCollection('mcqs');\r\n    //   if(!this.entities) {\r\n    //       this.entities = db.addCollection('mcqs');\r\n    //   }\r\n    //   console.log('mcq entity initialized', this.entities.data.length);\r\n    // }\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default McqModel;\r\n"]}