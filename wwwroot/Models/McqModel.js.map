{"version":3,"sources":["../../src/Models/McqModel.js"],"names":["McqModel","entityName","entities","entityModel","dbObject","model","id","mcq_meta","author","addedBy","category","choices","correctAnswer","description","minimumExperience","maximumExperience","question","score","skill","GetAll","userEntity","queryConfig","VIEW_MCQS","db","GetMcqsBySkill","VIEW_MCQS_BY_SKILL","BulkAddMcq","jsonData","Promise","resolve","reject","mcqs","length","map","item","index","Add","then","res","console","log","catch","error","entity","correctOptions","indexOf","choice","chIndex","isCorrect","key","mcqEntity","insertCustom","insertId","err","GetMcqsByIds","selectedMcqs","mcqIds","forEach","selectedMcq","push","mcqId","getByIds","mcqsWithIndex","mcqItem","matchingSelectedMcq","filter","smItem","questionOrderIndex","Update","update","DeleteByIds","deleteByIds","Delete","delete","initializeCollection","promise","getCollection"],"mappings":"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","file":"McqModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\n\r\nimport {\r\n    GetQueryConfig,\r\n    HandlePromise,\r\n    HandlePromiseWithParams\r\n} from '../commons/RoleDefinitions';\r\nimport { VIEW_MCQS, VIEW_MCQS_BY_SKILL } from '../commons/RoleBasedQueries/McqQueries';\r\n\r\n\r\nclass McqModel {\r\n    entityName = 'mcq';\r\n    entities = {};\r\n    entityModel = (dbObject) => {\r\n        let model = {\r\n            // id: dbObject['$loki'],\r\n            id: dbObject.id,\r\n            mcq_meta: {\r\n                author: dbObject.mcq_meta.addedBy,\r\n                category: dbObject.mcq_meta.category,\r\n                choices: dbObject.mcq_meta.choices,\r\n                correctAnswer: dbObject.mcq_meta.correctAnswer,\r\n                description: dbObject.mcq_meta.description,\r\n                minimumExperience: dbObject.mcq_meta.minimumExperience,\r\n                maximumExperience: dbObject.mcq_meta.maximumExperience,\r\n                question: dbObject.mcq_meta.question,\r\n                score: dbObject.mcq_meta.score,\r\n                skill: dbObject.mcq_meta.skill\r\n            }\r\n        };\r\n        // dbObject.mcq_meta.choices.map((choice, index) => {\r\n        //     model.mcq_meta.choices.push(choice);\r\n        // });\r\n        return model;\r\n    };\r\n\r\n    constructor() {\r\n        //this.initializeCollection();\r\n    }\r\n\r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n            \r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    let entityModelCollection = [];\r\n                    console.log('entities',this.entities);\r\n                    this.entities.data.map((mcq, index) => {\r\n                        let entityModel = this.entityModel(mcq);\r\n                        entityModelCollection.push(entityModel);\r\n                    });\r\n                    resolve(entityModelCollection);\r\n                }\r\n                else {\r\n                    resolve(this.GetMcqsByUser(userEntity));\r\n                }\r\n            });\r\n        })*/\r\n    }\r\n\r\n    GetMcqsBySkill = (userEntity, skill) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS_BY_SKILL);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity: userEntity, skill: skill });\r\n    }\r\n    /*GetMcqsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredMcqs = this.entities.data.filter((item, index) => {\r\n                return item.mcq_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredMcqs.length);\r\n            let entityModelCollection = [];\r\n            filteredMcqs.map((mcq, index) => {\r\n                let entityModel = this.entityModel(mcq);\r\n                entityModelCollection.push(entityModel);\r\n            });\r\n            return entityModelCollection;\r\n        }\r\n        return [];\r\n    }*/\r\n\r\n    BulkAddMcq = (jsonData) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqs = jsonData.mcqs;\r\n            if (mcqs && mcqs.length > 0) {\r\n                mcqs.map((item, index) => {\r\n                    item.mcq_meta.addedBy = jsonData.addedBy;\r\n                    this.Add(item.mcq_meta)\r\n                        .then((res) => {\r\n                            console.log('mcq added');\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('mcq add failed: ' + error);\r\n                        });\r\n                })\r\n            }\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            console.log('mcq insert called');\r\n            let correctOptions = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n            if (entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n                if (entity.choices && entity.choices.length > 0) {\r\n                    entity.choices.map((choice, chIndex) => {\r\n                        if (chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n                            choice.isCorrect = true;\r\n                        }\r\n                        else {\r\n                            choice.isCorrect = false;\r\n                        }\r\n                        if (!choice.key) {\r\n                            choice.key = correctOptions[chIndex];\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n            let mcqEntity = {\r\n                mcq_meta: entity,\r\n                skill: entity.skill,\r\n                category: entity.category\r\n            }\r\n\r\n            //   db.insert(this.entityName, entity)\r\n            db.insertCustom(this.entityName, mcqEntity)\r\n                .then((insertId) => {\r\n                    resolve(insertId);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n\r\n        });\r\n    }\r\n\r\n    GetMcqsByIds = (selectedMcqs) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqIds = [];\r\n            selectedMcqs.forEach((selectedMcq) => {\r\n                mcqIds.push(selectedMcq.mcqId);\r\n            })\r\n            db.getByIds(this.entityName, mcqIds).then((mcqs) => {\r\n                let mcqsWithIndex = [];\r\n                if (mcqs && mcqs.length > 0) {\r\n                    mcqs.map((mcqItem) => {\r\n                        let matchingSelectedMcq = selectedMcqs.filter((smItem) => {\r\n                            return smItem.mcqId === mcqItem.id;\r\n                        })\r\n\r\n                        if (matchingSelectedMcq && matchingSelectedMcq.length > 0) {\r\n                            mcqsWithIndex.push({\r\n                                questionOrderIndex: matchingSelectedMcq[0].questionOrderIndex,\r\n                                ...mcqItem\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n\r\n                resolve(mcqsWithIndex);\r\n                // resolve(mcqs);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Update = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            // let mcqs = this.initializeCollection();\r\n            db.update(this.entityName, entity.mcq_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n            /*\r\n            let mcqToUpdate = this.entities.find({ '$loki': entity.$loki });\r\n            if(mcqToUpdate && mcqToUpdate.length > 0) {\r\n                mcqToUpdate[0].title = entity.title;\r\n                mcqToUpdate[0].description = entity.description;\r\n                if(entity.user) {\r\n                    mcqToUpdate[0].updatedBy = entity.emailId;\r\n                }\r\n                this.entities.update(mcqToUpdate[0]);\r\n                db.saveDatabase(() => {\r\n                  this.EmailSnapshot('CategoryAdd');\r\n              });\r\n      \r\n                resolve(true);\r\n            }\r\n            else {\r\n                console.log('nothing to update');\r\n                reject(\"nothing to update\");\r\n            }*/\r\n        })\r\n    }\r\n\r\n    DeleteByIds = (mcqIds) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.deleteByIds(this.entityName, mcqIds).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Delete = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, entity.id)\r\n                .then((res) => {\r\n                    resolve(entity.mcq_meta);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n            //   let mcqToDelete = this.entities.chain().find({ '$loki': entity.$loki });\r\n            //   if(mcqToDelete) {\r\n            //       mcqToDelete.remove();\r\n            //         db.saveDatabase(() => {\r\n            //             this.EmailSnapshot('CategoryAdd');\r\n            //         });\r\n\r\n            //       resolve(true);\r\n            //   }\r\n            //   else {\r\n            //       console.log('nothing to delete');\r\n            //       reject(\"nothing to delete\");\r\n            //   }\r\n        })\r\n    }\r\n\r\n    // initializeCollection = () => {\r\n    //   this.entities = db.getCollection('mcqs');\r\n    //   if(!this.entities) {\r\n    //       this.entities = db.addCollection('mcqs');\r\n    //   }\r\n    //   console.log('mcq entity initialized', this.entities.data.length);\r\n    // }\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default McqModel;\r\n"]}