{"version":3,"sources":["../../src/Models/McqModel.js"],"names":["McqModel","entityName","entities","entityModel","dbObject","model","id","mcq_meta","author","addedBy","category","choices","correctAnswer","description","minimumExperience","maximumExperience","question","score","skill","GetAll","userEntity","queryConfig","VIEW_MCQS","db","BulkAddMcq","jsonData","Promise","resolve","reject","mcqs","length","map","item","index","Add","then","res","console","log","catch","error","entity","correctOptions","indexOf","choice","chIndex","isCorrect","key","insert","insertId","err","GetMcqsByIds","mcqIds","getByIds","Update","update","DeleteByIds","deleteByIds","Delete","delete","initializeCollection","promise","getCollection"],"mappings":"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","file":"McqModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\n\r\nimport { GetQueryConfig, \r\n    HandlePromise } from '../commons/RoleDefinitions';\r\nimport { VIEW_MCQS } from '../commons/RoleBasedQueries/McqQueries';\r\n\r\n\r\nclass McqModel {\r\n    entityName = 'mcq';\r\n    entities = {};\r\n    entityModel = (dbObject) => {\r\n        let model = {\r\n            // id: dbObject['$loki'],\r\n            id: dbObject.id,\r\n            mcq_meta: {\r\n                author: dbObject.mcq_meta.addedBy,\r\n                category: dbObject.mcq_meta.category,\r\n                choices: dbObject.mcq_meta.choices,\r\n                correctAnswer: dbObject.mcq_meta.correctAnswer,\r\n                description: dbObject.mcq_meta.description,\r\n                minimumExperience: dbObject.mcq_meta.minimumExperience,\r\n                maximumExperience: dbObject.mcq_meta.maximumExperience,\r\n                question: dbObject.mcq_meta.question,\r\n                score: dbObject.mcq_meta.score,\r\n                skill: dbObject.mcq_meta.skill\r\n            }\r\n        };\r\n        // dbObject.mcq_meta.choices.map((choice, index) => {\r\n        //     model.mcq_meta.choices.push(choice);\r\n        // });\r\n        return model;\r\n    };\r\n\r\n    constructor() {\r\n      //this.initializeCollection();\r\n    }\r\n\r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MCQS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    \r\n        /*return new Promise((resolve, reject) => {\r\n            \r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    let entityModelCollection = [];\r\n                    console.log('entities',this.entities);\r\n                    this.entities.data.map((mcq, index) => {\r\n                        let entityModel = this.entityModel(mcq);\r\n                        entityModelCollection.push(entityModel);\r\n                    });\r\n                    resolve(entityModelCollection);\r\n                }\r\n                else {\r\n                    resolve(this.GetMcqsByUser(userEntity));\r\n                }\r\n            });\r\n        })*/\r\n    }\r\n\r\n    /*GetMcqsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredMcqs = this.entities.data.filter((item, index) => {\r\n                return item.mcq_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredMcqs.length);\r\n            let entityModelCollection = [];\r\n            filteredMcqs.map((mcq, index) => {\r\n                let entityModel = this.entityModel(mcq);\r\n                entityModelCollection.push(entityModel);\r\n            });\r\n            return entityModelCollection;\r\n        }\r\n        return [];\r\n    }*/\r\n\r\n    BulkAddMcq = (jsonData) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mcqs = jsonData.mcqs;\r\n            if(mcqs && mcqs.length > 0) {\r\n                mcqs.map((item, index) => {\r\n                    item.mcq_meta.addedBy = jsonData.addedBy;\r\n                    this.Add(item.mcq_meta)\r\n                      .then((res) => {\r\n                          console.log('mcq added');\r\n                      })\r\n                      .catch((error) => {\r\n                          console.log('mcq add failed: ' + error);\r\n                      });\r\n                })\r\n            } \r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          console.log('mcq insert called');\r\n          let correctOptions = ['A','B','C','D','E','F'];\r\n          if(entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n                if(entity.choices && entity.choices.length > 0) {\r\n                    entity.choices.map((choice, chIndex) => {\r\n                        if(chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n                            choice.isCorrect = true;              \r\n                        }\r\n                        else {\r\n                            choice.isCorrect = false;\r\n                        }\r\n                        if(!choice.key) {\r\n                            choice.key = correctOptions[chIndex];\r\n                        }\r\n                    })\r\n                }\r\n          }\r\n          db.insert(this.entityName, entity)\r\n                .then((insertId) => {\r\n                    resolve(insertId);\r\n                })\r\n                .catch((err) => {\r\n                    reject(err);\r\n                })\r\n\r\n      });\r\n    }\r\n\r\n    GetMcqsByIds = (mcqIds) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.getByIds(this.entityName, mcqIds).then((mcqs) => {\r\n                resolve(mcqs);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Update = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          // let mcqs = this.initializeCollection();\r\n            db.update(this.entityName, entity.mcq_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n          /*\r\n          let mcqToUpdate = this.entities.find({ '$loki': entity.$loki });\r\n          if(mcqToUpdate && mcqToUpdate.length > 0) {\r\n              mcqToUpdate[0].title = entity.title;\r\n              mcqToUpdate[0].description = entity.description;\r\n              if(entity.user) {\r\n                  mcqToUpdate[0].updatedBy = entity.emailId;\r\n              }\r\n              this.entities.update(mcqToUpdate[0]);\r\n              db.saveDatabase(() => {\r\n                this.EmailSnapshot('CategoryAdd');\r\n            });\r\n    \r\n              resolve(true);\r\n          }\r\n          else {\r\n              console.log('nothing to update');\r\n              reject(\"nothing to update\");\r\n          }*/\r\n      })\r\n    }\r\n\r\n    DeleteByIds = (mcqIds) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.deleteByIds(this.entityName, mcqIds).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Delete = (entity) => {\r\n      return new Promise((resolve, reject) => {\r\n          db.delete(this.entityName, entity.id)\r\n                    .then((res) => {\r\n                        resolve(entity.mcq_meta);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    })\r\n        //   let mcqToDelete = this.entities.chain().find({ '$loki': entity.$loki });\r\n        //   if(mcqToDelete) {\r\n        //       mcqToDelete.remove();\r\n        //         db.saveDatabase(() => {\r\n        //             this.EmailSnapshot('CategoryAdd');\r\n        //         });\r\n    \r\n        //       resolve(true);\r\n        //   }\r\n        //   else {\r\n        //       console.log('nothing to delete');\r\n        //       reject(\"nothing to delete\");\r\n        //   }\r\n      })\r\n    }\r\n\r\n    // initializeCollection = () => {\r\n    //   this.entities = db.getCollection('mcqs');\r\n    //   if(!this.entities) {\r\n    //       this.entities = db.addCollection('mcqs');\r\n    //   }\r\n    //   console.log('mcq entity initialized', this.entities.data.length);\r\n    // }\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default McqModel;\r\n"]}