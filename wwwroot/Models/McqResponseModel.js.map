{"version":3,"sources":["../../src/Models/McqResponseModel.js"],"names":["McqResponseModel","entityName","entities","GetAll","userEntity","console","log","Promise","resolve","reject","initializeCollection","then","res","role","users","UserRoles","admin","data","length","GetInvitationsByUser","GetMcqResponse","responseId","db","findOne","catch","err","GetInvitation","invitationId","GetByInvitationId","sql","queries","getMcqResponseByInvitationId","executeQuery","serializeToJson","Add","entity","insert","insertId","Update","modifiedOn","Date","toLocaleDateString","update","response_meta","id","promise","getCollection"],"mappings":"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","file":"McqResponseModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\n\r\nclass McqResponseModel {\r\n    entityName = 'mcqresponses';\r\n    entities = {};\r\n    \r\n    // constructor() {\r\n    //   this.initializeCollection();\r\n    // }\r\n\r\n    GetAll = (userEntity) => {\r\n        console.log('user caller', userEntity);\r\n        return new Promise((resolve, reject) => {\r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    resolve(this.entities.data);\r\n                }\r\n                else {\r\n                    resolve(this.GetInvitationsByUser(userEntity));\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    GetMcqResponse = (responseId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, responseId).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    GetInvitation = (invitationId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, invitationId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    GetByInvitationId = (invitationId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getMcqResponseByInvitationId(invitationId);\r\n            db.executeQuery(sql).then((res) => {\r\n                let data = db.serializeToJson(res, this.entityName);\r\n                resolve(data[0]);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity).then((insertId) => {\r\n                resolve(insertId);\r\n            });\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.modifiedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.response_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    /*UpdateTestInvite = (testEntity, candidateEmailId, testStatus) => {\r\n        if(testEntity !== null) {\r\n            let candidateInvite = this.GetCandidateInvite(testEntity, candidateEmailId);\r\n            if(candidateInvite !== null) {\r\n                candidateInvite.testStatus = testStatus;\r\n                tests.update(testEntity);\r\n                db.saveDatabase(() => {\r\n                    this.EmailSnapshot('CategoryAdd');\r\n                });\r\n        \r\n                return testEntity;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    GetCandidateInvite = (testEntity, candidateEmailId) => {\r\n        if(testEntity && testEntity.invitations && testEntity.invitations.length > 0) {\r\n            // let filteredCandidates = testEntity.invitations.where((item) => {\r\n            //     return item.emailTo == candidateEmailId;    \r\n            // });\r\n            let filteredCandidates = testEntity.invitations.filter((item) => {\r\n                return item.emailTo === candidateEmailId;\r\n            })\r\n            console.log(`candidates filtered for emailid: ${candidateEmailId}, ${filteredCandidates.length}`);\r\n            if(filteredCandidates && filteredCandidates.length > 0) {\r\n                return filteredCandidates[0];\r\n            }\r\n        }\r\n        return null;\r\n    }*/\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default McqResponseModel;"]}