{"version":3,"sources":["../../src/Models/TestModel.js"],"names":["TestModel","entityName","entities","GetAll","userEntity","queryConfig","VIEW_TESTS","db","GetTest","testId","Promise","resolve","reject","findOne","then","res","GetCandidatesByTestId","sql","queries","getCandidatesByTestId","executeQuery","catch","err","Add","entity","status","addedOn","Date","toLocaleDateString","insert","Update","test_meta","updatedOn","selectedMcqs","length","map","item","index","questionOrderIndex","update","id","initializeCollection","promise","getCollection","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;IAIMA,S;;;;;SACFC,U,GAAa,O;SACbC,Q,GAAW,E;;SAEXC,M,GAAS,UAACC,UAAD,EAAgB;AACrB,YAAIC,cAAc,qCAAeC,2BAAf,CAAlB;AACA,eAAO,oCAAcC,iBAAd,EAAkBF,WAAlB,EAA+BD,UAA/B,CAAP;;AAEA;;;;;;;;;;;AAWH,K;;SAaDI,O,GAAU,UAACC,MAAD,EAAY;AAClB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAGM,OAAH,CAAW,MAAKZ,UAAhB,EAA4BQ,MAA5B,EAAoCK,IAApC,CAAyC,UAACC,GAAD,EAAS;AAC9CJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAEDC,qB,GAAwB,UAACP,MAAD,EAAY;AAChC,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIK,MAAMC,kBAAQC,qBAAR,CAA8BV,MAA9B,CAAV;AACAF,8BAAGa,YAAH,CAAgBH,GAAhB,EAAqBH,IAArB,CAA0B,UAACC,GAAD,EAAS;AAC/BJ,wBAAQI,GAAR;AACH,aAFD,EAEGM,KAFH,CAES,UAACC,GAAD,EAAS;AACdV,uBAAOU,GAAP;AACH,aAJD;AAKH,SAPM,CAAP;AAQH,K;;SAEDC,G,GAAM,UAACC,MAAD,EAAY;AACdA,eAAOC,MAAP,GAAgB,OAAhB;AACAD,eAAOE,OAAP,GAAkB,IAAIC,IAAJ,EAAD,CAAaC,kBAAb,EAAjB;AACA,eAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAGsB,MAAH,CAAU,MAAK5B,UAAf,EAA2BuB,MAA3B;AACAb,oBAAQ,IAAR;AACH,SAHM,CAAP;AAIH,K;;SAEDmB,M,GAAS,UAACN,MAAD,EAAY;AACjBA,eAAOO,SAAP,CAAiBC,SAAjB,GAA8B,IAAIL,IAAJ,EAAD,CAAaC,kBAAb,EAA7B;AACA,YAAGJ,OAAOO,SAAP,CAAiBE,YAAjB,IAAiCT,OAAOO,SAAP,CAAiBE,YAAjB,CAA8BC,MAA9B,GAAuC,CAA3E,EAA8E;AAC1EV,mBAAOO,SAAP,CAAiBE,YAAjB,CAA8BE,GAA9B,CAAkC,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC/CD,qBAAKE,kBAAL,GAA0BD,KAA1B;AACH,aAFD;AAGH;AACD,eAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,8BAAGgC,MAAH,CAAU,MAAKtC,UAAf,EAA2BuB,OAAOO,SAAlC,EAA6CP,OAAOgB,EAApD,EAAwD1B,IAAxD,CAA6D,UAACC,GAAD,EAAS;AAClEJ,wBAAQI,GAAR;AACH,aAFD;AAGH,SAJM,CAAP;AAKH,K;;SAED0B,oB,GAAuB,YAAM;AACzB,YAAIC,UAAU,IAAIhC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3CL,8BAAGoC,aAAH,CAAiB,MAAK1C,UAAtB,EACKa,IADL,CACU,UAACC,GAAD,EAAS;AACX,sBAAKb,QAAL,GAAgBa,GAAhB;AACAJ,wBAAQ,MAAKT,QAAb;AACH,aAJL,EAIOmB,KAJP,CAIa,UAACC,GAAD,EAAS;AACdsB,wBAAQC,GAAR,CAAY,kBAAZ,EAAgCvB,GAAhC;AACAV,uBAAOU,GAAP;AACH,aAPL;AAQH,SATa,CAAd;AAUA,eAAOoB,OAAP;AACH,K;;;AAjED;;;;;;;;;;;;;kBAmEW1C,S","file":"TestModel.js","sourcesContent":["import db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\n\r\nimport { GetQueryConfig, \r\n    HandlePromise,    \r\n    VIEW_TESTS } from '../commons/RoleDefinitions';\r\n\r\nclass TestModel {\r\n    entityName = 'tests';\r\n    entities = {};\r\n    \r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    resolve(this.entities.data);\r\n                }\r\n                else {\r\n                    resolve(this.GetTestsByUser(userEntity));\r\n                }\r\n            });\r\n        })*/\r\n    }\r\n\r\n    /*GetTestsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredTests = this.entities.data.filter((item, index) => {\r\n                return item.test_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredTests.length);\r\n            return filteredTests;\r\n        }\r\n        return [];\r\n    }*/\r\n\r\n    GetTest = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, testId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    GetCandidatesByTestId = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getCandidatesByTestId(testId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    Add = (entity) => {\r\n        entity.status = \"DRAFT\";\r\n        entity.addedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity);\r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.test_meta.updatedOn = (new Date()).toLocaleDateString();\r\n        if(entity.test_meta.selectedMcqs && entity.test_meta.selectedMcqs.length > 0) {\r\n            entity.test_meta.selectedMcqs.map((item, index) => {\r\n                item.questionOrderIndex = index;\r\n            })\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.test_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default TestModel;"]}