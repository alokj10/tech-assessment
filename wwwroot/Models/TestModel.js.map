{"version":3,"sources":["../../src/Models/TestModel.js"],"names":["TestModel","entityName","entities","GetAll","userEntity","queryConfig","VIEW_TESTS","db","GetMy","VIEW_MY_TESTS","GetTestsAvailableForMe","grade","VIEW_TESTS_AVAILABLE_FOR_ME","GetTestsForGrade","VIEW_TESTS_FOR_GRADE","GetTestById","testId","VIEW_TESTS_BY_ID","DeleteTestById","Promise","resolve","reject","delete","then","res","catch","error","GetTest","findOne","err","DeleteMcqFromTestsIfExists","mcqId","serializeToJson","data","console","log","test_meta","output","id","JSON","parse","GetCandidatesByTestId","sql","queries","getCandidatesByTestId","executeQuery","mapCandidatesResult","GetStudentsByTestId","getStudentsByTestId","outputArray","length","map","item","index","Object","keys","prop","metaObj","replace","mObj","forEach","metaProp","push","mapStudentsResult","Add","entity","status","addedOn","Date","toLocaleDateString","insert","AddCustom","insertCustom","insertId","Update","updatedOn","selectedMcqs","questionOrderIndex","update","initializeCollection","promise","getCollection"],"mappings":"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","file":"TestModel.js","sourcesContent":["import db from '../db/mysqldb';\r\nimport queries from '../db/queries';\r\n\r\nimport { GetQueryConfig, \r\n    HandlePromise, \r\n    HandlePromiseWithParams} from '../commons/RoleDefinitions';\r\nimport { VIEW_TESTS, VIEW_MY_TESTS, VIEW_TESTS_BY_ID,\r\n    VIEW_TESTS_AVAILABLE_FOR_ME, VIEW_TESTS_FOR_GRADE } from '../commons/RoleBasedQueries/TestQueries';\r\n\r\nclass TestModel {\r\n    entityName = 'tests';\r\n    entities = {};\r\n    \r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n    \r\n    GetMy = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MY_TESTS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n    \r\n    GetTestsAvailableForMe = (userEntity, grade) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS_AVAILABLE_FOR_ME);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity, grade });\r\n    }\r\n    \r\n    GetTestsForGrade = (userEntity, grade) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS_FOR_GRADE);\r\n        return HandlePromiseWithParams(db, queryConfig, { userEntity, grade });\r\n    }\r\n    \r\n    GetTestById = (userEntity, testId) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS_BY_ID);\r\n        return HandlePromise(db, queryConfig, { userEntity: userEntity, testId: testId });\r\n    }\r\n    \r\n    DeleteTestById = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.delete(this.entityName, testId)\r\n               .then((res) => {\r\n                   resolve();\r\n               })\r\n               .catch((error) => {\r\n                   reject(error);\r\n               })\r\n        });\r\n    }\r\n\r\n    GetTest = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, testId)\r\n            .then((res) => {\r\n                resolve(res);\r\n            })\r\n            .catch((err) => {\r\n                reject(err);\r\n            });\r\n        })\r\n    }\r\n\r\n    DeleteMcqFromTestsIfExists = (mcqId) => {\r\n        // return new Promise((resolve, reject) => {\r\n\r\n        // })\r\n    }\r\n\r\n    serializeToJson = (data) => {\r\n        console.log('test data', data);\r\n        let test_meta = data['test_meta'];\r\n        // test_meta = test_meta.replace(/\\n/g, \"\\\\n\");\r\n        // test_meta = test_meta.replace(/\\r/g, \"\\\\r\");\r\n        // test_meta = test_meta.replace(/\\t/g, \"\\\\t\");\r\n        let output = {};\r\n        output.id = data.id;\r\n        output['test_meta'] = JSON.parse(test_meta);\r\n        return output;\r\n        // output['user_meta'] = JSON.parse(data['user_meta']);\r\n       /* let outputArray = [];\r\n        console.log('data count', data.length);\r\n        if(data && data.length > 0) {\r\n            data.map((item, index) => {\r\n\r\n                let test_meta = item['test_meta'];\r\n                test_meta = test_meta.replace(/\\n/g, \"\\\\n\");\r\n                test_meta = test_meta.replace(/\\r/g, \"\\\\r\");\r\n                test_meta = test_meta.replace(/\\t/g, \"\\\\t\");\r\n                let output = {};\r\n                output.id = item.id;\r\n                output['test_meta'] = JSON.parse(test_meta);\r\n                output['user_meta'] = JSON.parse(item['user_meta']);\r\n                outputArray.push(output);\r\n            })\r\n        }\r\n        return outputArray;*/\r\n    }\r\n\r\n    GetCandidatesByTestId = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getCandidatesByTestId(testId);\r\n            db.executeQuery(sql).then((res) => {\r\n                // resolve(res);\r\n                resolve(this.mapCandidatesResult(res));\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    GetStudentsByTestId = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getStudentsByTestId(testId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(this.mapCandidatesResult(res));\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    mapCandidatesResult = (data) => {\r\n            let outputArray = [];\r\n            console.log('data count', data.length);\r\n            if(data && data.length > 0) {\r\n                data.map((item, index) => {\r\n                    let output = {};\r\n                    Object.keys(item).map((prop) => {\r\n                        if(prop === 'response_meta') {\r\n                            let metaObj = item[prop];\r\n                            if(metaObj) {\r\n                                metaObj = metaObj.replace(/\\n/g, \"\\\\n\");\r\n                                metaObj = metaObj.replace(/\\r/g, \"\\\\r\");\r\n                                metaObj = metaObj.replace(/\\t/g, \"\\\\t\"); \r\n                                let mObj = JSON.parse(metaObj);\r\n                                Object.keys(mObj).forEach((metaProp) => {\r\n                                    output[metaProp] = mObj[metaProp];\r\n                                })\r\n                            }\r\n                        }\r\n                        else {\r\n                            output[prop] = item[prop];\r\n                        }\r\n                    })\r\n                    outputArray.push(output);\r\n                })\r\n            }\r\n            return outputArray;\r\n    }\r\n\r\n    mapStudentsResult = (data) => {\r\n        let outputArray = [];\r\n        console.log('data count', data.length);\r\n        if(data && data.length > 0) {\r\n            data.map((item, index) => {\r\n                let output = {};\r\n                Object.keys(item).map((prop) => {\r\n                    if(prop === 'response_meta') {\r\n                        let metaObj = item[prop];\r\n                        if(metaObj) {\r\n                            metaObj = metaObj.replace(/\\n/g, \"\\\\n\");\r\n                            metaObj = metaObj.replace(/\\r/g, \"\\\\r\");\r\n                            metaObj = metaObj.replace(/\\t/g, \"\\\\t\"); \r\n                            let mObj = JSON.parse(metaObj);\r\n                            Object.keys(mObj).forEach((metaProp) => {\r\n                                output[metaProp] = mObj[metaProp];\r\n                            })\r\n                        }\r\n                    }\r\n                    if(prop === 'evaluation_meta') {\r\n                        let metaObj = item[prop];\r\n                        if(metaObj) {\r\n                            metaObj = metaObj.replace(/\\n/g, \"\\\\n\");\r\n                            metaObj = metaObj.replace(/\\r/g, \"\\\\r\");\r\n                            metaObj = metaObj.replace(/\\t/g, \"\\\\t\"); \r\n                            let mObj = JSON.parse(metaObj);\r\n                            Object.keys(mObj).forEach((metaProp) => {\r\n                                output[metaProp] = mObj[metaProp];\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n                        output[prop] = item[prop];\r\n                    }\r\n                })\r\n                outputArray.push(output);\r\n            })\r\n        }\r\n        return outputArray;\r\n    }\r\n\r\n    Add = (entity) => {\r\n        entity.status = \"DRAFT\";\r\n        entity.addedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity);\r\n            resolve(true);\r\n        });\r\n    }\r\n    \r\n    AddCustom = (entity) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.insertCustom(this.entityName, entity)\r\n               .then((insertId) => {\r\n                   resolve(insertId);\r\n               })\r\n               .catch((error) => {\r\n                   reject(error);\r\n               })\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.test_meta.updatedOn = (new Date()).toLocaleDateString();\r\n        if(entity.test_meta.selectedMcqs && entity.test_meta.selectedMcqs.length > 0) {\r\n            entity.test_meta.selectedMcqs.map((item, index) => {\r\n                item.questionOrderIndex = index;\r\n            })\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.test_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default TestModel;"]}