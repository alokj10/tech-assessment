{"version":3,"sources":["../../src/Models/TestModel.js"],"names":["TestModel","entityName","entities","GetAll","userEntity","queryConfig","VIEW_TESTS","db","GetMy","VIEW_MY_TESTS","GetTestById","testId","VIEW_TESTS_BY_ID","GetTest","Promise","resolve","reject","findOne","then","res","serializeToJson","data","console","log","test_meta","output","id","JSON","parse","GetCandidatesByTestId","sql","queries","getCandidatesByTestId","executeQuery","mapCandidatesResult","catch","err","outputArray","length","map","item","index","Object","keys","prop","metaObj","replace","mObj","forEach","metaProp","push","Add","entity","status","addedOn","Date","toLocaleDateString","insert","Update","updatedOn","selectedMcqs","questionOrderIndex","update","initializeCollection","promise","getCollection"],"mappings":"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","file":"TestModel.js","sourcesContent":["import db from '../db/mysqldb';\r\nimport queries from '../db/queries';\r\n\r\nimport { GetQueryConfig, \r\n    HandlePromise } from '../commons/RoleDefinitions';\r\nimport { VIEW_TESTS, VIEW_MY_TESTS, VIEW_TESTS_BY_ID } from '../commons/RoleBasedQueries/TestQueries';\r\n\r\nclass TestModel {\r\n    entityName = 'tests';\r\n    entities = {};\r\n    \r\n    GetAll = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n    \r\n    GetMy = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_MY_TESTS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    }\r\n    \r\n    GetTestById = (userEntity, testId) => {\r\n        let queryConfig = GetQueryConfig(VIEW_TESTS_BY_ID);\r\n        return HandlePromise(db, queryConfig, { userEntity: userEntity, testId: testId });\r\n    }\r\n    /*GetTestsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredTests = this.entities.data.filter((item, index) => {\r\n                return item.test_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredTests.length);\r\n            return filteredTests;\r\n        }\r\n        return [];\r\n    }*/\r\n\r\n    GetTest = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, testId)\r\n            .then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    serializeToJson = (data) => {\r\n        console.log('test data', data);\r\n        let test_meta = data['test_meta'];\r\n        // test_meta = test_meta.replace(/\\n/g, \"\\\\n\");\r\n        // test_meta = test_meta.replace(/\\r/g, \"\\\\r\");\r\n        // test_meta = test_meta.replace(/\\t/g, \"\\\\t\");\r\n        let output = {};\r\n        output.id = data.id;\r\n        output['test_meta'] = JSON.parse(test_meta);\r\n        return output;\r\n        // output['user_meta'] = JSON.parse(data['user_meta']);\r\n       /* let outputArray = [];\r\n        console.log('data count', data.length);\r\n        if(data && data.length > 0) {\r\n            data.map((item, index) => {\r\n\r\n                let test_meta = item['test_meta'];\r\n                test_meta = test_meta.replace(/\\n/g, \"\\\\n\");\r\n                test_meta = test_meta.replace(/\\r/g, \"\\\\r\");\r\n                test_meta = test_meta.replace(/\\t/g, \"\\\\t\");\r\n                let output = {};\r\n                output.id = item.id;\r\n                output['test_meta'] = JSON.parse(test_meta);\r\n                output['user_meta'] = JSON.parse(item['user_meta']);\r\n                outputArray.push(output);\r\n            })\r\n        }\r\n        return outputArray;*/\r\n    }\r\n\r\n    GetCandidatesByTestId = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getCandidatesByTestId(testId);\r\n            db.executeQuery(sql).then((res) => {\r\n                // resolve(res);\r\n                resolve(this.mapCandidatesResult(res));\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    mapCandidatesResult = (data) => {\r\n            let outputArray = [];\r\n            console.log('data count', data.length);\r\n            if(data && data.length > 0) {\r\n                data.map((item, index) => {\r\n                    let output = {};\r\n                    Object.keys(item).map((prop) => {\r\n                        if(prop === 'response_meta') {\r\n                            let metaObj = item[prop];\r\n                            if(metaObj) {\r\n                                metaObj = metaObj.replace(/\\n/g, \"\\\\n\");\r\n                                metaObj = metaObj.replace(/\\r/g, \"\\\\r\");\r\n                                metaObj = metaObj.replace(/\\t/g, \"\\\\t\"); \r\n                                let mObj = JSON.parse(metaObj);\r\n                                Object.keys(mObj).forEach((metaProp) => {\r\n                                    output[metaProp] = mObj[metaProp];\r\n                                })\r\n                            }\r\n                        }\r\n                        else {\r\n                            output[prop] = item[prop];\r\n                        }\r\n                    })\r\n                    outputArray.push(output);\r\n                })\r\n            }\r\n            return outputArray;\r\n    }\r\n\r\n    Add = (entity) => {\r\n        entity.status = \"DRAFT\";\r\n        entity.addedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity);\r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.test_meta.updatedOn = (new Date()).toLocaleDateString();\r\n        if(entity.test_meta.selectedMcqs && entity.test_meta.selectedMcqs.length > 0) {\r\n            entity.test_meta.selectedMcqs.map((item, index) => {\r\n                item.questionOrderIndex = index;\r\n            })\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.test_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default TestModel;"]}