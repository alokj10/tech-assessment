{"version":3,"sources":["../../src/Models/InvitationModel.js"],"names":["InvitationModel","entityName","entities","GetAll","userEntity","console","log","Promise","resolve","reject","initializeCollection","then","res","role","users","UserRoles","admin","data","length","GetInvitationsByUser","filteredInvitations","filter","item","index","invitation_meta","addedBy","emailId","GetAllInvitations","queryConfig","VIEW_INVITATIONS","db","GetInvitation","invitationId","findOne","GetCandidateInfoByInvitationId","sql","queries","getCandidateInfoByInvitationId","executeQuery","catch","err","Add","entity","status","invitedOn","Date","toLocaleDateString","insert","Update","modifiedOn","update","id","promise","getCollection"],"mappings":"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","file":"InvitationModel.js","sourcesContent":["// import db from './db';\r\nimport db from '../db/mysqldb';\r\nimport users from '../users';\r\nimport queries from '../db/queries';\r\nimport { GetQueryConfig, \r\n    HandlePromise,    \r\n    VIEW_INVITATIONS } from '../commons/RoleDefinitions';\r\n\r\nclass InvitationModel {\r\n    entityName = 'invitations';\r\n    entities = {};\r\n    \r\n    // constructor() {\r\n    //   this.initializeCollection();\r\n    // }\r\n\r\n    GetAll = (userEntity) => {\r\n        console.log('user caller', userEntity);\r\n        return new Promise((resolve, reject) => {\r\n            this.initializeCollection().then((res) => {\r\n                if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n                    console.log(this.entities.data.length);\r\n                    resolve(this.entities.data);\r\n                }\r\n                else {\r\n                    resolve(this.GetInvitationsByUser(userEntity));\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    GetInvitationsByUser = (userEntity) => {\r\n        if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n            let filteredInvitations = this.entities.data.filter((item, index) => {\r\n                return item.invitation_meta.addedBy = userEntity.emailId;\r\n            });\r\n            console.log(filteredInvitations.length);\r\n            return filteredInvitations;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    GetAllInvitations = (userEntity) => {\r\n        let queryConfig = GetQueryConfig(VIEW_INVITATIONS);\r\n        return HandlePromise(db, queryConfig, userEntity);\r\n    \r\n    /*    return new Promise((resolve, reject) => {\r\n            let sql = queries.getAllInvitationsQuery();\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })*/\r\n    }\r\n\r\n    GetInvitation = (invitationId) => {\r\n        return new Promise((resolve, reject) => {\r\n            db.findOne(this.entityName, invitationId).then((res) => {\r\n                resolve(res);\r\n            });\r\n        })\r\n    }\r\n\r\n    GetCandidateInfoByInvitationId = (invitationId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let sql = queries.getCandidateInfoByInvitationId(invitationId);\r\n            db.executeQuery(sql).then((res) => {\r\n                resolve(res[0]);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        })\r\n    }\r\n\r\n    Add = (entity) => {\r\n        entity.status = \"INITIATED\";\r\n        entity.invitedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.insert(this.entityName, entity);\r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    Update = (entity) => {\r\n        entity.modifiedOn = (new Date()).toLocaleDateString();\r\n        return new Promise((resolve, reject) => {\r\n            db.update(this.entityName, entity.invitation_meta, entity.id).then((res) => {\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n\r\n    /*UpdateTestInvite = (testEntity, candidateEmailId, testStatus) => {\r\n        if(testEntity !== null) {\r\n            let candidateInvite = this.GetCandidateInvite(testEntity, candidateEmailId);\r\n            if(candidateInvite !== null) {\r\n                candidateInvite.testStatus = testStatus;\r\n                tests.update(testEntity);\r\n                db.saveDatabase(() => {\r\n                    this.EmailSnapshot('CategoryAdd');\r\n                });\r\n        \r\n                return testEntity;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    GetCandidateInvite = (testEntity, candidateEmailId) => {\r\n        if(testEntity && testEntity.invitations && testEntity.invitations.length > 0) {\r\n            // let filteredCandidates = testEntity.invitations.where((item) => {\r\n            //     return item.emailTo == candidateEmailId;    \r\n            // });\r\n            let filteredCandidates = testEntity.invitations.filter((item) => {\r\n                return item.emailTo === candidateEmailId;\r\n            })\r\n            console.log(`candidates filtered for emailid: ${candidateEmailId}, ${filteredCandidates.length}`);\r\n            if(filteredCandidates && filteredCandidates.length > 0) {\r\n                return filteredCandidates[0];\r\n            }\r\n        }\r\n        return null;\r\n    }*/\r\n\r\n    initializeCollection = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            db.getCollection(this.entityName)\r\n                .then((res) => {\r\n                    this.entities = res;\r\n                    resolve(this.entities);\r\n                }).catch((err) => {\r\n                    console.log('error occurred: ', err);\r\n                    reject(err);\r\n                })\r\n        });\r\n        return promise;\r\n    }\r\n}\r\nexport default InvitationModel;"]}