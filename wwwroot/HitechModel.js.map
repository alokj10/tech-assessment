{"version":3,"sources":["../src/HitechModel.js"],"names":[],"mappingsfile":"HitechModel.js","sourcesContent":["// import db from './db';\r\n// import users from './users';\r\n\r\n// class McqModel {\r\n//     entities = {};\r\n//     entityModel = (dbObject) => {\r\n//         let model = {\r\n//             id: dbObject['$loki'],\r\n//             author: dbObject.addedBy,\r\n//             category: dbObject.category,\r\n//             choices: [],\r\n//             correctAnswer: dbObject.correctAnswer,\r\n//             description: dbObject.description,\r\n//             minimumExperience: dbObject.minimumExperience,\r\n//             maximumExperience: dbObject.maximumExperience,\r\n//             question: dbObject.question,\r\n//             score: dbObject.score,\r\n//             skill: dbObject.skill\r\n//         };\r\n//         dbObject.choices.map((choice, index) => {\r\n//             model.choices.push(choice);\r\n//         });\r\n//         return model;\r\n//     };\r\n\r\n//     constructor() {\r\n//       this.initializeCollection();\r\n//     }\r\n\r\n//     GetAll = (userEntity) => {\r\n//         return new Promise((resolve, reject) => {\r\n//             // console.log('get all mcqs called', req.user);\r\n//             // let mcqs = this.initializeCollection();\r\n//             if(userEntity && userEntity.role === users.UserRoles.admin) {\r\n//                 console.log(this.entities.data.length);\r\n//                 let entityModelCollection = [];\r\n//                 this.entities.data.map((mcq, index) => {\r\n//                     let entityModel = this.entityModel(mcq);\r\n//                     entityModelCollection.push(entityModel);\r\n//                 });\r\n//                 resolve(entityModelCollection);\r\n//             }\r\n//             else {\r\n//                 this.GetMcqsByUser(userEntity);\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     GetMcqsByUser = (userEntity) => {\r\n//         if(this.entities.data && this.entities.data.length > 0 && userEntity) {\r\n//           let filteredMcqs = this.entities.data.filter((item, index) => {\r\n//               return item.addedBy = userEntity.emailId;\r\n//           });\r\n//           console.log(filteredMcqs.length);\r\n//           let entityModelCollection = [];\r\n//           filteredMcqs.map((mcq, index) => {\r\n//               let entityModel = this.entityModel(mcq);\r\n//               entityModelCollection.push(entityModel);\r\n//           });\r\n//             return entityModelCollection;\r\n//             // return filteredMcqs;\r\n//         }\r\n//         return [];\r\n//     }\r\n\r\n//     BulkAddMcq = (jsonData) => {\r\n//         return new Promise((resolve, reject) => {\r\n//             let mcqs = jsonData.mcqs;\r\n//             if(mcqs && mcqs.length > 0) {\r\n//                 mcqs.map((item, index) => {\r\n//                     item.addedBy = jsonData.addedBy;\r\n//                     this.Add(item)\r\n//                       .then((res) => {\r\n//                           console.log('mcq added');\r\n//                       })\r\n//                       .catch((error) => {\r\n//                           console.log('mcq add failed: ' + error);\r\n//                       });\r\n//                 })\r\n//             } \r\n//             resolve(true);\r\n//         })\r\n//     }\r\n\r\n//     Add = (entity) => {\r\n//       return new Promise((resolve, reject) => {\r\n//           console.log('mcq insert called', this.entities.data.length);\r\n//           let correctOptions = ['A','B','C','D','E','F'];\r\n//           if(entity.correctAnswer && correctOptions.indexOf(entity.correctAnswer) > -1) {\r\n//                 if(entity.choices && entity.choices.length > 0) {\r\n//                     entity.choices.map((choice, chIndex) => {\r\n//                         if(chIndex === correctOptions.indexOf(entity.correctAnswer)) {\r\n//                             choice.isCorrect = true;              \r\n//                         }\r\n//                         else {\r\n//                             choice.isCorrect = false;\r\n//                         }\r\n//                     })\r\n//                 }\r\n//           }\r\n//           this.entities.insert(entity);\r\n//           db.saveDatabase();\r\n//           console.log('save db called');\r\n//           resolve(true);\r\n//       });\r\n//     }\r\n\r\n//     Update = (entity) => {\r\n//       return new Promise((resolve, reject) => {\r\n//           // let mcqs = this.initializeCollection();\r\n//           let mcqToUpdate = this.entities.find({ '$loki': entity.$loki });\r\n//           if(mcqToUpdate && mcqToUpdate.length > 0) {\r\n//               mcqToUpdate[0].title = entity.title;\r\n//               mcqToUpdate[0].description = entity.description;\r\n//               if(entity.user) {\r\n//                   mcqToUpdate[0].updatedBy = entity.emailId;\r\n//               }\r\n//               this.entities.update(mcqToUpdate[0]);\r\n//               db.saveDatabase();\r\n//               resolve(true);\r\n//           }\r\n//           else {\r\n//               console.log('nothing to update');\r\n//               reject(\"nothing to update\");\r\n//           }\r\n//       })\r\n//     }\r\n\r\n//     Delete = (entity) => {\r\n//       return new Promise((resolve, reject) => {\r\n//           let mcqToDelete = this.entities.chain().find({ '$loki': entity.$loki });\r\n//           if(mcqToDelete) {\r\n//               mcqToDelete.remove();\r\n//               db.saveDatabase();\r\n//               resolve(true);\r\n//           }\r\n//           else {\r\n//               console.log('nothing to delete');\r\n//               reject(\"nothing to delete\");\r\n//           }\r\n//       })\r\n//     }\r\n\r\n//     initializeCollection = () => {\r\n//       this.entities = db.getCollection('mcqs');\r\n//       if(!this.entities) {\r\n//           this.entities = db.addCollection('mcqs');\r\n//       }\r\n//       console.log('mcq entity initialized', this.entities.data.length);\r\n//     }\r\n// }\r\n// export default McqModel;\r\n"]}