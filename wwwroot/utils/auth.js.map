{"version":3,"sources":["../../src/utils/auth.js"],"names":["jwt","require","resources","resource","allowedRoles","module","exports","req","res","next","token","headers","requestedPath","path","console","log","status","send","decoded","verify","AuthConfig","myPrivateKey","user","role","currentUserRole","currentResource","filter","item","index","length","includes","ex"],"mappings":"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","file":"auth.js","sourcesContent":["const jwt = require(\"jsonwebtoken\");\r\nimport { AuthConfig } from '../commons/ServerConfig';\r\n\r\nconst resources = [\r\n    { \r\n        resource: '/admin/getAllMcqs',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/mcq',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/bulkMcq',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/getAllCategories',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/category',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/getAllSkills',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/skill',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/candidate/sendInvite',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/getAllTests',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/getTest',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/test',\r\n        allowedRoles: [ 'admin', 'recruiter' ] \r\n    },\r\n    { \r\n        resource: '/admin/getAllUsers',\r\n        allowedRoles: [ 'admin' ] \r\n    },\r\n    { \r\n        resource: '/admin/user',\r\n        allowedRoles: [ 'admin' ] \r\n    },\r\n    { \r\n        resource: '/candidate/startTest',\r\n        allowedRoles: [ 'admin', 'candidate' ] \r\n    }\r\n];\r\n\r\nmodule.exports = function(req, res, next) {\r\n    const token = req.headers[\"x-access-token\"] || req.headers[\"authorization\"];\r\n    const requestedPath = req.path;\r\n    console.log('requested path: ', requestedPath);\r\n    // console.log('auth middleware check', token);\r\n    if (!token || token === \"null\") {\r\n        console.log('token missing', token);\r\n        return res.status(401).send(\"Access denied. No token provided.\");\r\n    }\r\n    try {\r\n        //if can verify the token, set req.user and pass to next middleware\r\n        // console.log('verifying with token', token);\r\n        const decoded = jwt.verify(token, AuthConfig.myPrivateKey);\r\n        req.user = decoded;\r\n        console.log('user: ', req.user);\r\n        if(req.user && req.user.role) {\r\n            let currentUserRole = req.user.role;\r\n            // console.log('current user role: ', currentUserRole);\r\n            let currentResource = resources.filter((item, index) => {\r\n                // console.log('checking item', item.resource);\r\n                return item.resource === requestedPath;\r\n            });\r\n            if(currentResource && currentResource.length > 0) {\r\n                if(currentResource[0].allowedRoles.includes(currentUserRole)) {\r\n                    console.log(\"authorized\");\r\n                    next();\r\n                } else {\r\n                    console.log('not authorized');\r\n                    res.status(401).send('User is not authorized to perform requested operation');    \r\n                }\r\n            }\r\n            else {\r\n                console.log('not found');\r\n                return res.status(404).send(\"Not Found\");\r\n            }\r\n        }\r\n        else {\r\n            console.log('role missing');\r\n            res.status(401).send('User role is missing');\r\n        }    \r\n    } catch (ex) {\r\n            console.log('exception in authorization', req.user);\r\n            res.status(401).send(\"Invalid token.\");\r\n    }\r\n};\r\n"]}