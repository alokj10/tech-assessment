{"version":3,"sources":["../src/TestModel.js"],"names":["TestModel","entities","GetTestId","candidateEmailId","GetTestForSimulator","testId","Promise","resolve","reject","tests","find","console","log","length","UpdateTestInvite","testEntity","testStatus","candidateInvite","GetCandidateInvite","update","db","saveDatabase","invitations","filteredCandidates","filter","item","emailTo","initializeCollection","getCollection","addCollection","data"],"mappings":"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","file":"TestModel.js","sourcesContent":["import db from './db';\r\nimport users from './users';\r\n\r\nclass TestModel {\r\n    entities = {};\r\n    \r\n    constructor() {\r\n      this.initializeCollection();\r\n    }\r\n\r\n    GetTestId = (candidateEmailId) => {\r\n\r\n    }\r\n\r\n    GetTestForSimulator = (testId) => {\r\n        return new Promise((resolve, reject) => {\r\n            let tests = this.entities.find({ '$loki': testId });\r\n            console.log(`tests filtered for id: ${testId}, ${tests.length}`);\r\n            if(tests && tests.length > 0) {\r\n                resolve(tests[0]);\r\n            }\r\n            reject(\"No Test Found\");\r\n        })\r\n\r\n    }\r\n\r\n    UpdateTestInvite = (testEntity, candidateEmailId, testStatus) => {\r\n        if(testEntity !== null) {\r\n            let candidateInvite = this.GetCandidateInvite(testEntity, candidateEmailId);\r\n            if(candidateInvite !== null) {\r\n                candidateInvite.testStatus = testStatus;\r\n                tests.update(testEntity);\r\n                db.saveDatabase();\r\n                return testEntity;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    UpdateTestInvite = (testId, candidateEmailId, testStatus) => {\r\n        let tests = this.entities.find({ '$loki': testId });\r\n        console.log(`tests filtered for id: ${testId}, ${tests.length}`);\r\n        let testEntity = null;\r\n        if(tests && tests.length > 0) {\r\n            testEntity = tests[0];\r\n        }\r\n        if(testEntity !== null) {\r\n            let candidateInvite = this.GetCandidateInvite(testEntity, candidateEmailId);\r\n            if(candidateInvite !== null) {\r\n                candidateInvite.testStatus = testStatus;\r\n                // tests.update(testEntity);\r\n                this.entities.update(testEntity);\r\n                db.saveDatabase();\r\n                return testEntity;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    GetCandidateInvite = (testEntity, candidateEmailId) => {\r\n        if(testEntity && testEntity.invitations && testEntity.invitations.length > 0) {\r\n            // let filteredCandidates = testEntity.invitations.where((item) => {\r\n            //     return item.emailTo == candidateEmailId;    \r\n            // });\r\n            let filteredCandidates = testEntity.invitations.filter((item) => {\r\n                return item.emailTo === candidateEmailId;\r\n            })\r\n            console.log(`candidates filtered for emailid: ${candidateEmailId}, ${filteredCandidates.length}`);\r\n            if(filteredCandidates && filteredCandidates.length > 0) {\r\n                return filteredCandidates[0];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    initializeCollection = () => {\r\n        this.entities = db.getCollection('tests');\r\n        if(!this.entities) {\r\n            this.entities = db.addCollection('tests');\r\n        }\r\n        console.log('tests entity initialized', this.entities.data.length);\r\n    }\r\n}\r\nexport default TestModel;"]}