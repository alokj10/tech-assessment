{"version":3,"sources":["../src/users.js"],"names":["Users","GetAll","console","log","users","initializeCollection","data","length","Add","userObj","insert","db","saveDatabase","emailId","GetUser","email","user","find","UpdateUser","newEntity","filteredUsers","where","item","userToUpdate","entityToUpdate","replaceEntity","update","DeleteUser","userToDelete","remove","UserRoles","recruiter","admin","candidate","guest","oldEntity","property","hasOwnProperty","getCollection","addCollection"],"mappings":"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","file":"users.js","sourcesContent":["import db from './db';\r\n\r\nclass Users {\r\n\r\n    GetAll = () => {\r\n        console.log('get all users called');\r\n        let users = this.initializeCollection();\r\n        console.log(users.data.length);\r\n        return users.data;\r\n    }\r\n\r\n    Add = (userObj) => {\r\n        console.log('Add User called');\r\n        console.log(userObj);\r\n        let users = this.initializeCollection();\r\n        users.insert(userObj);\r\n        db.saveDatabase();\r\n        console.log('user added', userObj.emailId);\r\n    }\r\n\r\n    GetUser = (email) => {\r\n        let users = this.initializeCollection();\r\n        let user = users.find({ 'emailId': email });\r\n        if(user && user.length > 0) {\r\n            console.log('user found', user[0]);\r\n            return user[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    UpdateUser = (emailId, newEntity) => {\r\n        let users = this.initializeCollection();\r\n        let filteredUsers = users.where((item) => {\r\n            //console.log(`item: ${item['$loki']}, testId: ${testId}, result: ${item['$loki'] == testId}`); \r\n            return item['emailId'] == emailId;    \r\n        });\r\n        console.log('updating', emailId);\r\n        if(filteredUsers && filteredUsers.length > 0) {\r\n            let userToUpdate = filteredUsers[0];\r\n            \r\n            let entityToUpdate = this.replaceEntity(userToUpdate, newEntity);\r\n            users.update(entityToUpdate);\r\n            db.saveDatabase();\r\n            console.log('user updated');\r\n            return entityToUpdate;\r\n        }\r\n        else {\r\n            console.log('nothing to update');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    DeleteUser = (emailId) => {\r\n        let users = this.initializeCollection();\r\n        let userToDelete = users.where((item) => {\r\n            return item['emailId'] == emailId;\r\n        });\r\n        if(userToDelete && userToDelete.length > 0) {\r\n            users.remove(userToDelete[0]);\r\n            db.saveDatabase();\r\n            console.log('user deleted', emailId);\r\n        }\r\n    }\r\n\r\n    \r\n    UserRoles = {\r\n        recruiter: 'recruiter',\r\n        admin: 'admin',\r\n        candidate: 'candidate',\r\n        guest: 'guest'\r\n    }\r\n\r\n    replaceEntity = (oldEntity, newEntity) => {\r\n        if(oldEntity != null){\r\n            for (var property in newEntity) {\r\n                if (newEntity.hasOwnProperty(property) && property !== \"$loki\" && property !== 'meta') {\r\n                    oldEntity[property] = newEntity[property];\r\n                }\r\n            }\r\n        }\r\n        return oldEntity;\r\n    }\r\n\r\n    initializeCollection = () => {\r\n        let users = db.getCollection('users');\r\n        if(!users) {\r\n            users = db.addCollection('users');\r\n        }\r\n        return users;\r\n    }\r\n}\r\nexport default new Users();\r\n"]}